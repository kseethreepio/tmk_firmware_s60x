
S60-X_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  0000517e  00005212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000517e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009e  00800132  00800132  00005244  2**0
                  ALLOC
  3 .noinit       00000004  008001d0  008001d0  00005244  2**0
                  ALLOC
  4 .stab         00000ec4  00000000  00000000  00005244  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002e3  00000000  00000000  00006108  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000063eb  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008d8  00000000  00000000  000063fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000fcec  00000000  00000000  00006cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000041a7  00000000  00000000  000169c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004e7b  00000000  00000000  0001ab67  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000018d0  00000000  00000000  0001f9e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000040de  00000000  00000000  000212b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007a8b  00000000  00000000  00025392  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a58  00000000  00000000  0002ce1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
       0:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__ctors_end>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
       4:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
       8:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
       c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
      10:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      14:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      18:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
      1c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
      20:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
      24:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
      28:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__vector_10>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
      2c:	0c 94 23 0e 	jmp	0x1c46	; 0x1c46 <__vector_11>
      30:	0c 94 14 1c 	jmp	0x3828	; 0x3828 <__vector_12>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
      34:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      38:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      3c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      40:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      44:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      48:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      4c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      50:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      54:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <__vector_21>
      58:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      5c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      60:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      64:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      68:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      6c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      70:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      74:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      78:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      7c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      80:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      84:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      88:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      8c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      90:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      94:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      98:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      9c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      a0:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      a4:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      a8:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      ac:	90 0e       	add	r9, r16
      ae:	b2 0e       	add	r11, r18
      b0:	a0 0f       	add	r26, r16
      b2:	b2 0e       	add	r11, r18
      b4:	a0 0f       	add	r26, r16
      b6:	f7 0e       	add	r15, r23
      b8:	1a 0f       	add	r17, r26
      ba:	a0 0f       	add	r26, r16
      bc:	6f 0f       	add	r22, r31
      be:	82 0f       	add	r24, r18
      c0:	ce 12       	cpse	r12, r30
      c2:	ce 12       	cpse	r12, r30
      c4:	fb 12       	cpse	r15, r27
      c6:	fb 12       	cpse	r15, r27
      c8:	56 13       	cpse	r21, r22
      ca:	92 13       	cpse	r25, r18
      cc:	8a 15       	cp	r24, r10
      ce:	8a 15       	cp	r24, r10
      d0:	aa 13       	cpse	r26, r26
      d2:	8a 15       	cp	r24, r10
      d4:	a5 14       	cp	r10, r5
      d6:	a5 14       	cp	r10, r5
      d8:	60 15       	cp	r22, r0
      da:	8a 15       	cp	r24, r10
      dc:	8a 15       	cp	r24, r10
      de:	76 15       	cp	r23, r6

000000e0 <__trampolines_end>:
      e0:	f1 a1       	ldd	r31, Z+33	; 0x21
      e2:	39 32       	cpi	r19, 0x29	; 41

000000e4 <keymaps>:
      e4:	29 1e 1f 20 21 22 23 24 25 26 27 2d 2e 00 2a 2b     ).. !"#$%&'-..*+
      f4:	14 1a 08 15 17 1c 18 0c 12 13 2f 30 31 00 c0 04     ........../01...
     104:	16 07 09 0a 0b 0d 0e 0f 33 34 00 28 00 e1 00 1d     ........34.(....
     114:	1b 06 19 05 11 10 36 37 38 00 c1 00 e0 e3 e2 00     ......678.......
     124:	00 00 2c 00 00 00 e6 e7 48 e4 00 35 3a 3b 3c 3d     ..,.....H..5:;<=
     134:	3e 3f 40 41 42 43 44 45 00 4c 00 00 00 00 00 00     >?@ABCDE.L......
     144:	00 00 00 00 46 4a 4d 00 00 01 00 00 00 00 00 50     ....FJM........P
     154:	51 52 4f 00 00 00 00 00 e1 00 00 00 00 00 00 00     QRO.............
     164:	00 4b 4e 00 00 c1 00 e0 e3 e2 00 00 00 2c 00 00     .KN..........,..
     174:	00 e6 e7 00 e4 00                                   ......

0000017a <__c.1942>:
     17a:	0a 00                                               ..

0000017c <__c.1940>:
     17c:	25 30 31 36 62 00                                   %016b.

00000182 <__c.1938>:
     182:	3a 20 00                                            : .

00000185 <__c.1936>:
     185:	25 30 32 58 00                                      %02X.

0000018a <__c.1933>:
     18a:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     19a:	42 43 44 45 46 0a 00                                BCDEF..

000001a1 <__c.1911>:
     1a1:	0a 00                                               ..

000001a3 <__c.1909>:
     1a3:	25 30 32 58 00                                      %02X.

000001a8 <__c.1907>:
     1a8:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

000001b2 <__c.4843>:
     1b2:	5b 73 5d 00                                         [s].

000001b6 <__c.4841>:
     1b6:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     1c6:	00                                                  .

000001c7 <__c.4839>:
     1c7:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     1d7:	00                                                  .

000001d8 <__c.4741>:
     1d8:	5b 57 5d 00                                         [W].

000001dc <__c.4737>:
     1dc:	5b 53 5d 00                                         [S].

000001e0 <__c.4733>:
     1e0:	5b 52 5d 00                                         [R].

000001e4 <__c.4728>:
     1e4:	5b 44 5d 00                                         [D].

000001e8 <__c.4723>:
     1e8:	5b 43 5d 00                                         [C].

000001ec <ProductString>:
     1ec:	0c 03 53 00 36 00 30 00 2d 00 58 00 00 00           ..S.6.0.-.X...

000001fa <ManufacturerString>:
     1fa:	08 03 76 00 6e 00 63 00 00 00                       ..v.n.c...

00000204 <LanguageString>:
     204:	04 03 09 04                                         ....

00000208 <ConfigurationDescriptor>:
     208:	09 02 74 00 04 01 00 a0 32 09 04 00 00 01 03 01     ..t.....2.......
     218:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     228:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     238:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     248:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     258:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     268:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
     278:	03 20 00 01                                         . ..

0000027c <DeviceDescriptor>:
     27c:	12 01 10 01 00 00 00 08 da f0 66 06 01 00 01 02     ..........f.....
     28c:	00 01                                               ..

0000028e <ConsoleReport>:
     28e:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     29e:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

000002ae <ExtrakeyReport>:
     2ae:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     2be:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     2ce:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     2de:	10 95 01 81 00 c0                                   ......

000002e4 <MouseReport>:
     2e4:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     2f4:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     304:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     314:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     324:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000331 <KeyboardReport>:
     331:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     341:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     351:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     361:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

00000370 <__c.2045>:
     370:	0a 00                                               ..

00000372 <__c.2040>:
     372:	25 30 32 58 20 00                                   %02X .

00000378 <__c.2037>:
     378:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     388:	20 00                                                .

0000038a <__c.2385>:
     38a:	0a 00                                               ..

0000038c <__c.2383>:
     38c:	25 30 32 58 00                                      %02X.

00000391 <__c.2381>:
     391:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
     3a1:	3a 20 00                                            : .

000003a4 <__c.2454>:
     3a4:	64 6f 6e 65 2e 0a 00                                done...

000003ab <__c.2448>:
     3ab:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     3bb:	2e 2e 2e 20 00                                      ... .

000003c0 <__c.2118>:
     3c0:	29 0a 00                                            )..

000003c3 <__c.2116>:
     3c3:	25 75 00                                            %u.

000003c6 <__c.2114>:
     3c6:	2f 00                                               /.

000003c8 <__c.2112>:
     3c8:	25 75 00                                            %u.

000003cb <__c.2110>:
     3cb:	5d 28 00                                            ](.

000003ce <__c.2108>:
     3ce:	25 64 00                                            %d.

000003d1 <__c.2106>:
     3d1:	20 00                                                .

000003d3 <__c.2104>:
     3d3:	25 64 00                                            %d.

000003d6 <__c.2102>:
     3d6:	20 00                                                .

000003d8 <__c.2100>:
     3d8:	25 64 00                                            %d.

000003db <__c.2098>:
     3db:	20 00                                                .

000003dd <__c.2096>:
     3dd:	25 64 00                                            %d.

000003e0 <__c.2094>:
     3e0:	7c 00                                               |.

000003e2 <__c.2092>:
     3e2:	25 30 32 58 00                                      %02X.

000003e7 <__c.2090>:
     3e7:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     3f7:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     407:	20 5b 00                                             [.

0000040a <__c.2835>:
     40a:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     41a:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000425 <__c.2832>:
     425:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     435:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000043e <__c.2829>:
     43e:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     44e:	20 25 64 0a 00                                       %d..

00000453 <__c.2826>:
     453:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     463:	64 0a 00                                            d..

00000466 <__c.2823>:
     466:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     476:	0a 00                                               ..

00000478 <__c.2819>:
     478:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000487 <__c.2812>:
     487:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     497:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000004a2 <__c.2809>:
     4a2:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     4b2:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000004bb <__c.2806>:
     4bb:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     4cb:	20 25 64 0a 00                                       %d..

000004d0 <__c.2803>:
     4d0:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     4e0:	64 0a 00                                            d..

000004e3 <__c.2800>:
     4e3:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     4f3:	0a 00                                               ..

000004f5 <__c.2796>:
     4f5:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000504 <__c.2789>:
     504:	0a 00                                               ..

00000506 <__c.2787>:
     506:	25 75 00                                            %u.

00000509 <__c.2785>:
     509:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     519:	5f 6d 61 78 3a 20 00                                _max: .

00000520 <__c.2783>:
     520:	0a 00                                               ..

00000522 <__c.2781>:
     522:	25 75 00                                            %u.

00000525 <__c.2779>:
     525:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     535:	65 64 3a 20 00                                      ed: .

0000053a <__c.2777>:
     53a:	0a 00                                               ..

0000053c <__c.2775>:
     53c:	25 75 00                                            %u.

0000053f <__c.2773>:
     53f:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     54f:	00                                                  .

00000550 <__c.2771>:
     550:	0a 00                                               ..

00000552 <__c.2769>:
     552:	25 75 00                                            %u.

00000555 <__c.2767>:
     555:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000564 <__c.2765>:
     564:	0a 00                                               ..

00000566 <__c.2763>:
     566:	25 75 00                                            %u.

00000569 <__c.2761>:
     569:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     579:	20 00                                                .

0000057b <__c.2759>:
     57b:	0a 00                                               ..

0000057d <__c.2757>:
     57d:	25 75 00                                            %u.

00000580 <__c.2755>:
     580:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     590:	20 00                                                .

00000592 <__c.2753>:
     592:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000005a0 <__c.2873>:
     5a0:	4d 3e 00                                            M>.

000005a3 <__c.2871>:
     5a3:	4d 25 64 3e 20 00                                   M%d> .

000005a9 <__c.2869>:
     5a9:	3f 00                                               ?.

000005ab <__c.2866>:
     5ab:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000005b8 <__c.2852>:
     5b8:	43 3e 20 00                                         C> .

000005bc <__c.2842>:
     5bc:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     5cc:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     5dc:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     5ec:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     5fc:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

0000060a <__c.2840>:
     60a:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     61a:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     62a:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     63a:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     64a:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     65a:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     66a:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     67a:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     68a:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     69a:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     6aa:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     6ba:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     6ca:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     6da:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     6ea:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     6fa:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000705 <__c.2745>:
     705:	3f 00                                               ?.

00000707 <__c.2742>:
     707:	4d 3e 20 00                                         M> .

0000070b <__c.2747>:
     70b:	43 3e 20 00                                         C> .

0000070f <__c.2891>:
     70f:	4c 25 64 0a 00                                      L%d..

00000714 <__c.2731>:
     714:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     724:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     734:	73 65 6b 65 79 0a 00                                sekey..

0000073b <__c.2563>:
     73b:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     74b:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     75b:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     76b:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     77b:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     78b:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     79b:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     7ab:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     7bb:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     7cb:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 00              r.e:.eeprom..

000007d8 <__c.2658>:
     7d8:	0a 00                                               ..

000007da <__c.2656>:
     7da:	25 75 00                                            %u.

000007dd <__c.2654>:
     7dd:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

000007e5 <__c.2652>:
     7e5:	0a 00                                               ..

000007e7 <__c.2650>:
     7e7:	25 75 00                                            %u.

000007ea <__c.2648>:
     7ea:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     7fa:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000806 <__c.2646>:
     806:	0a 00                                               ..

00000808 <__c.2644>:
     808:	25 75 00                                            %u.

0000080b <__c.2642>:
     80b:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     81b:	20 00                                                .

0000081d <__c.2640>:
     81d:	0a 00                                               ..

0000081f <__c.2638>:
     81f:	25 75 00                                            %u.

00000822 <__c.2636>:
     822:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

0000082c <__c.2634>:
     82c:	0a 00                                               ..

0000082e <__c.2632>:
     82e:	25 75 00                                            %u.

00000831 <__c.2630>:
     831:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     841:	20 00                                                .

00000843 <__c.2628>:
     843:	0a 00                                               ..

00000845 <__c.2626>:
     845:	25 75 00                                            %u.

00000848 <__c.2624>:
     848:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     858:	20 00                                                .

0000085a <__c.2622>:
     85a:	0a 00                                               ..

0000085c <__c.2620>:
     85c:	25 75 00                                            %u.

0000085f <__c.2618>:
     85f:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     86f:	74 72 6f 6c 3a 20 00                                trol: .

00000876 <__c.2616>:
     876:	0a 00                                               ..

00000878 <__c.2614>:
     878:	25 75 00                                            %u.

0000087b <__c.2612>:
     87b:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     88b:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000894 <__c.2610>:
     894:	0a 00                                               ..

00000896 <__c.2608>:
     896:	25 30 32 58 00                                      %02X.

0000089b <__c.2606>:
     89b:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     8ab:	77 3a 20 00                                         w: .

000008af <__c.2603>:
     8af:	0a 00                                               ..

000008b1 <__c.2601>:
     8b1:	25 75 00                                            %u.

000008b4 <__c.2599>:
     8b4:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

000008bd <__c.2597>:
     8bd:	0a 00                                               ..

000008bf <__c.2595>:
     8bf:	25 75 00                                            %u.

000008c2 <__c.2593>:
     8c2:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

000008ce <__c.2591>:
     8ce:	0a 00                                               ..

000008d0 <__c.2589>:
     8d0:	25 75 00                                            %u.

000008d3 <__c.2587>:
     8d3:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

000008dd <__c.2585>:
     8dd:	0a 00                                               ..

000008df <__c.2583>:
     8df:	25 75 00                                            %u.

000008e2 <__c.2581>:
     8e2:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

000008ec <__c.2579>:
     8ec:	0a 00                                               ..

000008ee <__c.2577>:
     8ee:	25 30 32 58 00                                      %02X.

000008f3 <__c.2575>:
     8f3:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     903:	3a 20 00                                            : .

00000906 <__c.2572>:
     906:	0a 00                                               ..

00000908 <__c.2570>:
     908:	25 75 00                                            %u.

0000090b <__c.2568>:
     90b:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

0000091b <__c.2726>:
     91b:	3f 00                                               ?.

0000091d <__c.2717>:
     91d:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     92d:	25 30 34 6c 58 0a 00                                %04lX..

00000934 <__c.2715>:
     934:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     944:	58 0a 00                                            X..

00000947 <__c.2713>:
     947:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     957:	6c 3a 20 25 58 0a 00                                l: %X..

0000095e <__c.2711>:
     95e:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     96e:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000978 <__c.2709>:
     978:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000986 <__c.2706>:
     986:	47 43 43 3a 20 34 2e 39 2e 33 20 41 56 52 2d 4c     GCC: 4.9.3 AVR-L
     996:	49 42 43 3a 20 31 2e 38 2e 31 20 41 56 52 5f 41     IBC: 1.8.1 AVR_A
     9a6:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

000009b1 <__c.2704>:
     9b1:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     9c1:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     9d1:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     9e1:	45 20 43 4f 4d 4d 41 4e 44 20 34 30 39 36 0a 00     E COMMAND 4096..

000009f1 <__c.2702>:
     9f1:	42 55 49 4c 44 3a 20 39 61 35 63 61 61 36 2d 64     BUILD: 9a5caa6-d
     a01:	69 72 74 79 20 28 32 32 3a 35 31 3a 31 39 20 4d     irty (22:51:19 M
     a11:	61 72 20 32 39 20 32 30 31 36 29 0a 00              ar 29 2016)..

00000a1e <__c.2700>:
     a1e:	56 49 44 3a 20 30 78 46 30 44 41 28 76 6e 63 29     VID: 0xF0DA(vnc)
     a2e:	20 50 49 44 3a 20 30 78 30 36 36 36 28 53 36 30      PID: 0x0666(S60
     a3e:	2d 58 29 20 56 45 52 3a 20 30 78 30 30 30 31 0a     -X) VER: 0x0001.
     a4e:	00                                                  .

00000a4f <__c.2698>:
     a4f:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     a5f:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     a6f:	6f 72 20 53 65 6e 74 72 61 71 20 53 36 30 2d 58     or Sentraq S60-X
     a7f:	0a 00                                               ..

00000a81 <__c.2696>:
     a81:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000a90 <__c.2693>:
     a90:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000a9d <__c.2691>:
     a9d:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000aa9 <__c.2688>:
     aa9:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000ab9 <__c.2686>:
     ab9:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000ac8 <__c.2683>:
     ac8:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000ad6 <__c.2681>:
     ad6:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000ae3 <__c.2678>:
     ae3:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000aef <__c.2676>:
     aef:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000afc <__c.2673>:
     afc:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     b0c:	00                                                  .

00000b0d <__c.2670>:
     b0d:	43 3e 20 00                                         C> .

00000b11 <__c.2664>:
     b11:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000b1c <__ctors_end>:
     b1c:	11 24       	eor	r1, r1
     b1e:	1f be       	out	0x3f, r1	; 63
     b20:	cf ef       	ldi	r28, 0xFF	; 255
     b22:	da e0       	ldi	r29, 0x0A	; 10
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	cd bf       	out	0x3d, r28	; 61

00000b28 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     b28:	04 b6       	in	r0, 0x34	; 52
     b2a:	03 fe       	sbrs	r0, 3
     b2c:	24 c0       	rjmp	.+72     	; 0xb76 <__do_copy_data>
     b2e:	80 91 d0 01 	lds	r24, 0x01D0
     b32:	90 91 d1 01 	lds	r25, 0x01D1
     b36:	a0 91 d2 01 	lds	r26, 0x01D2
     b3a:	b0 91 d3 01 	lds	r27, 0x01D3
     b3e:	87 30       	cpi	r24, 0x07	; 7
     b40:	90 4b       	sbci	r25, 0xB0	; 176
     b42:	a7 40       	sbci	r26, 0x07	; 7
     b44:	b0 4b       	sbci	r27, 0xB0	; 176
     b46:	b9 f4       	brne	.+46     	; 0xb76 <__do_copy_data>
        reset_key = 0;
     b48:	10 92 d0 01 	sts	0x01D0, r1
     b4c:	10 92 d1 01 	sts	0x01D1, r1
     b50:	10 92 d2 01 	sts	0x01D2, r1
     b54:	10 92 d3 01 	sts	0x01D3, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     b58:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     b5a:	84 b7       	in	r24, 0x34	; 52
     b5c:	87 7f       	andi	r24, 0xF7	; 247
     b5e:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     b60:	88 e1       	ldi	r24, 0x18	; 24
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	80 93 60 00 	sts	0x0060, r24
     b6a:	10 92 60 00 	sts	0x0060, r1
     b6e:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     b70:	e0 e0       	ldi	r30, 0x00	; 0
     b72:	f8 e3       	ldi	r31, 0x38	; 56
     b74:	09 95       	icall

00000b76 <__do_copy_data>:
     b76:	11 e0       	ldi	r17, 0x01	; 1
     b78:	a0 e0       	ldi	r26, 0x00	; 0
     b7a:	b1 e0       	ldi	r27, 0x01	; 1
     b7c:	ee e7       	ldi	r30, 0x7E	; 126
     b7e:	f1 e5       	ldi	r31, 0x51	; 81
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <__do_copy_data+0x10>
     b82:	05 90       	lpm	r0, Z+
     b84:	0d 92       	st	X+, r0
     b86:	a2 33       	cpi	r26, 0x32	; 50
     b88:	b1 07       	cpc	r27, r17
     b8a:	d9 f7       	brne	.-10     	; 0xb82 <__do_copy_data+0xc>

00000b8c <__do_clear_bss>:
     b8c:	11 e0       	ldi	r17, 0x01	; 1
     b8e:	a2 e3       	ldi	r26, 0x32	; 50
     b90:	b1 e0       	ldi	r27, 0x01	; 1
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <.do_clear_bss_start>

00000b94 <.do_clear_bss_loop>:
     b94:	1d 92       	st	X+, r1

00000b96 <.do_clear_bss_start>:
     b96:	a0 3d       	cpi	r26, 0xD0	; 208
     b98:	b1 07       	cpc	r27, r17
     b9a:	e1 f7       	brne	.-8      	; 0xb94 <.do_clear_bss_loop>
     b9c:	0e 94 85 0a 	call	0x150a	; 0x150a <main>
     ba0:	0c 94 bd 28 	jmp	0x517a	; 0x517a <_exit>

00000ba4 <__bad_interrupt>:
     ba4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000ba8 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     ba8:	ff 93       	push	r31
	push	ZL
     baa:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     bac:	e0 91 32 01 	lds	r30, 0x0132
	lds	ZH, xfunc_out+1	;/
     bb0:	f0 91 33 01 	lds	r31, 0x0133
	sbiw	ZL, 0		;Skip if null
     bb4:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     bb6:	09 f0       	breq	.+2      	; 0xbba <xputc+0x12>
	icall
     bb8:	09 95       	icall
2:	pop	ZL
     bba:	ef 91       	pop	r30
	pop	ZH
     bbc:	ff 91       	pop	r31
	ret
     bbe:	08 95       	ret

00000bc0 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     bc0:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     bc2:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     bc4:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     bc6:	11 f0       	breq	.+4      	; 0xbcc <xputs+0xc>
	rcall	xputc
     bc8:	ef df       	rcall	.-34     	; 0xba8 <xputc>
	rjmp	1b
     bca:	fb cf       	rjmp	.-10     	; 0xbc2 <xputs+0x2>
2:	ret
     bcc:	08 95       	ret

00000bce <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     bce:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     bd0:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     bd2:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     bd4:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     bd6:	0c c0       	rjmp	.+24     	; 0xbf0 <xitoa+0x22>
	neg	r20		;
     bd8:	41 95       	neg	r20
	sbrs	r25, 7		;
     bda:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     bdc:	09 c0       	rjmp	.+18     	; 0xbf0 <xitoa+0x22>
	ldi	r30, '-'	;
     bde:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     be0:	60 95       	com	r22
	com	r23		;
     be2:	70 95       	com	r23
	com	r24		;
     be4:	80 95       	com	r24
	com	r25		;
     be6:	90 95       	com	r25
	adc	r22, r1		;
     be8:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     bea:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     bec:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     bee:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     bf0:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <xitoa+0x2a>
	neg	r18		;
     bf4:	21 95       	neg	r18
	ldi	r19, '0'	;/
     bf6:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     bf8:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     bfa:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     bfc:	66 0f       	add	r22, r22
	rol	r23		;
     bfe:	77 1f       	adc	r23, r23
	rol	r24		;
     c00:	88 1f       	adc	r24, r24
	rol	r25		;
     c02:	99 1f       	adc	r25, r25
	rol	r26		;
     c04:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     c06:	a4 17       	cp	r26, r20
	brcs	3f		;
     c08:	10 f0       	brcs	.+4      	; 0xc0e <xitoa+0x40>
	sub	r26, r20	;
     c0a:	a4 1b       	sub	r26, r20
	inc	r22		;
     c0c:	63 95       	inc	r22
3:	dec	r21		;
     c0e:	5a 95       	dec	r21
	brne	2b		;/
     c10:	a9 f7       	brne	.-22     	; 0xbfc <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     c12:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     c14:	08 f0       	brcs	.+2      	; 0xc18 <xitoa+0x4a>
	subi	r26, -7		;
     c16:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     c18:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     c1a:	af 93       	push	r26
	inc	r31		;/
     c1c:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     c1e:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     c20:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     c22:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     c24:	91 05       	cpc	r25, r1
	brne	1b		;/
     c26:	41 f7       	brne	.-48     	; 0xbf8 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     c28:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     c2a:	11 f4       	brne	.+4      	; 0xc30 <xitoa+0x62>
	push	r30		;
     c2c:	ef 93       	push	r30
	inc	r31		;/
     c2e:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     c30:	f2 17       	cp	r31, r18
	brcc	6f		;
     c32:	18 f4       	brcc	.+6      	; 0xc3a <xitoa+0x6c>
	push	r19		;
     c34:	3f 93       	push	r19
	inc	r31		;
     c36:	f3 95       	inc	r31
	rjmp	5b		;/
     c38:	fb cf       	rjmp	.-10     	; 0xc30 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     c3a:	8f 91       	pop	r24
	rcall	xputc		;
     c3c:	b5 df       	rcall	.-150    	; 0xba8 <xputc>
	dec	r31		;
     c3e:	fa 95       	dec	r31
	brne	6b		;/
     c40:	e1 f7       	brne	.-8      	; 0xc3a <xitoa+0x6c>

	ret
     c42:	08 95       	ret

00000c44 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     c44:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     c46:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     c48:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     c4a:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     c4c:	21 f0       	breq	.+8      	; 0xc56 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     c4e:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     c50:	19 f0       	breq	.+6      	; 0xc58 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     c52:	aa df       	rcall	.-172    	; 0xba8 <xputc>
	rjmp	0b		;/
     c54:	f9 cf       	rjmp	.-14     	; 0xc48 <xvprintf+0x4>
90:	ret
     c56:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     c58:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     c5a:	e8 94       	clt
	_LPMI	r21		;Get flags
     c5c:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     c5e:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     c60:	c1 f3       	breq	.-16     	; 0xc52 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     c62:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     c64:	11 f4       	brne	.+4      	; 0xc6a <xvprintf+0x26>
	set			;/
     c66:	68 94       	set
22:	_LPMI	r21		;Get width
     c68:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     c6a:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     c6c:	48 f4       	brcc	.+18     	; 0xc80 <xvprintf+0x3c>
	subi	r21, '0'	;
     c6e:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     c70:	90 f3       	brcs	.-28     	; 0xc56 <xvprintf+0x12>
	lsl	r18		;
     c72:	22 0f       	add	r18, r18
	mov	r0, r18		;
     c74:	02 2e       	mov	r0, r18
	lsl	r18		;
     c76:	22 0f       	add	r18, r18
	lsl	r18		;
     c78:	22 0f       	add	r18, r18
	add	r18, r0		;
     c7a:	20 0d       	add	r18, r0
	add	r18, r21	;
     c7c:	25 0f       	add	r18, r21
	rjmp	22b		;/
     c7e:	f4 cf       	rjmp	.-24     	; 0xc68 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     c80:	0e f4       	brtc	.+2      	; 0xc84 <xvprintf+0x40>
	neg	r18		;
     c82:	21 95       	neg	r18
25:	ld	r24, Y+		;
     c84:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     c86:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     c88:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     c8a:	19 f3       	breq	.-58     	; 0xc52 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     c8c:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     c8e:	29 f1       	breq	.+74     	; 0xcda <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     c90:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     c92:	59 f1       	breq	.+86     	; 0xcea <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     c94:	bc 01       	movw	r22, r24
	clr	r24		;
     c96:	88 27       	eor	r24, r24
	clr	r25		;
     c98:	99 27       	eor	r25, r25
	clt			;/
     c9a:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     c9c:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     c9e:	21 f4       	brne	.+8      	; 0xca8 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     ca0:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     ca2:	99 91       	ld	r25, Y+
	set			;
     ca4:	68 94       	set
	_LPMI	r21		;/
     ca6:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     ca8:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     caa:	39 f4       	brne	.+14     	; 0xcba <xvprintf+0x76>
	ldi	r20, -10	;
     cac:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     cae:	7e f0       	brts	.+30     	; 0xcce <xvprintf+0x8a>
	sbrs	r23, 7		;
     cb0:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     cb2:	0d c0       	rjmp	.+26     	; 0xcce <xvprintf+0x8a>
	ldi	r24, -1		;
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     cb6:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     cb8:	0a c0       	rjmp	.+20     	; 0xcce <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     cba:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     cbc:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     cbe:	39 f0       	breq	.+14     	; 0xcce <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     cc0:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     cc2:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     cc4:	21 f0       	breq	.+8      	; 0xcce <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     cc6:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     cc8:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     cca:	09 f0       	breq	.+2      	; 0xcce <xvprintf+0x8a>
	ret			;abort
     ccc:	08 95       	ret
40:	push	ZH		;Output the value
     cce:	ff 93       	push	r31
	push	ZL		;
     cd0:	ef 93       	push	r30
	rcall	xitoa		;
     cd2:	7d df       	rcall	.-262    	; 0xbce <xitoa>
42:	pop	ZL		;
     cd4:	ef 91       	pop	r30
	pop	ZH		;
     cd6:	ff 91       	pop	r31
	rjmp	0b		;/
     cd8:	b7 cf       	rjmp	.-146    	; 0xc48 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     cda:	ff 93       	push	r31
	push	ZL
     cdc:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     cde:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     ce0:	81 91       	ld	r24, Z+
	cpi	r24, 0
     ce2:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     ce4:	b9 f3       	breq	.-18     	; 0xcd4 <xvprintf+0x90>
	rcall	xputc
     ce6:	60 df       	rcall	.-320    	; 0xba8 <xputc>
	rjmp	51b
     ce8:	fb cf       	rjmp	.-10     	; 0xce0 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     cea:	ff 93       	push	r31
	push	ZL
     cec:	ef 93       	push	r30
	rcall	xputs
     cee:	68 df       	rcall	.-304    	; 0xbc0 <xputs>
	rjmp	42b
     cf0:	f1 cf       	rjmp	.-30     	; 0xcd4 <xvprintf+0x90>

00000cf2 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     cf2:	df 93       	push	r29
	push	YL
     cf4:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     cf6:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     cf8:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     cfa:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     cfc:	a3 df       	rcall	.-186    	; 0xc44 <xvprintf>
	pop	YL
     cfe:	cf 91       	pop	r28
	pop	YH
     d00:	df 91       	pop	r29
	ret
     d02:	08 95       	ret

00000d04 <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     d04:	9f e0       	ldi	r25, 0x0F	; 15
     d06:	79 9f       	mul	r23, r25
     d08:	f0 01       	movw	r30, r0
     d0a:	11 24       	eor	r1, r1
     d0c:	9b e4       	ldi	r25, 0x4B	; 75
     d0e:	89 9f       	mul	r24, r25
     d10:	e0 0d       	add	r30, r0
     d12:	f1 1d       	adc	r31, r1
     d14:	11 24       	eor	r1, r1
     d16:	e6 0f       	add	r30, r22
     d18:	f1 1d       	adc	r31, r1
     d1a:	ec 51       	subi	r30, 0x1C	; 28
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	84 91       	lpm	r24, Z
}
     d20:	08 95       	ret

00000d22 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     d22:	e8 2f       	mov	r30, r24
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	ee 0f       	add	r30, r30
     d28:	ff 1f       	adc	r31, r31
     d2a:	e0 5a       	subi	r30, 0xA0	; 160
     d2c:	f0 40       	sbci	r31, 0x00	; 0
}
     d2e:	85 91       	lpm	r24, Z+
     d30:	94 91       	lpm	r25, Z
     d32:	08 95       	ret

00000d34 <unselect_rows>:
 * pin: B7  B3  B2  B1  B0
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRB  &= ~0b10001111;
     d34:	84 b1       	in	r24, 0x04	; 4
     d36:	80 77       	andi	r24, 0x70	; 112
     d38:	84 b9       	out	0x04, r24	; 4
    PORTB &= ~0b10001111;
     d3a:	85 b1       	in	r24, 0x05	; 5
     d3c:	80 77       	andi	r24, 0x70	; 112
     d3e:	85 b9       	out	0x05, r24	; 5
     d40:	08 95       	ret

00000d42 <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     d42:	0e 94 9a 06 	call	0xd34	; 0xd34 <unselect_rows>
 * pin: D0  D1  D2  D3  D5  D4  D6  D7  B4  B5  B6  C6  C7  E6  F1
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRF  &= ~(1<<5);
     d46:	85 98       	cbi	0x10, 5	; 16
    PORTF |=  (1<<1);
     d48:	89 9a       	sbi	0x11, 1	; 17
    DDRE  &= ~(1<<6);
     d4a:	6e 98       	cbi	0x0d, 6	; 13
    PORTE |=  (1<<6);
     d4c:	76 9a       	sbi	0x0e, 6	; 14
    DDRD  &= ~(1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     d4e:	8a b1       	in	r24, 0x0a	; 10
     d50:	1a b8       	out	0x0a, r1	; 10
    PORTD |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     d52:	8b b1       	in	r24, 0x0b	; 11
     d54:	8f ef       	ldi	r24, 0xFF	; 255
     d56:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<7 | 1<<6);
     d58:	87 b1       	in	r24, 0x07	; 7
     d5a:	8f 73       	andi	r24, 0x3F	; 63
     d5c:	87 b9       	out	0x07, r24	; 7
    PORTC |=  (1<<7 | 1<<6);
     d5e:	88 b1       	in	r24, 0x08	; 8
     d60:	80 6c       	ori	r24, 0xC0	; 192
     d62:	88 b9       	out	0x08, r24	; 8
    DDRB  &= ~(1<<6 | 1<< 5 | 1<<4);
     d64:	84 b1       	in	r24, 0x04	; 4
     d66:	8f 78       	andi	r24, 0x8F	; 143
     d68:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<<6 | 1<< 5 | 1<<4);
     d6a:	85 b1       	in	r24, 0x05	; 5
     d6c:	80 67       	ori	r24, 0x70	; 112
     d6e:	85 b9       	out	0x05, r24	; 5
     d70:	ee e3       	ldi	r30, 0x3E	; 62
     d72:	f1 e0       	ldi	r31, 0x01	; 1
     d74:	a4 e3       	ldi	r26, 0x34	; 52
     d76:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     d78:	11 92       	st	Z+, r1
     d7a:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
     d7c:	1d 92       	st	X+, r1
     d7e:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	e8 34       	cpi	r30, 0x48	; 72
     d84:	f8 07       	cpc	r31, r24
     d86:	c1 f7       	brne	.-16     	; 0xd78 <matrix_init+0x36>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
     d88:	08 95       	ret

00000d8a <matrix_scan>:

uint8_t matrix_scan(void)
{
     d8a:	cf 92       	push	r12
     d8c:	df 92       	push	r13
     d8e:	ef 92       	push	r14
     d90:	ff 92       	push	r15
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	04 e3       	ldi	r16, 0x34	; 52
     d9c:	11 e0       	ldi	r17, 0x01	; 1
     d9e:	e8 01       	movw	r28, r16
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     da0:	c1 2c       	mov	r12, r1
     da2:	dd 24       	eor	r13, r13
     da4:	d3 94       	inc	r13
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     da6:	e3 ea       	ldi	r30, 0xA3	; 163
     da8:	ee 2e       	mov	r14, r30
     daa:	e1 e0       	ldi	r30, 0x01	; 1
     dac:	fe 2e       	mov	r15, r30
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	c8 16       	cp	r12, r24
     db2:	91 f0       	breq	.+36     	; 0xdd8 <matrix_scan+0x4e>
     db4:	8c 15       	cp	r24, r12
     db6:	20 f0       	brcs	.+8      	; 0xdc0 <matrix_scan+0x36>
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	c9 16       	cp	r12, r25
     dbc:	51 f0       	breq	.+20     	; 0xdd2 <matrix_scan+0x48>
     dbe:	06 c0       	rjmp	.+12     	; 0xdcc <matrix_scan+0x42>
     dc0:	a3 e0       	ldi	r26, 0x03	; 3
     dc2:	ca 16       	cp	r12, r26
     dc4:	61 f0       	breq	.+24     	; 0xdde <matrix_scan+0x54>
     dc6:	b4 e0       	ldi	r27, 0x04	; 4
     dc8:	cb 16       	cp	r12, r27
     dca:	61 f0       	breq	.+24     	; 0xde4 <matrix_scan+0x5a>
        case 0:
            DDRB  |= (1<<7);
     dcc:	27 9a       	sbi	0x04, 7	; 4
            PORTB &= ~(1<<7);
     dce:	2f 98       	cbi	0x05, 7	; 5
     dd0:	0b c0       	rjmp	.+22     	; 0xde8 <matrix_scan+0x5e>
            break;
        case 1:
            DDRB  |= (1<<3);
     dd2:	23 9a       	sbi	0x04, 3	; 4
            PORTB &= ~(1<<3);
     dd4:	2b 98       	cbi	0x05, 3	; 5
     dd6:	08 c0       	rjmp	.+16     	; 0xde8 <matrix_scan+0x5e>
            break;
        case 2:
            DDRB  |= (1<<2);
     dd8:	22 9a       	sbi	0x04, 2	; 4
            PORTB &= ~(1<<2);
     dda:	2a 98       	cbi	0x05, 2	; 5
     ddc:	05 c0       	rjmp	.+10     	; 0xde8 <matrix_scan+0x5e>
            break;
        case 3:
            DDRB  |= (1<<1);
     dde:	21 9a       	sbi	0x04, 1	; 4
            PORTB &= ~(1<<1);
     de0:	29 98       	cbi	0x05, 1	; 5
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <matrix_scan+0x5e>
            break;
        case 4:
            DDRB  |= (1<<0);
     de4:	20 9a       	sbi	0x04, 0	; 4
            PORTB &= ~(1<<0);
     de6:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     de8:	80 ea       	ldi	r24, 0xA0	; 160
     dea:	8a 95       	dec	r24
     dec:	f1 f7       	brne	.-4      	; 0xdea <matrix_scan+0x60>
    PORTB |=  (1<<6 | 1<< 5 | 1<<4);
}

static matrix_row_t read_cols(void)
{
    return (PIND&(1<<0) ? 0 : (1<<0)) |
     dee:	89 b1       	in	r24, 0x09	; 9
     df0:	81 70       	andi	r24, 0x01	; 1
     df2:	8d 25       	eor	r24, r13
     df4:	90 e0       	ldi	r25, 0x00	; 0
           (PIND&(1<<1) ? 0 : (1<<1)) |
     df6:	49 99       	sbic	0x09, 1	; 9
     df8:	03 c0       	rjmp	.+6      	; 0xe00 <matrix_scan+0x76>
     dfa:	22 e0       	ldi	r18, 0x02	; 2
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <matrix_scan+0x7a>
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
    PORTB |=  (1<<6 | 1<< 5 | 1<<4);
}

static matrix_row_t read_cols(void)
{
    return (PIND&(1<<0) ? 0 : (1<<0)) |
     e04:	82 2b       	or	r24, r18
     e06:	93 2b       	or	r25, r19
           (PIND&(1<<1) ? 0 : (1<<1)) |
           (PIND&(1<<2) ? 0 : (1<<2)) |
     e08:	4a 99       	sbic	0x09, 2	; 9
     e0a:	03 c0       	rjmp	.+6      	; 0xe12 <matrix_scan+0x88>
     e0c:	24 e0       	ldi	r18, 0x04	; 4
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <matrix_scan+0x8c>
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
}

static matrix_row_t read_cols(void)
{
    return (PIND&(1<<0) ? 0 : (1<<0)) |
           (PIND&(1<<1) ? 0 : (1<<1)) |
     e16:	82 2b       	or	r24, r18
     e18:	93 2b       	or	r25, r19
           (PIND&(1<<2) ? 0 : (1<<2)) |
           (PIND&(1<<3) ? 0 : (1<<3)) |
     e1a:	4b 99       	sbic	0x09, 3	; 9
     e1c:	03 c0       	rjmp	.+6      	; 0xe24 <matrix_scan+0x9a>
     e1e:	28 e0       	ldi	r18, 0x08	; 8
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <matrix_scan+0x9e>
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0

static matrix_row_t read_cols(void)
{
    return (PIND&(1<<0) ? 0 : (1<<0)) |
           (PIND&(1<<1) ? 0 : (1<<1)) |
           (PIND&(1<<2) ? 0 : (1<<2)) |
     e28:	82 2b       	or	r24, r18
     e2a:	93 2b       	or	r25, r19
           (PIND&(1<<3) ? 0 : (1<<3)) |
           (PIND&(1<<5) ? 0 : (1<<4)) |
     e2c:	4d 99       	sbic	0x09, 5	; 9
     e2e:	03 c0       	rjmp	.+6      	; 0xe36 <matrix_scan+0xac>
     e30:	e0 e1       	ldi	r30, 0x10	; 16
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <matrix_scan+0xb0>
     e36:	e0 e0       	ldi	r30, 0x00	; 0
     e38:	f0 e0       	ldi	r31, 0x00	; 0
static matrix_row_t read_cols(void)
{
    return (PIND&(1<<0) ? 0 : (1<<0)) |
           (PIND&(1<<1) ? 0 : (1<<1)) |
           (PIND&(1<<2) ? 0 : (1<<2)) |
           (PIND&(1<<3) ? 0 : (1<<3)) |
     e3a:	8e 2b       	or	r24, r30
     e3c:	9f 2b       	or	r25, r31
           (PIND&(1<<5) ? 0 : (1<<4)) |
           (PIND&(1<<4) ? 0 : (1<<5)) |
     e3e:	4c 99       	sbic	0x09, 4	; 9
     e40:	03 c0       	rjmp	.+6      	; 0xe48 <matrix_scan+0xbe>
     e42:	60 e2       	ldi	r22, 0x20	; 32
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <matrix_scan+0xc2>
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	70 e0       	ldi	r23, 0x00	; 0
{
    return (PIND&(1<<0) ? 0 : (1<<0)) |
           (PIND&(1<<1) ? 0 : (1<<1)) |
           (PIND&(1<<2) ? 0 : (1<<2)) |
           (PIND&(1<<3) ? 0 : (1<<3)) |
           (PIND&(1<<5) ? 0 : (1<<4)) |
     e4c:	86 2b       	or	r24, r22
     e4e:	97 2b       	or	r25, r23
           (PIND&(1<<4) ? 0 : (1<<5)) |
           (PIND&(1<<6) ? 0 : (1<<6)) |
     e50:	4e 99       	sbic	0x09, 6	; 9
     e52:	03 c0       	rjmp	.+6      	; 0xe5a <matrix_scan+0xd0>
     e54:	20 e4       	ldi	r18, 0x40	; 64
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <matrix_scan+0xd4>
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
    return (PIND&(1<<0) ? 0 : (1<<0)) |
           (PIND&(1<<1) ? 0 : (1<<1)) |
           (PIND&(1<<2) ? 0 : (1<<2)) |
           (PIND&(1<<3) ? 0 : (1<<3)) |
           (PIND&(1<<5) ? 0 : (1<<4)) |
           (PIND&(1<<4) ? 0 : (1<<5)) |
     e5e:	ac 01       	movw	r20, r24
     e60:	42 2b       	or	r20, r18
     e62:	53 2b       	or	r21, r19
           (PIND&(1<<6) ? 0 : (1<<6)) |
           (PIND&(1<<7) ? 0 : (1<<7)) |
     e64:	29 b1       	in	r18, 0x09	; 9
     e66:	33 27       	eor	r19, r19
     e68:	27 fd       	sbrc	r18, 7
     e6a:	30 95       	com	r19
     e6c:	20 95       	com	r18
     e6e:	30 95       	com	r19
     e70:	c9 01       	movw	r24, r18
     e72:	88 27       	eor	r24, r24
     e74:	99 0f       	add	r25, r25
     e76:	88 1f       	adc	r24, r24
     e78:	99 27       	eor	r25, r25
     e7a:	96 95       	lsr	r25
     e7c:	98 2f       	mov	r25, r24
     e7e:	88 27       	eor	r24, r24
     e80:	97 95       	ror	r25
     e82:	87 95       	ror	r24
           (PIND&(1<<1) ? 0 : (1<<1)) |
           (PIND&(1<<2) ? 0 : (1<<2)) |
           (PIND&(1<<3) ? 0 : (1<<3)) |
           (PIND&(1<<5) ? 0 : (1<<4)) |
           (PIND&(1<<4) ? 0 : (1<<5)) |
           (PIND&(1<<6) ? 0 : (1<<6)) |
     e84:	84 2b       	or	r24, r20
     e86:	95 2b       	or	r25, r21
           (PIND&(1<<7) ? 0 : (1<<7)) |
           (PINB&(1<<4) ? 0 : (1<<8)) |
     e88:	1c 99       	sbic	0x03, 4	; 3
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <matrix_scan+0x108>
     e8c:	e0 e0       	ldi	r30, 0x00	; 0
     e8e:	f1 e0       	ldi	r31, 0x01	; 1
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <matrix_scan+0x10c>
     e92:	e0 e0       	ldi	r30, 0x00	; 0
     e94:	f0 e0       	ldi	r31, 0x00	; 0
           (PIND&(1<<2) ? 0 : (1<<2)) |
           (PIND&(1<<3) ? 0 : (1<<3)) |
           (PIND&(1<<5) ? 0 : (1<<4)) |
           (PIND&(1<<4) ? 0 : (1<<5)) |
           (PIND&(1<<6) ? 0 : (1<<6)) |
           (PIND&(1<<7) ? 0 : (1<<7)) |
     e96:	8e 2b       	or	r24, r30
     e98:	9f 2b       	or	r25, r31
           (PINB&(1<<4) ? 0 : (1<<8)) |
           (PINB&(1<<5) ? 0 : (1<<9)) |
     e9a:	1d 99       	sbic	0x03, 5	; 3
     e9c:	03 c0       	rjmp	.+6      	; 0xea4 <matrix_scan+0x11a>
     e9e:	e0 e0       	ldi	r30, 0x00	; 0
     ea0:	f2 e0       	ldi	r31, 0x02	; 2
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <matrix_scan+0x11e>
     ea4:	e0 e0       	ldi	r30, 0x00	; 0
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
           (PIND&(1<<3) ? 0 : (1<<3)) |
           (PIND&(1<<5) ? 0 : (1<<4)) |
           (PIND&(1<<4) ? 0 : (1<<5)) |
           (PIND&(1<<6) ? 0 : (1<<6)) |
           (PIND&(1<<7) ? 0 : (1<<7)) |
           (PINB&(1<<4) ? 0 : (1<<8)) |
     ea8:	8e 2b       	or	r24, r30
     eaa:	9f 2b       	or	r25, r31
           (PINB&(1<<5) ? 0 : (1<<9)) |
           (PINB&(1<<6) ? 0 : (1<<10)) |
     eac:	1e 99       	sbic	0x03, 6	; 3
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <matrix_scan+0x12c>
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	74 e0       	ldi	r23, 0x04	; 4
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <matrix_scan+0x130>
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	70 e0       	ldi	r23, 0x00	; 0
           (PIND&(1<<5) ? 0 : (1<<4)) |
           (PIND&(1<<4) ? 0 : (1<<5)) |
           (PIND&(1<<6) ? 0 : (1<<6)) |
           (PIND&(1<<7) ? 0 : (1<<7)) |
           (PINB&(1<<4) ? 0 : (1<<8)) |
           (PINB&(1<<5) ? 0 : (1<<9)) |
     eba:	86 2b       	or	r24, r22
     ebc:	97 2b       	or	r25, r23
           (PINB&(1<<6) ? 0 : (1<<10)) |
           (PINC&(1<<6) ? 0 : (1<<11)) |
     ebe:	36 99       	sbic	0x06, 6	; 6
     ec0:	03 c0       	rjmp	.+6      	; 0xec8 <matrix_scan+0x13e>
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	38 e0       	ldi	r19, 0x08	; 8
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <matrix_scan+0x142>
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
           (PIND&(1<<4) ? 0 : (1<<5)) |
           (PIND&(1<<6) ? 0 : (1<<6)) |
           (PIND&(1<<7) ? 0 : (1<<7)) |
           (PINB&(1<<4) ? 0 : (1<<8)) |
           (PINB&(1<<5) ? 0 : (1<<9)) |
           (PINB&(1<<6) ? 0 : (1<<10)) |
     ecc:	ac 01       	movw	r20, r24
     ece:	42 2b       	or	r20, r18
     ed0:	53 2b       	or	r21, r19
           (PINC&(1<<6) ? 0 : (1<<11)) |
           (PINC&(1<<7) ? 0 : (1<<12)) |
     ed2:	26 b1       	in	r18, 0x06	; 6
     ed4:	33 27       	eor	r19, r19
     ed6:	27 fd       	sbrc	r18, 7
     ed8:	30 95       	com	r19
     eda:	20 95       	com	r18
     edc:	30 95       	com	r19
     ede:	c9 01       	movw	r24, r18
     ee0:	88 27       	eor	r24, r24
     ee2:	99 0f       	add	r25, r25
     ee4:	88 1f       	adc	r24, r24
     ee6:	99 27       	eor	r25, r25
     ee8:	98 2f       	mov	r25, r24
     eea:	88 27       	eor	r24, r24
     eec:	92 95       	swap	r25
     eee:	90 7f       	andi	r25, 0xF0	; 240
           (PIND&(1<<6) ? 0 : (1<<6)) |
           (PIND&(1<<7) ? 0 : (1<<7)) |
           (PINB&(1<<4) ? 0 : (1<<8)) |
           (PINB&(1<<5) ? 0 : (1<<9)) |
           (PINB&(1<<6) ? 0 : (1<<10)) |
           (PINC&(1<<6) ? 0 : (1<<11)) |
     ef0:	84 2b       	or	r24, r20
     ef2:	95 2b       	or	r25, r21
           (PINC&(1<<7) ? 0 : (1<<12)) |
           (PINE&(1<<6) ? 0 : (1<<13)) |
     ef4:	66 99       	sbic	0x0c, 6	; 12
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <matrix_scan+0x174>
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e2       	ldi	r19, 0x20	; 32
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <matrix_scan+0x178>
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
           (PIND&(1<<7) ? 0 : (1<<7)) |
           (PINB&(1<<4) ? 0 : (1<<8)) |
           (PINB&(1<<5) ? 0 : (1<<9)) |
           (PINB&(1<<6) ? 0 : (1<<10)) |
           (PINC&(1<<6) ? 0 : (1<<11)) |
           (PINC&(1<<7) ? 0 : (1<<12)) |
     f02:	82 2b       	or	r24, r18
     f04:	93 2b       	or	r25, r19
           (PINE&(1<<6) ? 0 : (1<<13)) |
           (PINF&(1<<1) ? 0 : (1<<14)) ;
     f06:	79 99       	sbic	0x0f, 1	; 15
     f08:	03 c0       	rjmp	.+6      	; 0xf10 <matrix_scan+0x186>
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e4       	ldi	r19, 0x40	; 64
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <matrix_scan+0x18a>
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
           (PINB&(1<<4) ? 0 : (1<<8)) |
           (PINB&(1<<5) ? 0 : (1<<9)) |
           (PINB&(1<<6) ? 0 : (1<<10)) |
           (PINC&(1<<6) ? 0 : (1<<11)) |
           (PINC&(1<<7) ? 0 : (1<<12)) |
           (PINE&(1<<6) ? 0 : (1<<13)) |
     f14:	82 2b       	or	r24, r18
     f16:	93 2b       	or	r25, r19
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
     f18:	28 81       	ld	r18, Y
     f1a:	39 81       	ldd	r19, Y+1	; 0x01
     f1c:	28 17       	cp	r18, r24
     f1e:	39 07       	cpc	r19, r25
     f20:	49 f1       	breq	.+82     	; 0xf74 <matrix_scan+0x1ea>
            matrix_debouncing[i] = cols;
     f22:	99 83       	std	Y+1, r25	; 0x01
     f24:	88 83       	st	Y, r24
            if (debouncing) {
     f26:	80 91 00 01 	lds	r24, 0x0100
     f2a:	88 23       	and	r24, r24
     f2c:	01 f1       	breq	.+64     	; 0xf6e <matrix_scan+0x1e4>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     f2e:	80 91 b1 01 	lds	r24, 0x01B1
     f32:	80 ff       	sbrs	r24, 0
     f34:	04 c0       	rjmp	.+8      	; 0xf3e <matrix_scan+0x1b4>
     f36:	88 ea       	ldi	r24, 0xA8	; 168
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
     f3e:	80 91 b1 01 	lds	r24, 0x01B1
     f42:	80 ff       	sbrs	r24, 0
     f44:	0c c0       	rjmp	.+24     	; 0xf5e <matrix_scan+0x1d4>
     f46:	80 91 00 01 	lds	r24, 0x0100
     f4a:	1f 92       	push	r1
     f4c:	8f 93       	push	r24
     f4e:	ff 92       	push	r15
     f50:	ef 92       	push	r14
     f52:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	80 91 b1 01 	lds	r24, 0x01B1
     f62:	80 ff       	sbrs	r24, 0
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <matrix_scan+0x1e4>
     f66:	81 ea       	ldi	r24, 0xA1	; 161
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            }
            debouncing = DEBOUNCE;
     f6e:	85 e0       	ldi	r24, 0x05	; 5
     f70:	80 93 00 01 	sts	0x0100, r24
        }
        unselect_rows();
     f74:	0e 94 9a 06 	call	0xd34	; 0xd34 <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     f78:	c3 94       	inc	r12
     f7a:	22 96       	adiw	r28, 0x02	; 2
     f7c:	95 e0       	ldi	r25, 0x05	; 5
     f7e:	c9 12       	cpse	r12, r25
     f80:	16 cf       	rjmp	.-468    	; 0xdae <matrix_scan+0x24>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
     f82:	80 91 00 01 	lds	r24, 0x0100
     f86:	88 23       	and	r24, r24
     f88:	c1 f0       	breq	.+48     	; 0xfba <matrix_scan+0x230>
        if (--debouncing) {
     f8a:	81 50       	subi	r24, 0x01	; 1
     f8c:	80 93 00 01 	sts	0x0100, r24
     f90:	88 23       	and	r24, r24
     f92:	39 f0       	breq	.+14     	; 0xfa2 <matrix_scan+0x218>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f94:	af e9       	ldi	r26, 0x9F	; 159
     f96:	bf e0       	ldi	r27, 0x0F	; 15
     f98:	11 97       	sbiw	r26, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <matrix_scan+0x20e>
     f9c:	00 c0       	rjmp	.+0      	; 0xf9e <matrix_scan+0x214>
     f9e:	00 00       	nop
     fa0:	0c c0       	rjmp	.+24     	; 0xfba <matrix_scan+0x230>
     fa2:	ee e3       	ldi	r30, 0x3E	; 62
     fa4:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
     fa6:	d8 01       	movw	r26, r16
     fa8:	8d 91       	ld	r24, X+
     faa:	9d 91       	ld	r25, X+
     fac:	8d 01       	movw	r16, r26
     fae:	81 93       	st	Z+, r24
     fb0:	91 93       	st	Z+, r25

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     fb2:	b1 e0       	ldi	r27, 0x01	; 1
     fb4:	0e 33       	cpi	r16, 0x3E	; 62
     fb6:	1b 07       	cpc	r17, r27
     fb8:	b1 f7       	brne	.-20     	; 0xfa6 <matrix_scan+0x21c>
            }
        }
    }

    return 1;
}
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	df 90       	pop	r13
     fca:	cf 90       	pop	r12
     fcc:	08 95       	ret

00000fce <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     fce:	e8 2f       	mov	r30, r24
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	ee 0f       	add	r30, r30
     fd4:	ff 1f       	adc	r31, r31
     fd6:	e2 5c       	subi	r30, 0xC2	; 194
     fd8:	fe 4f       	sbci	r31, 0xFE	; 254
}
     fda:	80 81       	ld	r24, Z
     fdc:	91 81       	ldd	r25, Z+1	; 0x01
     fde:	08 95       	ret

00000fe0 <matrix_print>:

void matrix_print(void)
{
     fe0:	cf 92       	push	r12
     fe2:	df 92       	push	r13
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
     ff0:	8a e8       	ldi	r24, 0x8A	; 138
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
     ff8:	8e e3       	ldi	r24, 0x3E	; 62
     ffa:	e8 2e       	mov	r14, r24
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	f8 2e       	mov	r15, r24
    1000:	c0 e0       	ldi	r28, 0x00	; 0
    1002:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1004:	95 e8       	ldi	r25, 0x85	; 133
    1006:	c9 2e       	mov	r12, r25
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	d9 2e       	mov	r13, r25
        pbin_reverse16(matrix_get_row(row));
    100c:	0c e7       	ldi	r16, 0x7C	; 124
    100e:	11 e0       	ldi	r17, 0x01	; 1

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	df 92       	push	r13
    1016:	cf 92       	push	r12
    1018:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    101c:	82 e8       	ldi	r24, 0x82	; 130
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
        pbin_reverse16(matrix_get_row(row));
    1024:	f7 01       	movw	r30, r14
    1026:	81 91       	ld	r24, Z+
    1028:	91 91       	ld	r25, Z+
    102a:	7f 01       	movw	r14, r30
    102c:	0e 94 bb 1b 	call	0x3776	; 0x3776 <bitrev16>
    1030:	9f 93       	push	r25
    1032:	8f 93       	push	r24
    1034:	1f 93       	push	r17
    1036:	0f 93       	push	r16
    1038:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
        print("\n");
    103c:	8a e7       	ldi	r24, 0x7A	; 122
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    1044:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    1046:	8d b7       	in	r24, 0x3d	; 61
    1048:	9e b7       	in	r25, 0x3e	; 62
    104a:	08 96       	adiw	r24, 0x08	; 8
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	9e bf       	out	0x3e, r25	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	8d bf       	out	0x3d, r24	; 61
    1056:	c5 30       	cpi	r28, 0x05	; 5
    1058:	d1 05       	cpc	r29, r1
    105a:	d1 f6       	brne	.-76     	; 0x1010 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	df 90       	pop	r13
    106a:	cf 90       	pop	r12
    106c:	08 95       	ret

0000106e <led_set>:
#include "stdint.h"
#include "led.h"


void led_set(uint8_t usb_led)
{
    106e:	08 95       	ret

00001070 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    1070:	80 91 53 01 	lds	r24, 0x0153
    1074:	08 95       	ret

00001076 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    1076:	9f b7       	in	r25, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	10 92 4a 01 	sts	0x014A, r1
    107e:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1080:	90 91 c6 01 	lds	r25, 0x01C6
    1084:	94 30       	cpi	r25, 0x04	; 4
    1086:	09 f0       	breq	.+2      	; 0x108a <sendchar+0x14>
    1088:	57 c0       	rjmp	.+174    	; 0x1138 <sendchar+0xc2>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    108a:	90 91 e9 00 	lds	r25, 0x00E9
    108e:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1090:	30 91 ec 00 	lds	r19, 0x00EC
    1094:	23 2f       	mov	r18, r19
    1096:	21 70       	andi	r18, 0x01	; 1
    1098:	30 fd       	sbrc	r19, 0
    109a:	20 e8       	ldi	r18, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    109c:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    109e:	24 e0       	ldi	r18, 0x04	; 4
    10a0:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    10a4:	20 91 eb 00 	lds	r18, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    10a8:	20 ff       	sbrs	r18, 0
    10aa:	43 c0       	rjmp	.+134    	; 0x1132 <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    10ac:	20 91 ee 00 	lds	r18, 0x00EE
    10b0:	27 ff       	sbrs	r18, 7
    10b2:	3f c0       	rjmp	.+126    	; 0x1132 <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    10b4:	20 91 48 01 	lds	r18, 0x0148
    10b8:	22 23       	and	r18, r18
    10ba:	21 f0       	breq	.+8      	; 0x10c4 <sendchar+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    10bc:	20 91 e8 00 	lds	r18, 0x00E8
    10c0:	25 ff       	sbrs	r18, 5
    10c2:	37 c0       	rjmp	.+110    	; 0x1132 <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    timeouted = false;
    10c4:	10 92 48 01 	sts	0x0148, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    10c8:	26 e0       	ldi	r18, 0x06	; 6
    10ca:	30 91 e8 00 	lds	r19, 0x00E8
    10ce:	35 fd       	sbrc	r19, 5
    10d0:	15 c0       	rjmp	.+42     	; 0x10fc <sendchar+0x86>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    10d2:	30 91 c6 01 	lds	r19, 0x01C6
    10d6:	34 30       	cpi	r19, 0x04	; 4
    10d8:	61 f5       	brne	.+88     	; 0x1132 <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    10da:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    10de:	35 fd       	sbrc	r19, 5
    10e0:	28 c0       	rjmp	.+80     	; 0x1132 <sendchar+0xbc>
    10e2:	21 50       	subi	r18, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    10e4:	21 f4       	brne	.+8      	; 0x10ee <sendchar+0x78>
            timeouted = true;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	80 93 48 01 	sts	0x0148, r24
            goto ERROR_EXIT;
    10ec:	22 c0       	rjmp	.+68     	; 0x1132 <sendchar+0xbc>
    10ee:	ef e9       	ldi	r30, 0x9F	; 159
    10f0:	ff e0       	ldi	r31, 0x0F	; 15
    10f2:	31 97       	sbiw	r30, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <sendchar+0x7c>
    10f6:	00 c0       	rjmp	.+0      	; 0x10f8 <sendchar+0x82>
    10f8:	00 00       	nop
    10fa:	e7 cf       	rjmp	.-50     	; 0x10ca <sendchar+0x54>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10fc:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1100:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    1104:	85 fd       	sbrc	r24, 5
    1106:	0a c0       	rjmp	.+20     	; 0x111c <sendchar+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1108:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    110c:	80 ff       	sbrs	r24, 0
    110e:	fc cf       	rjmp	.-8      	; 0x1108 <sendchar+0x92>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1110:	80 91 e8 00 	lds	r24, 0x00E8
    1114:	8e 77       	andi	r24, 0x7E	; 126
    1116:	80 93 e8 00 	sts	0x00E8, r24
    111a:	06 c0       	rjmp	.+12     	; 0x1128 <sendchar+0xb2>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    111c:	8f b7       	in	r24, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	21 e0       	ldi	r18, 0x01	; 1
    1122:	20 93 4a 01 	sts	0x014A, r18
    1126:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1128:	9f 70       	andi	r25, 0x0F	; 15
    112a:	90 93 e9 00 	sts	0x00E9, r25
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	08 95       	ret
    1132:	9f 70       	andi	r25, 0x0F	; 15
    1134:	90 93 e9 00 	sts	0x00E9, r25
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    1138:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    113a:	08 95       	ret

0000113c <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	00 d0       	rcall	.+0      	; 0x1142 <send_consumer+0x6>
    1142:	1f 92       	push	r1
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	9c 01       	movw	r18, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    114a:	80 91 c6 01 	lds	r24, 0x01C6
    114e:	84 30       	cpi	r24, 0x04	; 4
    1150:	19 f5       	brne	.+70     	; 0x1198 <send_consumer+0x5c>
        return;

    report_extra_t r = {
    1152:	93 e0       	ldi	r25, 0x03	; 3
    1154:	99 83       	std	Y+1, r25	; 0x01
    1156:	3b 83       	std	Y+3, r19	; 0x03
    1158:	2a 83       	std	Y+2, r18	; 0x02
    115a:	90 93 e9 00 	sts	0x00E9, r25
    115e:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1160:	90 91 e8 00 	lds	r25, 0x00E8
    1164:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1166:	95 fd       	sbrc	r25, 5
    1168:	06 c0       	rjmp	.+12     	; 0x1176 <send_consumer+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    116a:	95 ed       	ldi	r25, 0xD5	; 213
    116c:	9a 95       	dec	r25
    116e:	f1 f7       	brne	.-4      	; 0x116c <send_consumer+0x30>
    1170:	00 00       	nop
    1172:	81 11       	cpse	r24, r1
    1174:	f5 cf       	rjmp	.-22     	; 0x1160 <send_consumer+0x24>
    1176:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    117a:	85 ff       	sbrs	r24, 5
    117c:	0d c0       	rjmp	.+26     	; 0x1198 <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	63 e0       	ldi	r22, 0x03	; 3
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	ce 01       	movw	r24, r28
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	0e 94 41 0b 	call	0x1682	; 0x1682 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    118e:	80 91 e8 00 	lds	r24, 0x00E8
    1192:	8e 77       	andi	r24, 0x7E	; 126
    1194:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	08 95       	ret

000011a4 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <send_system+0x6>
    11aa:	1f 92       	push	r1
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    11b0:	20 91 c6 01 	lds	r18, 0x01C6
    11b4:	24 30       	cpi	r18, 0x04	; 4
    11b6:	21 f5       	brne	.+72     	; 0x1200 <send_system+0x5c>
        return;

    report_extra_t r = {
    11b8:	22 e0       	ldi	r18, 0x02	; 2
    11ba:	29 83       	std	Y+1, r18	; 0x01
    11bc:	9b 83       	std	Y+3, r25	; 0x03
    11be:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11c0:	83 e0       	ldi	r24, 0x03	; 3
    11c2:	80 93 e9 00 	sts	0x00E9, r24
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11c8:	90 91 e8 00 	lds	r25, 0x00E8
    11cc:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    11ce:	95 fd       	sbrc	r25, 5
    11d0:	06 c0       	rjmp	.+12     	; 0x11de <send_system+0x3a>
    11d2:	95 ed       	ldi	r25, 0xD5	; 213
    11d4:	9a 95       	dec	r25
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <send_system+0x30>
    11d8:	00 00       	nop
    11da:	81 11       	cpse	r24, r1
    11dc:	f5 cf       	rjmp	.-22     	; 0x11c8 <send_system+0x24>
    11de:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    11e2:	85 ff       	sbrs	r24, 5
    11e4:	0d c0       	rjmp	.+26     	; 0x1200 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    11e6:	40 e0       	ldi	r20, 0x00	; 0
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	63 e0       	ldi	r22, 0x03	; 3
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	ce 01       	movw	r24, r28
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	0e 94 41 0b 	call	0x1682	; 0x1682 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11f6:	80 91 e8 00 	lds	r24, 0x00E8
    11fa:	8e 77       	andi	r24, 0x7E	; 126
    11fc:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret

0000120c <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    120c:	20 91 c6 01 	lds	r18, 0x01C6
    1210:	24 30       	cpi	r18, 0x04	; 4
    1212:	f1 f4       	brne	.+60     	; 0x1250 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1214:	22 e0       	ldi	r18, 0x02	; 2
    1216:	20 93 e9 00 	sts	0x00E9, r18
    121a:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    121c:	30 91 e8 00 	lds	r19, 0x00E8
    1220:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1222:	35 fd       	sbrc	r19, 5
    1224:	06 c0       	rjmp	.+12     	; 0x1232 <send_mouse+0x26>
    1226:	35 ed       	ldi	r19, 0xD5	; 213
    1228:	3a 95       	dec	r19
    122a:	f1 f7       	brne	.-4      	; 0x1228 <send_mouse+0x1c>
    122c:	00 00       	nop
    122e:	21 11       	cpse	r18, r1
    1230:	f5 cf       	rjmp	.-22     	; 0x121c <send_mouse+0x10>
    1232:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1236:	25 ff       	sbrs	r18, 5
    1238:	0b c0       	rjmp	.+22     	; 0x1250 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	65 e0       	ldi	r22, 0x05	; 5
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	0e 94 41 0b 	call	0x1682	; 0x1682 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1246:	80 91 e8 00 	lds	r24, 0x00E8
    124a:	8e 77       	andi	r24, 0x7E	; 126
    124c:	80 93 e8 00 	sts	0x00E8, r24
    1250:	08 95       	ret

00001252 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1256:	20 91 c6 01 	lds	r18, 0x01C6
    125a:	24 30       	cpi	r18, 0x04	; 4
    125c:	39 f5       	brne	.+78     	; 0x12ac <send_keyboard+0x5a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    125e:	21 e0       	ldi	r18, 0x01	; 1
    1260:	20 93 e9 00 	sts	0x00E9, r18
    1264:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1266:	30 91 e8 00 	lds	r19, 0x00E8
    126a:	21 50       	subi	r18, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    126c:	35 fd       	sbrc	r19, 5
    126e:	06 c0       	rjmp	.+12     	; 0x127c <send_keyboard+0x2a>
    1270:	35 ed       	ldi	r19, 0xD5	; 213
    1272:	3a 95       	dec	r19
    1274:	f1 f7       	brne	.-4      	; 0x1272 <send_keyboard+0x20>
    1276:	00 00       	nop
    1278:	21 11       	cpse	r18, r1
    127a:	f5 cf       	rjmp	.-22     	; 0x1266 <send_keyboard+0x14>
    127c:	20 91 e8 00 	lds	r18, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1280:	25 ff       	sbrs	r18, 5
    1282:	14 c0       	rjmp	.+40     	; 0x12ac <send_keyboard+0x5a>
    1284:	ec 01       	movw	r28, r24

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1286:	40 e0       	ldi	r20, 0x00	; 0
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	68 e0       	ldi	r22, 0x08	; 8
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	0e 94 41 0b 	call	0x1682	; 0x1682 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1292:	80 91 e8 00 	lds	r24, 0x00E8
    1296:	8e 77       	andi	r24, 0x7E	; 126
    1298:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    129c:	88 e0       	ldi	r24, 0x08	; 8
    129e:	fe 01       	movw	r30, r28
    12a0:	ab e4       	ldi	r26, 0x4B	; 75
    12a2:	b1 e0       	ldi	r27, 0x01	; 1
    12a4:	01 90       	ld	r0, Z+
    12a6:	0d 92       	st	X+, r0
    12a8:	8a 95       	dec	r24
    12aa:	e1 f7       	brne	.-8      	; 0x12a4 <send_keyboard+0x52>
}
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	08 95       	ret

000012b2 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    12b2:	88 ee       	ldi	r24, 0xE8	; 232
    12b4:	91 e0       	ldi	r25, 0x01	; 1
    12b6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    12ba:	80 91 c5 01 	lds	r24, 0x01C5
    12be:	81 11       	cpse	r24, r1
    12c0:	09 c0       	rjmp	.+18     	; 0x12d4 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    12c2:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <USB_Disable>
        USB_Init();
    12c6:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    12ca:	80 91 e2 00 	lds	r24, 0x00E2
    12ce:	84 60       	ori	r24, 0x04	; 4
    12d0:	80 93 e2 00 	sts	0x00E2, r24
    12d4:	08 95       	ret

000012d6 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    12d6:	84 ee       	ldi	r24, 0xE4	; 228
    12d8:	91 e0       	ldi	r25, 0x01	; 1
    12da:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    12de:	10 92 c5 01 	sts	0x01C5, r1
    12e2:	08 95       	ret

000012e4 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    12e4:	80 ee       	ldi	r24, 0xE0	; 224
    12e6:	91 e0       	ldi	r25, 0x01	; 1
    12e8:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <xputs>

000012ec <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    12ec:	8c ed       	ldi	r24, 0xDC	; 220
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <xputs>

000012f4 <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    12f4:	88 ed       	ldi	r24, 0xD8	; 216
    12f6:	91 e0       	ldi	r25, 0x01	; 1
    12f8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    suspend_wakeup_init();
    12fc:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <suspend_wakeup_init>

00001300 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    1300:	20 91 49 01 	lds	r18, 0x0149
    1304:	2f 5f       	subi	r18, 0xFF	; 255
    1306:	82 2f       	mov	r24, r18
    1308:	62 e3       	ldi	r22, 0x32	; 50
    130a:	0e 94 52 28 	call	0x50a4	; 0x50a4 <__udivmodqi4>
    130e:	99 23       	and	r25, r25
    1310:	19 f0       	breq	.+6      	; 0x1318 <EVENT_USB_Device_StartOfFrame+0x18>
    1312:	20 93 49 01 	sts	0x0149, r18
    1316:	08 95       	ret
    count = 0;
    1318:	10 92 49 01 	sts	0x0149, r1

    if (!console_flush) return;
    131c:	80 91 4a 01 	lds	r24, 0x014A
    1320:	88 23       	and	r24, r24
    1322:	71 f1       	breq	.+92     	; 0x1380 <EVENT_USB_Device_StartOfFrame+0x80>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1324:	80 91 c6 01 	lds	r24, 0x01C6
    1328:	84 30       	cpi	r24, 0x04	; 4
    132a:	41 f5       	brne	.+80     	; 0x137c <EVENT_USB_Device_StartOfFrame+0x7c>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    132c:	80 91 e9 00 	lds	r24, 0x00E9
    1330:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1332:	20 91 ec 00 	lds	r18, 0x00EC
    1336:	92 2f       	mov	r25, r18
    1338:	91 70       	andi	r25, 0x01	; 1
    133a:	20 fd       	sbrc	r18, 0
    133c:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    133e:	89 2b       	or	r24, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1340:	94 e0       	ldi	r25, 0x04	; 4
    1342:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1346:	90 91 eb 00 	lds	r25, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    134a:	90 ff       	sbrs	r25, 0
    134c:	14 c0       	rjmp	.+40     	; 0x1376 <EVENT_USB_Device_StartOfFrame+0x76>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    134e:	90 91 ee 00 	lds	r25, 0x00EE
    1352:	97 ff       	sbrs	r25, 7
    1354:	10 c0       	rjmp	.+32     	; 0x1376 <EVENT_USB_Device_StartOfFrame+0x76>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1356:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    135a:	95 ff       	sbrs	r25, 5
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <EVENT_USB_Device_StartOfFrame+0x64>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    135e:	10 92 f1 00 	sts	0x00F1, r1
    1362:	f9 cf       	rjmp	.-14     	; 0x1356 <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1364:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1368:	90 ff       	sbrs	r25, 0
    136a:	05 c0       	rjmp	.+10     	; 0x1376 <EVENT_USB_Device_StartOfFrame+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    136c:	90 91 e8 00 	lds	r25, 0x00E8
    1370:	9e 77       	andi	r25, 0x7E	; 126
    1372:	90 93 e8 00 	sts	0x00E8, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1376:	8f 70       	andi	r24, 0x0F	; 15
    1378:	80 93 e9 00 	sts	0x00E9, r24
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    137c:	10 92 4a 01 	sts	0x014A, r1
    1380:	08 95       	ret

00001382 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1382:	42 e0       	ldi	r20, 0x02	; 2
    1384:	61 ec       	ldi	r22, 0xC1	; 193
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Endpoint_ConfigureEndpoint_Prv>
    138c:	42 e0       	ldi	r20, 0x02	; 2
    138e:	61 ec       	ldi	r22, 0xC1	; 193
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Endpoint_ConfigureEndpoint_Prv>
    1396:	42 e0       	ldi	r20, 0x02	; 2
    1398:	61 ec       	ldi	r22, 0xC1	; 193
    139a:	83 e0       	ldi	r24, 0x03	; 3
    139c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Endpoint_ConfigureEndpoint_Prv>
    13a0:	42 e2       	ldi	r20, 0x22	; 34
    13a2:	61 ec       	ldi	r22, 0xC1	; 193
    13a4:	84 e0       	ldi	r24, 0x04	; 4
    13a6:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <Endpoint_ConfigureEndpoint_Prv>

000013aa <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    13aa:	80 91 c8 01 	lds	r24, 0x01C8
    13ae:	83 30       	cpi	r24, 0x03	; 3
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <EVENT_USB_Device_ControlRequest+0xa>
    13b2:	53 c0       	rjmp	.+166    	; 0x145a <EVENT_USB_Device_ControlRequest+0xb0>
    13b4:	30 f4       	brcc	.+12     	; 0x13c2 <EVENT_USB_Device_ControlRequest+0x18>
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	71 f0       	breq	.+28     	; 0x13d6 <EVENT_USB_Device_ControlRequest+0x2c>
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <EVENT_USB_Device_ControlRequest+0x16>
    13be:	8c c0       	rjmp	.+280    	; 0x14d8 <EVENT_USB_Device_ControlRequest+0x12e>
    13c0:	08 95       	ret
    13c2:	8a 30       	cpi	r24, 0x0A	; 10
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <EVENT_USB_Device_ControlRequest+0x1e>
    13c6:	78 c0       	rjmp	.+240    	; 0x14b8 <EVENT_USB_Device_ControlRequest+0x10e>
    13c8:	8b 30       	cpi	r24, 0x0B	; 11
    13ca:	09 f4       	brne	.+2      	; 0x13ce <EVENT_USB_Device_ControlRequest+0x24>
    13cc:	5e c0       	rjmp	.+188    	; 0x148a <EVENT_USB_Device_ControlRequest+0xe0>
    13ce:	89 30       	cpi	r24, 0x09	; 9
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <EVENT_USB_Device_ControlRequest+0x2a>
    13d2:	9a c0       	rjmp	.+308    	; 0x1508 <EVENT_USB_Device_ControlRequest+0x15e>
    13d4:	20 c0       	rjmp	.+64     	; 0x1416 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    13d6:	80 91 c7 01 	lds	r24, 0x01C7
    13da:	81 3a       	cpi	r24, 0xA1	; 161
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <EVENT_USB_Device_ControlRequest+0x36>
    13de:	94 c0       	rjmp	.+296    	; 0x1508 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13e0:	80 91 e8 00 	lds	r24, 0x00E8
    13e4:	87 7f       	andi	r24, 0xF7	; 247
    13e6:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    13ea:	80 91 cb 01 	lds	r24, 0x01CB
    13ee:	90 91 cc 01 	lds	r25, 0x01CC
    13f2:	89 2b       	or	r24, r25
    13f4:	21 f4       	brne	.+8      	; 0x13fe <EVENT_USB_Device_ControlRequest+0x54>
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    13f6:	68 e0       	ldi	r22, 0x08	; 8

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    13f8:	8b e4       	ldi	r24, 0x4B	; 75
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	03 c0       	rjmp	.+6      	; 0x1404 <EVENT_USB_Device_ControlRequest+0x5a>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    13fe:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	0e 94 8c 0b 	call	0x1718	; 0x1718 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    140a:	80 91 e8 00 	lds	r24, 0x00E8
    140e:	8b 77       	andi	r24, 0x7B	; 123
    1410:	80 93 e8 00 	sts	0x00E8, r24
    1414:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1416:	80 91 c7 01 	lds	r24, 0x01C7
    141a:	81 32       	cpi	r24, 0x21	; 33
    141c:	09 f0       	breq	.+2      	; 0x1420 <EVENT_USB_Device_ControlRequest+0x76>
    141e:	74 c0       	rjmp	.+232    	; 0x1508 <EVENT_USB_Device_ControlRequest+0x15e>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1420:	80 91 cb 01 	lds	r24, 0x01CB
    1424:	90 91 cc 01 	lds	r25, 0x01CC
    1428:	89 2b       	or	r24, r25
    142a:	09 f0       	breq	.+2      	; 0x142e <EVENT_USB_Device_ControlRequest+0x84>
    142c:	6d c0       	rjmp	.+218    	; 0x1508 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    142e:	80 91 e8 00 	lds	r24, 0x00E8
    1432:	87 7f       	andi	r24, 0xF7	; 247
    1434:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1438:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    143c:	82 fd       	sbrc	r24, 2
    143e:	05 c0       	rjmp	.+10     	; 0x144a <EVENT_USB_Device_ControlRequest+0xa0>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1440:	80 91 c6 01 	lds	r24, 0x01C6
    1444:	81 11       	cpse	r24, r1
    1446:	f8 cf       	rjmp	.-16     	; 0x1438 <EVENT_USB_Device_ControlRequest+0x8e>
    1448:	5f c0       	rjmp	.+190    	; 0x1508 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    144a:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    144e:	80 93 53 01 	sts	0x0153, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1452:	80 91 e8 00 	lds	r24, 0x00E8
    1456:	8b 77       	andi	r24, 0x7B	; 123
    1458:	53 c0       	rjmp	.+166    	; 0x1500 <EVENT_USB_Device_ControlRequest+0x156>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    145a:	80 91 c7 01 	lds	r24, 0x01C7
    145e:	81 3a       	cpi	r24, 0xA1	; 161
    1460:	09 f0       	breq	.+2      	; 0x1464 <EVENT_USB_Device_ControlRequest+0xba>
    1462:	52 c0       	rjmp	.+164    	; 0x1508 <EVENT_USB_Device_ControlRequest+0x15e>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1464:	80 91 cb 01 	lds	r24, 0x01CB
    1468:	90 91 cc 01 	lds	r25, 0x01CC
    146c:	89 2b       	or	r24, r25
    146e:	09 f0       	breq	.+2      	; 0x1472 <EVENT_USB_Device_ControlRequest+0xc8>
    1470:	4b c0       	rjmp	.+150    	; 0x1508 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1472:	80 91 e8 00 	lds	r24, 0x00E8
    1476:	87 7f       	andi	r24, 0xF7	; 247
    1478:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    147c:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1480:	80 ff       	sbrs	r24, 0
    1482:	fc cf       	rjmp	.-8      	; 0x147c <EVENT_USB_Device_ControlRequest+0xd2>
                    Endpoint_Write_8(keyboard_protocol);
    1484:	80 91 0b 01 	lds	r24, 0x010B
    1488:	36 c0       	rjmp	.+108    	; 0x14f6 <EVENT_USB_Device_ControlRequest+0x14c>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    148a:	80 91 c7 01 	lds	r24, 0x01C7
    148e:	81 32       	cpi	r24, 0x21	; 33
    1490:	d9 f5       	brne	.+118    	; 0x1508 <EVENT_USB_Device_ControlRequest+0x15e>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1492:	80 91 cb 01 	lds	r24, 0x01CB
    1496:	90 91 cc 01 	lds	r25, 0x01CC
    149a:	89 2b       	or	r24, r25
    149c:	a9 f5       	brne	.+106    	; 0x1508 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    149e:	80 91 e8 00 	lds	r24, 0x00E8
    14a2:	87 7f       	andi	r24, 0xF7	; 247
    14a4:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    14a8:	0e 94 85 0c 	call	0x190a	; 0x190a <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    14ac:	80 91 c9 01 	lds	r24, 0x01C9
    14b0:	80 93 0b 01 	sts	0x010B, r24
                    clear_keyboard();
    14b4:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    14b8:	80 91 c7 01 	lds	r24, 0x01C7
    14bc:	81 32       	cpi	r24, 0x21	; 33
    14be:	21 f5       	brne	.+72     	; 0x1508 <EVENT_USB_Device_ControlRequest+0x15e>
    14c0:	80 91 e8 00 	lds	r24, 0x00E8
    14c4:	87 7f       	andi	r24, 0xF7	; 247
    14c6:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    14ca:	0e 94 85 0c 	call	0x190a	; 0x190a <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    14ce:	80 91 ca 01 	lds	r24, 0x01CA
    14d2:	80 93 54 01 	sts	0x0154, r24
    14d6:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    14d8:	80 91 c7 01 	lds	r24, 0x01C7
    14dc:	81 3a       	cpi	r24, 0xA1	; 161
    14de:	a1 f4       	brne	.+40     	; 0x1508 <EVENT_USB_Device_ControlRequest+0x15e>
    14e0:	80 91 e8 00 	lds	r24, 0x00E8
    14e4:	87 7f       	andi	r24, 0xF7	; 247
    14e6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    14ea:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    14ee:	80 ff       	sbrs	r24, 0
    14f0:	fc cf       	rjmp	.-8      	; 0x14ea <EVENT_USB_Device_ControlRequest+0x140>
                Endpoint_Write_8(keyboard_idle);
    14f2:	80 91 54 01 	lds	r24, 0x0154
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14f6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14fa:	80 91 e8 00 	lds	r24, 0x00E8
    14fe:	8e 77       	andi	r24, 0x7E	; 126
    1500:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1504:	0c 94 85 0c 	jmp	0x190a	; 0x190a <Endpoint_ClearStatusStage>
    1508:	08 95       	ret

0000150a <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    150a:	84 b7       	in	r24, 0x34	; 52
    150c:	87 7f       	andi	r24, 0xF7	; 247
    150e:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    1510:	88 e1       	ldi	r24, 0x18	; 24
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	80 93 60 00 	sts	0x0060, r24
    151a:	10 92 60 00 	sts	0x0060, r1
    151e:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	80 e8       	ldi	r24, 0x80	; 128
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	80 93 61 00 	sts	0x0061, r24
    152c:	90 93 61 00 	sts	0x0061, r25
    1530:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    keyboard_setup();
    1532:	0e 94 4a 10 	call	0x2094	; 0x2094 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1536:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <USB_Disable>

    USB_Init();
    153a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <USB_Init>
    153e:	80 91 e2 00 	lds	r24, 0x00E2
    1542:	84 60       	ori	r24, 0x04	; 4
    1544:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    1548:	8b e3       	ldi	r24, 0x3B	; 59
    154a:	98 e0       	ldi	r25, 0x08	; 8
    154c:	0e 94 a0 1b 	call	0x3740	; 0x3740 <print_set_sendchar>
int main(void)
{
    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
    1550:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1552:	80 91 c6 01 	lds	r24, 0x01C6
    1556:	84 30       	cpi	r24, 0x04	; 4
    1558:	e1 f7       	brne	.-8      	; 0x1552 <main+0x48>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    155a:	87 ec       	ldi	r24, 0xC7	; 199
    155c:	91 e0       	ldi	r25, 0x01	; 1
    155e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>

    /* init modules */
    keyboard_init();
    1562:	0e 94 4c 10 	call	0x2098	; 0x2098 <keyboard_init>
    host_set_driver(&lufa_driver);
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    156e:	86 eb       	ldi	r24, 0xB6	; 182
    1570:	91 e0       	ldi	r25, 0x01	; 1
    1572:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1576:	80 91 c6 01 	lds	r24, 0x01C6
    157a:	85 30       	cpi	r24, 0x05	; 5
    157c:	89 f4       	brne	.+34     	; 0x15a0 <main+0x96>
            print("[s]");
    157e:	82 eb       	ldi	r24, 0xB2	; 178
    1580:	91 e0       	ldi	r25, 0x01	; 1
    1582:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            suspend_power_down();
    1586:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    158a:	80 91 c4 01 	lds	r24, 0x01C4
    158e:	88 23       	and	r24, r24
    1590:	91 f3       	breq	.-28     	; 0x1576 <main+0x6c>
    1592:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <suspend_wakeup_condition>
    1596:	88 23       	and	r24, r24
    1598:	71 f3       	breq	.-36     	; 0x1576 <main+0x6c>
                    USB_Device_SendRemoteWakeup();
    159a:	0e 94 2b 0b 	call	0x1656	; 0x1656 <USB_Device_SendRemoteWakeup>
    159e:	eb cf       	rjmp	.-42     	; 0x1576 <main+0x6c>
            }
        }

        keyboard_task();
    15a0:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    15a4:	e8 cf       	rjmp	.-48     	; 0x1576 <main+0x6c>

000015a6 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    15a6:	29 2f       	mov	r18, r25
    15a8:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    15aa:	23 30       	cpi	r18, 0x03	; 3
    15ac:	31 05       	cpc	r19, r1
    15ae:	c9 f0       	breq	.+50     	; 0x15e2 <CALLBACK_USB_GetDescriptor+0x3c>
    15b0:	64 f4       	brge	.+24     	; 0x15ca <CALLBACK_USB_GetDescriptor+0x24>
    15b2:	21 30       	cpi	r18, 0x01	; 1
    15b4:	31 05       	cpc	r19, r1
    15b6:	81 f0       	breq	.+32     	; 0x15d8 <CALLBACK_USB_GetDescriptor+0x32>
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	31 05       	cpc	r19, r1
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <CALLBACK_USB_GetDescriptor+0x1a>
    15be:	43 c0       	rjmp	.+134    	; 0x1646 <CALLBACK_USB_GetDescriptor+0xa0>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    15c0:	84 e7       	ldi	r24, 0x74	; 116
    15c2:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    15c4:	28 e0       	ldi	r18, 0x08	; 8
    15c6:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    15c8:	42 c0       	rjmp	.+132    	; 0x164e <CALLBACK_USB_GetDescriptor+0xa8>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    15ca:	21 32       	cpi	r18, 0x21	; 33
    15cc:	31 05       	cpc	r19, r1
    15ce:	f1 f0       	breq	.+60     	; 0x160c <CALLBACK_USB_GetDescriptor+0x66>
    15d0:	22 32       	cpi	r18, 0x22	; 34
    15d2:	31 05       	cpc	r19, r1
    15d4:	41 f1       	breq	.+80     	; 0x1626 <CALLBACK_USB_GetDescriptor+0x80>
    15d6:	37 c0       	rjmp	.+110    	; 0x1646 <CALLBACK_USB_GetDescriptor+0xa0>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    15d8:	82 e1       	ldi	r24, 0x12	; 18
    15da:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    15dc:	2c e7       	ldi	r18, 0x7C	; 124
    15de:	32 e0       	ldi	r19, 0x02	; 2
    15e0:	36 c0       	rjmp	.+108    	; 0x164e <CALLBACK_USB_GetDescriptor+0xa8>
    15e2:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	91 05       	cpc	r25, r1
    15e8:	41 f0       	breq	.+16     	; 0x15fa <CALLBACK_USB_GetDescriptor+0x54>
    15ea:	82 30       	cpi	r24, 0x02	; 2
    15ec:	91 05       	cpc	r25, r1
    15ee:	41 f0       	breq	.+16     	; 0x1600 <CALLBACK_USB_GetDescriptor+0x5a>
    15f0:	89 2b       	or	r24, r25
    15f2:	49 f5       	brne	.+82     	; 0x1646 <CALLBACK_USB_GetDescriptor+0xa0>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    15f4:	e4 e0       	ldi	r30, 0x04	; 4
    15f6:	f2 e0       	ldi	r31, 0x02	; 2
    15f8:	05 c0       	rjmp	.+10     	; 0x1604 <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    15fa:	ea ef       	ldi	r30, 0xFA	; 250
    15fc:	f1 e0       	ldi	r31, 0x01	; 1
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1600:	ec ee       	ldi	r30, 0xEC	; 236
    1602:	f1 e0       	ldi	r31, 0x01	; 1
    1604:	84 91       	lpm	r24, Z
    1606:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    1608:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    160a:	21 c0       	rjmp	.+66     	; 0x164e <CALLBACK_USB_GetDescriptor+0xa8>
    160c:	64 30       	cpi	r22, 0x04	; 4
    160e:	d8 f4       	brcc	.+54     	; 0x1646 <CALLBACK_USB_GetDescriptor+0xa0>
    1610:	e6 2f       	mov	r30, r22
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	ee 0f       	add	r30, r30
    1616:	ff 1f       	adc	r31, r31
    1618:	e0 5e       	subi	r30, 0xE0	; 224
    161a:	fe 4f       	sbci	r31, 0xFE	; 254
    161c:	20 81       	ld	r18, Z
    161e:	31 81       	ldd	r19, Z+1	; 0x01
    1620:	89 e0       	ldi	r24, 0x09	; 9
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	14 c0       	rjmp	.+40     	; 0x164e <CALLBACK_USB_GetDescriptor+0xa8>
    1626:	64 30       	cpi	r22, 0x04	; 4
    1628:	70 f4       	brcc	.+28     	; 0x1646 <CALLBACK_USB_GetDescriptor+0xa0>
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	fb 01       	movw	r30, r22
    162e:	ee 0f       	add	r30, r30
    1630:	ff 1f       	adc	r31, r31
    1632:	e8 5e       	subi	r30, 0xE8	; 232
    1634:	fe 4f       	sbci	r31, 0xFE	; 254
    1636:	20 81       	ld	r18, Z
    1638:	31 81       	ldd	r19, Z+1	; 0x01
    163a:	fb 01       	movw	r30, r22
    163c:	ec 5e       	subi	r30, 0xEC	; 236
    163e:	fe 4f       	sbci	r31, 0xFE	; 254
    1640:	80 81       	ld	r24, Z
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	04 c0       	rjmp	.+8      	; 0x164e <CALLBACK_USB_GetDescriptor+0xa8>
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    164e:	fa 01       	movw	r30, r20
    1650:	31 83       	std	Z+1, r19	; 0x01
    1652:	20 83       	st	Z, r18
    return Size;
}
    1654:	08 95       	ret

00001656 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1656:	80 e1       	ldi	r24, 0x10	; 16
    1658:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    165a:	82 e1       	ldi	r24, 0x12	; 18
    165c:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    165e:	09 b4       	in	r0, 0x29	; 41
    1660:	00 fe       	sbrs	r0, 0
    1662:	fd cf       	rjmp	.-6      	; 0x165e <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1664:	80 91 d8 00 	lds	r24, 0x00D8
    1668:	8f 7d       	andi	r24, 0xDF	; 223
    166a:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    166e:	80 91 e0 00 	lds	r24, 0x00E0
    1672:	82 60       	ori	r24, 0x02	; 2
    1674:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1678:	80 91 e0 00 	lds	r24, 0x00E0
    167c:	81 fd       	sbrc	r24, 1
    167e:	fc cf       	rjmp	.-8      	; 0x1678 <USB_Device_SendRemoteWakeup+0x22>
}
    1680:	08 95       	ret

00001682 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1682:	cf 92       	push	r12
    1684:	df 92       	push	r13
    1686:	ef 92       	push	r14
    1688:	ff 92       	push	r15
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	ec 01       	movw	r28, r24
    1694:	8b 01       	movw	r16, r22
    1696:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1698:	0e 94 a4 0c 	call	0x1948	; 0x1948 <Endpoint_WaitUntilReady>
    169c:	81 11       	cpse	r24, r1
    169e:	33 c0       	rjmp	.+102    	; 0x1706 <Endpoint_Write_Stream_LE+0x84>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    16a0:	c1 14       	cp	r12, r1
    16a2:	d1 04       	cpc	r13, r1
    16a4:	39 f0       	breq	.+14     	; 0x16b4 <Endpoint_Write_Stream_LE+0x32>
	{
		Length -= *BytesProcessed;
    16a6:	f6 01       	movw	r30, r12
    16a8:	80 81       	ld	r24, Z
    16aa:	91 81       	ldd	r25, Z+1	; 0x01
    16ac:	08 1b       	sub	r16, r24
    16ae:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    16b0:	c8 0f       	add	r28, r24
    16b2:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    16b4:	e1 2c       	mov	r14, r1
    16b6:	f1 2c       	mov	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    16b8:	01 15       	cp	r16, r1
    16ba:	11 05       	cpc	r17, r1
    16bc:	19 f1       	breq	.+70     	; 0x1704 <Endpoint_Write_Stream_LE+0x82>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16be:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    16c2:	85 fd       	sbrc	r24, 5
    16c4:	16 c0       	rjmp	.+44     	; 0x16f2 <Endpoint_Write_Stream_LE+0x70>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16c6:	80 91 e8 00 	lds	r24, 0x00E8
    16ca:	8e 77       	andi	r24, 0x7E	; 126
    16cc:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    16d0:	c1 14       	cp	r12, r1
    16d2:	d1 04       	cpc	r13, r1
    16d4:	49 f0       	breq	.+18     	; 0x16e8 <Endpoint_Write_Stream_LE+0x66>
			{
				*BytesProcessed += BytesInTransfer;
    16d6:	f6 01       	movw	r30, r12
    16d8:	80 81       	ld	r24, Z
    16da:	91 81       	ldd	r25, Z+1	; 0x01
    16dc:	e8 0e       	add	r14, r24
    16de:	f9 1e       	adc	r15, r25
    16e0:	f1 82       	std	Z+1, r15	; 0x01
    16e2:	e0 82       	st	Z, r14
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    16e4:	85 e0       	ldi	r24, 0x05	; 5
    16e6:	0f c0       	rjmp	.+30     	; 0x1706 <Endpoint_Write_Stream_LE+0x84>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    16e8:	0e 94 a4 0c 	call	0x1948	; 0x1948 <Endpoint_WaitUntilReady>
    16ec:	88 23       	and	r24, r24
    16ee:	21 f3       	breq	.-56     	; 0x16b8 <Endpoint_Write_Stream_LE+0x36>
    16f0:	0a c0       	rjmp	.+20     	; 0x1706 <Endpoint_Write_Stream_LE+0x84>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    16f2:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16f4:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    16f8:	01 50       	subi	r16, 0x01	; 1
    16fa:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    16fc:	ff ef       	ldi	r31, 0xFF	; 255
    16fe:	ef 1a       	sub	r14, r31
    1700:	ff 0a       	sbc	r15, r31
    1702:	da cf       	rjmp	.-76     	; 0x16b8 <Endpoint_Write_Stream_LE+0x36>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1704:	80 e0       	ldi	r24, 0x00	; 0
}
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	08 95       	ret

00001718 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1718:	20 91 cd 01 	lds	r18, 0x01CD
    171c:	30 91 ce 01 	lds	r19, 0x01CE
    1720:	26 17       	cp	r18, r22
    1722:	37 07       	cpc	r19, r23
    1724:	48 f0       	brcs	.+18     	; 0x1738 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1726:	61 15       	cp	r22, r1
    1728:	71 05       	cpc	r23, r1
    172a:	39 f4       	brne	.+14     	; 0x173a <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    172c:	20 91 e8 00 	lds	r18, 0x00E8
    1730:	2e 77       	andi	r18, 0x7E	; 126
    1732:	20 93 e8 00 	sts	0x00E8, r18
    1736:	01 c0       	rjmp	.+2      	; 0x173a <Endpoint_Write_Control_Stream_LE+0x22>
    1738:	b9 01       	movw	r22, r18
    173a:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    173c:	61 15       	cp	r22, r1
    173e:	71 05       	cpc	r23, r1
    1740:	a9 f1       	breq	.+106    	; 0x17ac <Endpoint_Write_Control_Stream_LE+0x94>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1742:	20 91 c6 01 	lds	r18, 0x01C6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1746:	22 23       	and	r18, r18
    1748:	09 f4       	brne	.+2      	; 0x174c <Endpoint_Write_Control_Stream_LE+0x34>
    174a:	43 c0       	rjmp	.+134    	; 0x17d2 <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    174c:	25 30       	cpi	r18, 0x05	; 5
    174e:	09 f4       	brne	.+2      	; 0x1752 <Endpoint_Write_Control_Stream_LE+0x3a>
    1750:	42 c0       	rjmp	.+132    	; 0x17d6 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1752:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1756:	23 fd       	sbrc	r18, 3
    1758:	40 c0       	rjmp	.+128    	; 0x17da <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    175a:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    175e:	22 fd       	sbrc	r18, 2
    1760:	32 c0       	rjmp	.+100    	; 0x17c6 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1762:	20 91 e8 00 	lds	r18, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1766:	20 ff       	sbrs	r18, 0
    1768:	e9 cf       	rjmp	.-46     	; 0x173c <Endpoint_Write_Control_Stream_LE+0x24>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    176a:	40 91 f3 00 	lds	r20, 0x00F3
    176e:	20 91 f2 00 	lds	r18, 0x00F2
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	34 2b       	or	r19, r20
    1776:	fc 01       	movw	r30, r24
    1778:	cf 01       	movw	r24, r30
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    177a:	61 15       	cp	r22, r1
    177c:	71 05       	cpc	r23, r1
    177e:	59 f0       	breq	.+22     	; 0x1796 <Endpoint_Write_Control_Stream_LE+0x7e>
    1780:	28 30       	cpi	r18, 0x08	; 8
    1782:	31 05       	cpc	r19, r1
    1784:	40 f4       	brcc	.+16     	; 0x1796 <Endpoint_Write_Control_Stream_LE+0x7e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1786:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1788:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    178c:	61 50       	subi	r22, 0x01	; 1
    178e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1790:	2f 5f       	subi	r18, 0xFF	; 255
    1792:	3f 4f       	sbci	r19, 0xFF	; 255
    1794:	f1 cf       	rjmp	.-30     	; 0x1778 <Endpoint_Write_Control_Stream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1796:	41 e0       	ldi	r20, 0x01	; 1
    1798:	28 30       	cpi	r18, 0x08	; 8
    179a:	31 05       	cpc	r19, r1
    179c:	09 f0       	breq	.+2      	; 0x17a0 <Endpoint_Write_Control_Stream_LE+0x88>
    179e:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17a0:	20 91 e8 00 	lds	r18, 0x00E8
    17a4:	2e 77       	andi	r18, 0x7E	; 126
    17a6:	20 93 e8 00 	sts	0x00E8, r18
    17aa:	c8 cf       	rjmp	.-112    	; 0x173c <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    17ac:	41 11       	cpse	r20, r1
    17ae:	c9 cf       	rjmp	.-110    	; 0x1742 <Endpoint_Write_Control_Stream_LE+0x2a>
    17b0:	0a c0       	rjmp	.+20     	; 0x17c6 <Endpoint_Write_Control_Stream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    17b2:	80 91 c6 01 	lds	r24, 0x01C6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    17b6:	88 23       	and	r24, r24
    17b8:	61 f0       	breq	.+24     	; 0x17d2 <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    17ba:	85 30       	cpi	r24, 0x05	; 5
    17bc:	61 f0       	breq	.+24     	; 0x17d6 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17be:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    17c2:	83 fd       	sbrc	r24, 3
    17c4:	0a c0       	rjmp	.+20     	; 0x17da <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17c6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    17ca:	82 ff       	sbrs	r24, 2
    17cc:	f2 cf       	rjmp	.-28     	; 0x17b2 <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    17d6:	83 e0       	ldi	r24, 0x03	; 3
    17d8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    17da:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    17dc:	08 95       	ret

000017de <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    17de:	20 91 cd 01 	lds	r18, 0x01CD
    17e2:	30 91 ce 01 	lds	r19, 0x01CE
    17e6:	26 17       	cp	r18, r22
    17e8:	37 07       	cpc	r19, r23
    17ea:	48 f0       	brcs	.+18     	; 0x17fe <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    17ec:	61 15       	cp	r22, r1
    17ee:	71 05       	cpc	r23, r1
    17f0:	39 f4       	brne	.+14     	; 0x1800 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17f2:	20 91 e8 00 	lds	r18, 0x00E8
    17f6:	2e 77       	andi	r18, 0x7E	; 126
    17f8:	20 93 e8 00 	sts	0x00E8, r18
    17fc:	01 c0       	rjmp	.+2      	; 0x1800 <Endpoint_Write_Control_PStream_LE+0x22>
    17fe:	b9 01       	movw	r22, r18
    1800:	fc 01       	movw	r30, r24
    1802:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1804:	61 15       	cp	r22, r1
    1806:	71 05       	cpc	r23, r1
    1808:	91 f1       	breq	.+100    	; 0x186e <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    180a:	80 91 c6 01 	lds	r24, 0x01C6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    180e:	88 23       	and	r24, r24
    1810:	09 f4       	brne	.+2      	; 0x1814 <Endpoint_Write_Control_PStream_LE+0x36>
    1812:	40 c0       	rjmp	.+128    	; 0x1894 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1814:	85 30       	cpi	r24, 0x05	; 5
    1816:	09 f4       	brne	.+2      	; 0x181a <Endpoint_Write_Control_PStream_LE+0x3c>
    1818:	3f c0       	rjmp	.+126    	; 0x1898 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    181a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    181e:	83 fd       	sbrc	r24, 3
    1820:	3d c0       	rjmp	.+122    	; 0x189c <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1822:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1826:	82 fd       	sbrc	r24, 2
    1828:	2f c0       	rjmp	.+94     	; 0x1888 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    182a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    182e:	80 ff       	sbrs	r24, 0
    1830:	e9 cf       	rjmp	.-46     	; 0x1804 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1832:	20 91 f3 00 	lds	r18, 0x00F3
    1836:	80 91 f2 00 	lds	r24, 0x00F2
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    183e:	61 15       	cp	r22, r1
    1840:	71 05       	cpc	r23, r1
    1842:	59 f0       	breq	.+22     	; 0x185a <Endpoint_Write_Control_PStream_LE+0x7c>
    1844:	88 30       	cpi	r24, 0x08	; 8
    1846:	91 05       	cpc	r25, r1
    1848:	40 f4       	brcc	.+16     	; 0x185a <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    184a:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    184c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1850:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1852:	61 50       	subi	r22, 0x01	; 1
    1854:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	f2 cf       	rjmp	.-28     	; 0x183e <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    185a:	21 e0       	ldi	r18, 0x01	; 1
    185c:	08 97       	sbiw	r24, 0x08	; 8
    185e:	09 f0       	breq	.+2      	; 0x1862 <Endpoint_Write_Control_PStream_LE+0x84>
    1860:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1862:	80 91 e8 00 	lds	r24, 0x00E8
    1866:	8e 77       	andi	r24, 0x7E	; 126
    1868:	80 93 e8 00 	sts	0x00E8, r24
    186c:	cb cf       	rjmp	.-106    	; 0x1804 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    186e:	21 11       	cpse	r18, r1
    1870:	cc cf       	rjmp	.-104    	; 0x180a <Endpoint_Write_Control_PStream_LE+0x2c>
    1872:	0a c0       	rjmp	.+20     	; 0x1888 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1874:	80 91 c6 01 	lds	r24, 0x01C6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1878:	88 23       	and	r24, r24
    187a:	61 f0       	breq	.+24     	; 0x1894 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    187c:	85 30       	cpi	r24, 0x05	; 5
    187e:	61 f0       	breq	.+24     	; 0x1898 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1880:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1884:	83 fd       	sbrc	r24, 3
    1886:	0a c0       	rjmp	.+20     	; 0x189c <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1888:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    188c:	82 ff       	sbrs	r24, 2
    188e:	f2 cf       	rjmp	.-28     	; 0x1874 <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1898:	83 e0       	ldi	r24, 0x03	; 3
    189a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    189c:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    189e:	08 95       	ret

000018a0 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    18a0:	98 2f       	mov	r25, r24
    18a2:	97 30       	cpi	r25, 0x07	; 7
    18a4:	58 f5       	brcc	.+86     	; 0x18fc <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18a6:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    18aa:	98 17       	cp	r25, r24
    18ac:	39 f0       	breq	.+14     	; 0x18bc <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    18ae:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    18b2:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    18b6:	50 91 f0 00 	lds	r21, 0x00F0
    18ba:	03 c0       	rjmp	.+6      	; 0x18c2 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    18bc:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    18be:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    18c0:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    18c2:	21 ff       	sbrs	r18, 1
    18c4:	19 c0       	rjmp	.+50     	; 0x18f8 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    18c6:	30 91 eb 00 	lds	r19, 0x00EB
    18ca:	3e 7f       	andi	r19, 0xFE	; 254
    18cc:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    18d0:	30 91 ed 00 	lds	r19, 0x00ED
    18d4:	3d 7f       	andi	r19, 0xFD	; 253
    18d6:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    18da:	30 91 eb 00 	lds	r19, 0x00EB
    18de:	31 60       	ori	r19, 0x01	; 1
    18e0:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    18e4:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    18e8:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    18ec:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    18f0:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    18f4:	27 ff       	sbrs	r18, 7
    18f6:	07 c0       	rjmp	.+14     	; 0x1906 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    18f8:	9f 5f       	subi	r25, 0xFF	; 255
    18fa:	d3 cf       	rjmp	.-90     	; 0x18a2 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18fc:	8f 70       	andi	r24, 0x0F	; 15
    18fe:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1906:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1908:	08 95       	ret

0000190a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    190a:	80 91 c7 01 	lds	r24, 0x01C7
    190e:	87 ff       	sbrs	r24, 7
    1910:	11 c0       	rjmp	.+34     	; 0x1934 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1912:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    1916:	82 fd       	sbrc	r24, 2
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    191a:	80 91 c6 01 	lds	r24, 0x01C6
    191e:	81 11       	cpse	r24, r1
    1920:	f8 cf       	rjmp	.-16     	; 0x1912 <Endpoint_ClearStatusStage+0x8>
    1922:	11 c0       	rjmp	.+34     	; 0x1946 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1924:	80 91 e8 00 	lds	r24, 0x00E8
    1928:	8b 77       	andi	r24, 0x7B	; 123
    192a:	0b c0       	rjmp	.+22     	; 0x1942 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    192c:	80 91 c6 01 	lds	r24, 0x01C6
    1930:	88 23       	and	r24, r24
    1932:	49 f0       	breq	.+18     	; 0x1946 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1934:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1938:	80 ff       	sbrs	r24, 0
    193a:	f8 cf       	rjmp	.-16     	; 0x192c <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    193c:	80 91 e8 00 	lds	r24, 0x00E8
    1940:	8e 77       	andi	r24, 0x7E	; 126
    1942:	80 93 e8 00 	sts	0x00E8, r24
    1946:	08 95       	ret

00001948 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1948:	20 91 e4 00 	lds	r18, 0x00E4
    194c:	30 91 e5 00 	lds	r19, 0x00E5
    1950:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1952:	40 91 ec 00 	lds	r20, 0x00EC
    1956:	84 2f       	mov	r24, r20
    1958:	81 70       	andi	r24, 0x01	; 1
    195a:	40 ff       	sbrs	r20, 0
    195c:	22 c0       	rjmp	.+68     	; 0x19a2 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    195e:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1962:	80 fd       	sbrc	r24, 0
    1964:	1c c0       	rjmp	.+56     	; 0x199e <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1966:	80 91 c6 01 	lds	r24, 0x01C6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    196a:	88 23       	and	r24, r24
    196c:	91 f0       	breq	.+36     	; 0x1992 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    196e:	85 30       	cpi	r24, 0x05	; 5
    1970:	91 f0       	breq	.+36     	; 0x1996 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1972:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1976:	85 fd       	sbrc	r24, 5
    1978:	10 c0       	rjmp	.+32     	; 0x199a <Endpoint_WaitUntilReady+0x52>
    197a:	40 91 e4 00 	lds	r20, 0x00E4
    197e:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1982:	42 17       	cp	r20, r18
    1984:	53 07       	cpc	r21, r19
    1986:	29 f3       	breq	.-54     	; 0x1952 <Endpoint_WaitUntilReady+0xa>
    1988:	9a 01       	movw	r18, r20
    198a:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    198c:	11 f7       	brne	.-60     	; 0x1952 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    198e:	84 e0       	ldi	r24, 0x04	; 4
    1990:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1992:	82 e0       	ldi	r24, 0x02	; 2
    1994:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1996:	83 e0       	ldi	r24, 0x03	; 3
    1998:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19a2:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    19a6:	42 ff       	sbrs	r20, 2
    19a8:	de cf       	rjmp	.-68     	; 0x1966 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    19aa:	08 95       	ret

000019ac <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    19ac:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    19b0:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    19b4:	e0 ee       	ldi	r30, 0xE0	; 224
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	81 60       	ori	r24, 0x01	; 1
    19bc:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    19be:	e8 ed       	ldi	r30, 0xD8	; 216
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	8f 77       	andi	r24, 0x7F	; 127
    19c6:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    19c8:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    19ca:	a7 ed       	ldi	r26, 0xD7	; 215
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	8c 91       	ld	r24, X
    19d0:	8e 7f       	andi	r24, 0xFE	; 254
    19d2:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    19d4:	80 81       	ld	r24, Z
    19d6:	8f 7e       	andi	r24, 0xEF	; 239
    19d8:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    19da:	10 92 c5 01 	sts	0x01C5, r1
    19de:	08 95       	ret

000019e0 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    19e8:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    19ec:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    19f0:	c8 ed       	ldi	r28, 0xD8	; 216
    19f2:	d0 e0       	ldi	r29, 0x00	; 0
    19f4:	88 81       	ld	r24, Y
    19f6:	8f 77       	andi	r24, 0x7F	; 127
    19f8:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    19fa:	88 81       	ld	r24, Y
    19fc:	80 68       	ori	r24, 0x80	; 128
    19fe:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1a00:	88 81       	ld	r24, Y
    1a02:	8f 7d       	andi	r24, 0xDF	; 223
    1a04:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1a06:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1a08:	10 92 c6 01 	sts	0x01C6, r1
	USB_Device_ConfigurationNumber  = 0;
    1a0c:	10 92 c2 01 	sts	0x01C2, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1a10:	10 92 c4 01 	sts	0x01C4, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1a14:	10 92 c3 01 	sts	0x01C3, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1a18:	00 ee       	ldi	r16, 0xE0	; 224
    1a1a:	10 e0       	ldi	r17, 0x00	; 0
    1a1c:	f8 01       	movw	r30, r16
    1a1e:	80 81       	ld	r24, Z
    1a20:	8b 7f       	andi	r24, 0xFB	; 251
    1a22:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1a24:	88 81       	ld	r24, Y
    1a26:	81 60       	ori	r24, 0x01	; 1
    1a28:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a2a:	42 e0       	ldi	r20, 0x02	; 2
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1a34:	e1 ee       	ldi	r30, 0xE1	; 225
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	8e 7f       	andi	r24, 0xFE	; 254
    1a3c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1a3e:	e2 ee       	ldi	r30, 0xE2	; 226
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	81 60       	ori	r24, 0x01	; 1
    1a46:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1a48:	80 81       	ld	r24, Z
    1a4a:	88 60       	ori	r24, 0x08	; 8
    1a4c:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1a4e:	f8 01       	movw	r30, r16
    1a50:	80 81       	ld	r24, Z
    1a52:	8e 7f       	andi	r24, 0xFE	; 254
    1a54:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1a56:	88 81       	ld	r24, Y
    1a58:	80 61       	ori	r24, 0x10	; 16
    1a5a:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	1f 91       	pop	r17
    1a62:	0f 91       	pop	r16
    1a64:	08 95       	ret

00001a66 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1a66:	e8 ed       	ldi	r30, 0xD8	; 216
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	8f 7e       	andi	r24, 0xEF	; 239
    1a6e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1a70:	e7 ed       	ldi	r30, 0xD7	; 215
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	81 60       	ori	r24, 0x01	; 1
    1a78:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1a7a:	84 e0       	ldi	r24, 0x04	; 4
    1a7c:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	80 93 c5 01 	sts	0x01C5, r24

	USB_ResetInterface();
    1a84:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <USB_ResetInterface>

00001a88 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1a88:	e8 ed       	ldi	r30, 0xD8	; 216
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	8e 7f       	andi	r24, 0xFE	; 254
    1a90:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1a92:	10 92 e2 00 	sts	0x00E2, r1
    1a96:	08 95       	ret

00001a98 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1a98:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1a9c:	10 92 e1 00 	sts	0x00E1, r1
    1aa0:	08 95       	ret

00001aa2 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1aa2:	1f 92       	push	r1
    1aa4:	0f 92       	push	r0
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	0f 92       	push	r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	2f 93       	push	r18
    1aae:	3f 93       	push	r19
    1ab0:	4f 93       	push	r20
    1ab2:	5f 93       	push	r21
    1ab4:	6f 93       	push	r22
    1ab6:	7f 93       	push	r23
    1ab8:	8f 93       	push	r24
    1aba:	9f 93       	push	r25
    1abc:	af 93       	push	r26
    1abe:	bf 93       	push	r27
    1ac0:	ef 93       	push	r30
    1ac2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1ac4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1ac8:	82 ff       	sbrs	r24, 2
    1aca:	0b c0       	rjmp	.+22     	; 0x1ae2 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1acc:	80 91 e2 00 	lds	r24, 0x00E2
    1ad0:	82 ff       	sbrs	r24, 2
    1ad2:	07 c0       	rjmp	.+14     	; 0x1ae2 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1ad4:	80 91 e1 00 	lds	r24, 0x00E1
    1ad8:	8b 7f       	andi	r24, 0xFB	; 251
    1ada:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1ade:	0e 94 80 09 	call	0x1300	; 0x1300 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1ae2:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1ae6:	80 ff       	sbrs	r24, 0
    1ae8:	1f c0       	rjmp	.+62     	; 0x1b28 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1aea:	80 91 d8 00 	lds	r24, 0x00D8
    1aee:	80 ff       	sbrs	r24, 0
    1af0:	1b c0       	rjmp	.+54     	; 0x1b28 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1af2:	80 91 da 00 	lds	r24, 0x00DA
    1af6:	8e 7f       	andi	r24, 0xFE	; 254
    1af8:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1afc:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1b00:	80 ff       	sbrs	r24, 0
    1b02:	0d c0       	rjmp	.+26     	; 0x1b1e <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1b04:	80 e1       	ldi	r24, 0x10	; 16
    1b06:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1b08:	82 e1       	ldi	r24, 0x12	; 18
    1b0a:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1b0c:	09 b4       	in	r0, 0x29	; 41
    1b0e:	00 fe       	sbrs	r0, 0
    1b10:	fd cf       	rjmp	.-6      	; 0x1b0c <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	80 93 c6 01 	sts	0x01C6, r24
			EVENT_USB_Device_Connect();
    1b18:	0e 94 59 09 	call	0x12b2	; 0x12b2 <EVENT_USB_Device_Connect>
    1b1c:	05 c0       	rjmp	.+10     	; 0x1b28 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b1e:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1b20:	10 92 c6 01 	sts	0x01C6, r1
			EVENT_USB_Device_Disconnect();
    1b24:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1b28:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1b2c:	80 ff       	sbrs	r24, 0
    1b2e:	19 c0       	rjmp	.+50     	; 0x1b62 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1b30:	80 91 e2 00 	lds	r24, 0x00E2
    1b34:	80 ff       	sbrs	r24, 0
    1b36:	15 c0       	rjmp	.+42     	; 0x1b62 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1b38:	80 91 e2 00 	lds	r24, 0x00E2
    1b3c:	8e 7f       	andi	r24, 0xFE	; 254
    1b3e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1b42:	80 91 e2 00 	lds	r24, 0x00E2
    1b46:	80 61       	ori	r24, 0x10	; 16
    1b48:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1b4c:	80 91 d8 00 	lds	r24, 0x00D8
    1b50:	80 62       	ori	r24, 0x20	; 32
    1b52:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b56:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1b58:	85 e0       	ldi	r24, 0x05	; 5
    1b5a:	80 93 c6 01 	sts	0x01C6, r24
		EVENT_USB_Device_Suspend();
    1b5e:	0e 94 76 09 	call	0x12ec	; 0x12ec <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1b62:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1b66:	84 ff       	sbrs	r24, 4
    1b68:	30 c0       	rjmp	.+96     	; 0x1bca <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1b6a:	80 91 e2 00 	lds	r24, 0x00E2
    1b6e:	84 ff       	sbrs	r24, 4
    1b70:	2c c0       	rjmp	.+88     	; 0x1bca <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1b72:	80 e1       	ldi	r24, 0x10	; 16
    1b74:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1b76:	82 e1       	ldi	r24, 0x12	; 18
    1b78:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1b7a:	09 b4       	in	r0, 0x29	; 41
    1b7c:	00 fe       	sbrs	r0, 0
    1b7e:	fd cf       	rjmp	.-6      	; 0x1b7a <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1b80:	80 91 d8 00 	lds	r24, 0x00D8
    1b84:	8f 7d       	andi	r24, 0xDF	; 223
    1b86:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1b8a:	80 91 e1 00 	lds	r24, 0x00E1
    1b8e:	8f 7e       	andi	r24, 0xEF	; 239
    1b90:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1b94:	80 91 e2 00 	lds	r24, 0x00E2
    1b98:	8f 7e       	andi	r24, 0xEF	; 239
    1b9a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1b9e:	80 91 e2 00 	lds	r24, 0x00E2
    1ba2:	81 60       	ori	r24, 0x01	; 1
    1ba4:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1ba8:	80 91 c2 01 	lds	r24, 0x01C2
    1bac:	88 23       	and	r24, r24
    1bae:	11 f0       	breq	.+4      	; 0x1bb4 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1bb0:	84 e0       	ldi	r24, 0x04	; 4
    1bb2:	07 c0       	rjmp	.+14     	; 0x1bc2 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1bb4:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1bb8:	87 fd       	sbrc	r24, 7
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <__vector_10+0x11e>
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	01 c0       	rjmp	.+2      	; 0x1bc2 <__vector_10+0x120>
    1bc0:	83 e0       	ldi	r24, 0x03	; 3
    1bc2:	80 93 c6 01 	sts	0x01C6, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1bc6:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1bca:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1bce:	83 ff       	sbrs	r24, 3
    1bd0:	29 c0       	rjmp	.+82     	; 0x1c24 <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1bd2:	80 91 e2 00 	lds	r24, 0x00E2
    1bd6:	83 ff       	sbrs	r24, 3
    1bd8:	25 c0       	rjmp	.+74     	; 0x1c24 <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1bda:	80 91 e1 00 	lds	r24, 0x00E1
    1bde:	87 7f       	andi	r24, 0xF7	; 247
    1be0:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1be4:	82 e0       	ldi	r24, 0x02	; 2
    1be6:	80 93 c6 01 	sts	0x01C6, r24
		USB_Device_ConfigurationNumber = 0;
    1bea:	10 92 c2 01 	sts	0x01C2, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1bee:	80 91 e1 00 	lds	r24, 0x00E1
    1bf2:	8e 7f       	andi	r24, 0xFE	; 254
    1bf4:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1bf8:	80 91 e2 00 	lds	r24, 0x00E2
    1bfc:	8e 7f       	andi	r24, 0xFE	; 254
    1bfe:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1c02:	80 91 e2 00 	lds	r24, 0x00E2
    1c06:	80 61       	ori	r24, 0x10	; 16
    1c08:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c0c:	42 e0       	ldi	r20, 0x02	; 2
    1c0e:	60 e0       	ldi	r22, 0x00	; 0
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1c16:	80 91 f0 00 	lds	r24, 0x00F0
    1c1a:	88 60       	ori	r24, 0x08	; 8
    1c1c:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1c20:	0e 94 72 09 	call	0x12e4	; 0x12e4 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1c24:	ff 91       	pop	r31
    1c26:	ef 91       	pop	r30
    1c28:	bf 91       	pop	r27
    1c2a:	af 91       	pop	r26
    1c2c:	9f 91       	pop	r25
    1c2e:	8f 91       	pop	r24
    1c30:	7f 91       	pop	r23
    1c32:	6f 91       	pop	r22
    1c34:	5f 91       	pop	r21
    1c36:	4f 91       	pop	r20
    1c38:	3f 91       	pop	r19
    1c3a:	2f 91       	pop	r18
    1c3c:	0f 90       	pop	r0
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	0f 90       	pop	r0
    1c42:	1f 90       	pop	r1
    1c44:	18 95       	reti

00001c46 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1c46:	1f 92       	push	r1
    1c48:	0f 92       	push	r0
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	0f 92       	push	r0
    1c4e:	11 24       	eor	r1, r1
    1c50:	2f 93       	push	r18
    1c52:	3f 93       	push	r19
    1c54:	4f 93       	push	r20
    1c56:	5f 93       	push	r21
    1c58:	6f 93       	push	r22
    1c5a:	7f 93       	push	r23
    1c5c:	8f 93       	push	r24
    1c5e:	9f 93       	push	r25
    1c60:	af 93       	push	r26
    1c62:	bf 93       	push	r27
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	ef 93       	push	r30
    1c6a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1c6c:	c0 91 e9 00 	lds	r28, 0x00E9
    1c70:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1c72:	80 91 ec 00 	lds	r24, 0x00EC
    1c76:	d8 2f       	mov	r29, r24
    1c78:	d1 70       	andi	r29, 0x01	; 1
    1c7a:	80 fd       	sbrc	r24, 0
    1c7c:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c7e:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1c82:	80 91 f0 00 	lds	r24, 0x00F0
    1c86:	87 7f       	andi	r24, 0xF7	; 247
    1c88:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1c8c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1c8e:	0e 94 67 0e 	call	0x1cce	; 0x1cce <USB_Device_ProcessControlRequest>
    1c92:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1c96:	80 91 f0 00 	lds	r24, 0x00F0
    1c9a:	88 60       	ori	r24, 0x08	; 8
    1c9c:	80 93 f0 00 	sts	0x00F0, r24
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1ca0:	cd 2b       	or	r28, r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ca2:	cf 70       	andi	r28, 0x0F	; 15
    1ca4:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1ca8:	ff 91       	pop	r31
    1caa:	ef 91       	pop	r30
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	bf 91       	pop	r27
    1cb2:	af 91       	pop	r26
    1cb4:	9f 91       	pop	r25
    1cb6:	8f 91       	pop	r24
    1cb8:	7f 91       	pop	r23
    1cba:	6f 91       	pop	r22
    1cbc:	5f 91       	pop	r21
    1cbe:	4f 91       	pop	r20
    1cc0:	3f 91       	pop	r19
    1cc2:	2f 91       	pop	r18
    1cc4:	0f 90       	pop	r0
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	0f 90       	pop	r0
    1cca:	1f 90       	pop	r1
    1ccc:	18 95       	reti

00001cce <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1cce:	1f 93       	push	r17
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	aa 97       	sbiw	r28, 0x2a	; 42
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	e7 ec       	ldi	r30, 0xC7	; 199
    1ce6:	f1 e0       	ldi	r31, 0x01	; 1
    1ce8:	88 e0       	ldi	r24, 0x08	; 8
    1cea:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1cec:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1cf0:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1cf2:	8e 13       	cpse	r24, r30
    1cf4:	fb cf       	rjmp	.-10     	; 0x1cec <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1cf6:	0e 94 d5 09 	call	0x13aa	; 0x13aa <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1cfa:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1cfe:	83 ff       	sbrs	r24, 3
    1d00:	1f c1       	rjmp	.+574    	; 0x1f40 <USB_Device_ProcessControlRequest+0x272>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1d02:	80 91 c7 01 	lds	r24, 0x01C7

		switch (USB_ControlRequest.bRequest)
    1d06:	90 91 c8 01 	lds	r25, 0x01C8
    1d0a:	49 2f       	mov	r20, r25
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	4a 30       	cpi	r20, 0x0A	; 10
    1d10:	51 05       	cpc	r21, r1
    1d12:	08 f0       	brcs	.+2      	; 0x1d16 <USB_Device_ProcessControlRequest+0x48>
    1d14:	15 c1       	rjmp	.+554    	; 0x1f40 <USB_Device_ProcessControlRequest+0x272>
    1d16:	fa 01       	movw	r30, r20
    1d18:	ea 5a       	subi	r30, 0xAA	; 170
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	0c 94 72 28 	jmp	0x50e4	; 0x50e4 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d20:	80 38       	cpi	r24, 0x80	; 128
    1d22:	81 f0       	breq	.+32     	; 0x1d44 <USB_Device_ProcessControlRequest+0x76>
    1d24:	82 38       	cpi	r24, 0x82	; 130
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <USB_Device_ProcessControlRequest+0x5c>
    1d28:	0b c1       	rjmp	.+534    	; 0x1f40 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d2a:	80 91 cb 01 	lds	r24, 0x01CB
    1d2e:	8f 70       	andi	r24, 0x0F	; 15
    1d30:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1d34:	80 91 eb 00 	lds	r24, 0x00EB
    1d38:	85 fb       	bst	r24, 5
    1d3a:	88 27       	eor	r24, r24
    1d3c:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d3e:	10 92 e9 00 	sts	0x00E9, r1
    1d42:	06 c0       	rjmp	.+12     	; 0x1d50 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1d44:	80 91 c3 01 	lds	r24, 0x01C3
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1d48:	90 91 c4 01 	lds	r25, 0x01C4
    1d4c:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1d4e:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d50:	90 91 e8 00 	lds	r25, 0x00E8
    1d54:	97 7f       	andi	r25, 0xF7	; 247
    1d56:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1d5a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1d5e:	10 92 f1 00 	sts	0x00F1, r1
    1d62:	c8 c0       	rjmp	.+400    	; 0x1ef4 <USB_Device_ProcessControlRequest+0x226>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d64:	28 2f       	mov	r18, r24
    1d66:	2d 7f       	andi	r18, 0xFD	; 253
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <USB_Device_ProcessControlRequest+0x9e>
    1d6a:	ea c0       	rjmp	.+468    	; 0x1f40 <USB_Device_ProcessControlRequest+0x272>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1d6c:	88 23       	and	r24, r24
    1d6e:	19 f0       	breq	.+6      	; 0x1d76 <USB_Device_ProcessControlRequest+0xa8>
    1d70:	82 30       	cpi	r24, 0x02	; 2
    1d72:	61 f0       	breq	.+24     	; 0x1d8c <USB_Device_ProcessControlRequest+0xbe>
    1d74:	e5 c0       	rjmp	.+458    	; 0x1f40 <USB_Device_ProcessControlRequest+0x272>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1d76:	80 91 c9 01 	lds	r24, 0x01C9
    1d7a:	81 30       	cpi	r24, 0x01	; 1
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <USB_Device_ProcessControlRequest+0xb2>
    1d7e:	e0 c0       	rjmp	.+448    	; 0x1f40 <USB_Device_ProcessControlRequest+0x272>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1d80:	93 30       	cpi	r25, 0x03	; 3
    1d82:	09 f0       	breq	.+2      	; 0x1d86 <USB_Device_ProcessControlRequest+0xb8>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	80 93 c4 01 	sts	0x01C4, r24
    1d8a:	2b c0       	rjmp	.+86     	; 0x1de2 <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1d8c:	80 91 c9 01 	lds	r24, 0x01C9
    1d90:	81 11       	cpse	r24, r1
    1d92:	27 c0       	rjmp	.+78     	; 0x1de2 <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1d94:	80 91 cb 01 	lds	r24, 0x01CB
    1d98:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <USB_Device_ProcessControlRequest+0xd0>
    1d9c:	d1 c0       	rjmp	.+418    	; 0x1f40 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d9e:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1da2:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1da6:	20 ff       	sbrs	r18, 0
    1da8:	1c c0       	rjmp	.+56     	; 0x1de2 <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1daa:	93 30       	cpi	r25, 0x03	; 3
    1dac:	21 f4       	brne	.+8      	; 0x1db6 <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1dae:	80 91 eb 00 	lds	r24, 0x00EB
    1db2:	80 62       	ori	r24, 0x20	; 32
    1db4:	14 c0       	rjmp	.+40     	; 0x1dde <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1db6:	90 91 eb 00 	lds	r25, 0x00EB
    1dba:	90 61       	ori	r25, 0x10	; 16
    1dbc:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1dc0:	21 e0       	ldi	r18, 0x01	; 1
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	a9 01       	movw	r20, r18
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <USB_Device_ProcessControlRequest+0xfe>
    1dc8:	44 0f       	add	r20, r20
    1dca:	55 1f       	adc	r21, r21
    1dcc:	8a 95       	dec	r24
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <USB_Device_ProcessControlRequest+0xfa>
    1dd0:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
    1dd4:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1dd8:	80 91 eb 00 	lds	r24, 0x00EB
    1ddc:	88 60       	ori	r24, 0x08	; 8
    1dde:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1de2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1de6:	80 91 e8 00 	lds	r24, 0x00E8
    1dea:	87 7f       	andi	r24, 0xF7	; 247
    1dec:	86 c0       	rjmp	.+268    	; 0x1efa <USB_Device_ProcessControlRequest+0x22c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1dee:	81 11       	cpse	r24, r1
    1df0:	a7 c0       	rjmp	.+334    	; 0x1f40 <USB_Device_ProcessControlRequest+0x272>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1df2:	10 91 c9 01 	lds	r17, 0x01C9
    1df6:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1df8:	80 91 e3 00 	lds	r24, 0x00E3
    1dfc:	80 78       	andi	r24, 0x80	; 128
    1dfe:	81 2b       	or	r24, r17
    1e00:	80 93 e3 00 	sts	0x00E3, r24
    1e04:	80 91 e8 00 	lds	r24, 0x00E8
    1e08:	87 7f       	andi	r24, 0xF7	; 247
    1e0a:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1e0e:	0e 94 85 0c 	call	0x190a	; 0x190a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e12:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1e16:	80 ff       	sbrs	r24, 0
    1e18:	fc cf       	rjmp	.-8      	; 0x1e12 <USB_Device_ProcessControlRequest+0x144>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1e1a:	80 91 e3 00 	lds	r24, 0x00E3
    1e1e:	80 68       	ori	r24, 0x80	; 128
    1e20:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1e24:	11 11       	cpse	r17, r1
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <USB_Device_ProcessControlRequest+0x15e>
    1e28:	82 e0       	ldi	r24, 0x02	; 2
    1e2a:	01 c0       	rjmp	.+2      	; 0x1e2e <USB_Device_ProcessControlRequest+0x160>
    1e2c:	83 e0       	ldi	r24, 0x03	; 3
    1e2e:	80 93 c6 01 	sts	0x01C6, r24
    1e32:	86 c0       	rjmp	.+268    	; 0x1f40 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e34:	80 58       	subi	r24, 0x80	; 128
    1e36:	82 30       	cpi	r24, 0x02	; 2
    1e38:	08 f0       	brcs	.+2      	; 0x1e3c <USB_Device_ProcessControlRequest+0x16e>
    1e3a:	82 c0       	rjmp	.+260    	; 0x1f40 <USB_Device_ProcessControlRequest+0x272>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1e3c:	80 91 c9 01 	lds	r24, 0x01C9
    1e40:	90 91 ca 01 	lds	r25, 0x01CA
    1e44:	8c 3d       	cpi	r24, 0xDC	; 220
    1e46:	53 e0       	ldi	r21, 0x03	; 3
    1e48:	95 07       	cpc	r25, r21
    1e4a:	79 f5       	brne	.+94     	; 0x1eaa <USB_Device_ProcessControlRequest+0x1dc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1e4c:	83 e0       	ldi	r24, 0x03	; 3
    1e4e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1e50:	8a e2       	ldi	r24, 0x2A	; 42
    1e52:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1e54:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1e56:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1e58:	de 01       	movw	r26, r28
    1e5a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1e5e:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1e60:	51 e2       	ldi	r21, 0x21	; 33
    1e62:	e3 2f       	mov	r30, r19
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	50 93 57 00 	sts	0x0057, r21
    1e6a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1e6c:	20 ff       	sbrs	r18, 0
    1e6e:	03 c0       	rjmp	.+6      	; 0x1e76 <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    1e70:	e2 95       	swap	r30
    1e72:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1e74:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1e76:	ef 70       	andi	r30, 0x0F	; 15
    1e78:	8e 2f       	mov	r24, r30
    1e7a:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1e7c:	ea 30       	cpi	r30, 0x0A	; 10
    1e7e:	10 f0       	brcs	.+4      	; 0x1e84 <USB_Device_ProcessControlRequest+0x1b6>
    1e80:	c7 96       	adiw	r24, 0x37	; 55
    1e82:	01 c0       	rjmp	.+2      	; 0x1e86 <USB_Device_ProcessControlRequest+0x1b8>
    1e84:	c0 96       	adiw	r24, 0x30	; 48
    1e86:	8d 93       	st	X+, r24
    1e88:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1e8a:	2f 5f       	subi	r18, 0xFF	; 255
    1e8c:	24 31       	cpi	r18, 0x14	; 20
    1e8e:	49 f7       	brne	.-46     	; 0x1e62 <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1e90:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e92:	80 91 e8 00 	lds	r24, 0x00E8
    1e96:	87 7f       	andi	r24, 0xF7	; 247
    1e98:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1e9c:	6a e2       	ldi	r22, 0x2A	; 42
    1e9e:	70 e0       	ldi	r23, 0x00	; 0
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	01 96       	adiw	r24, 0x01	; 1
    1ea4:	0e 94 8c 0b 	call	0x1718	; 0x1718 <Endpoint_Write_Control_Stream_LE>
    1ea8:	14 c0       	rjmp	.+40     	; 0x1ed2 <USB_Device_ProcessControlRequest+0x204>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1eaa:	ae 01       	movw	r20, r28
    1eac:	4f 5f       	subi	r20, 0xFF	; 255
    1eae:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb0:	60 91 cb 01 	lds	r22, 0x01CB
    1eb4:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <CALLBACK_USB_GetDescriptor>
    1eb8:	bc 01       	movw	r22, r24
    1eba:	89 2b       	or	r24, r25
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <USB_Device_ProcessControlRequest+0x1f2>
    1ebe:	40 c0       	rjmp	.+128    	; 0x1f40 <USB_Device_ProcessControlRequest+0x272>
    1ec0:	90 91 e8 00 	lds	r25, 0x00E8
    1ec4:	97 7f       	andi	r25, 0xF7	; 247
    1ec6:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ece:	0e 94 ef 0b 	call	0x17de	; 0x17de <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1ed2:	80 91 e8 00 	lds	r24, 0x00E8
    1ed6:	8b 77       	andi	r24, 0x7B	; 123
    1ed8:	80 93 e8 00 	sts	0x00E8, r24
    1edc:	31 c0       	rjmp	.+98     	; 0x1f40 <USB_Device_ProcessControlRequest+0x272>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1ede:	80 38       	cpi	r24, 0x80	; 128
    1ee0:	79 f5       	brne	.+94     	; 0x1f40 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ee2:	80 91 e8 00 	lds	r24, 0x00E8
    1ee6:	87 7f       	andi	r24, 0xF7	; 247
    1ee8:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1eec:	80 91 c2 01 	lds	r24, 0x01C2
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ef0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ef4:	80 91 e8 00 	lds	r24, 0x00E8
    1ef8:	8e 77       	andi	r24, 0x7E	; 126
    1efa:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1efe:	0e 94 85 0c 	call	0x190a	; 0x190a <Endpoint_ClearStatusStage>
    1f02:	1e c0       	rjmp	.+60     	; 0x1f40 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f04:	81 11       	cpse	r24, r1
    1f06:	1c c0       	rjmp	.+56     	; 0x1f40 <USB_Device_ProcessControlRequest+0x272>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1f08:	90 91 c9 01 	lds	r25, 0x01C9
    1f0c:	92 30       	cpi	r25, 0x02	; 2
    1f0e:	c0 f4       	brcc	.+48     	; 0x1f40 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f10:	80 91 e8 00 	lds	r24, 0x00E8
    1f14:	87 7f       	andi	r24, 0xF7	; 247
    1f16:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1f1a:	90 93 c2 01 	sts	0x01C2, r25

	Endpoint_ClearStatusStage();
    1f1e:	0e 94 85 0c 	call	0x190a	; 0x190a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1f22:	80 91 c2 01 	lds	r24, 0x01C2
    1f26:	81 11       	cpse	r24, r1
    1f28:	06 c0       	rjmp	.+12     	; 0x1f36 <USB_Device_ProcessControlRequest+0x268>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1f2a:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1f2e:	87 fd       	sbrc	r24, 7
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <USB_Device_ProcessControlRequest+0x268>
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	01 c0       	rjmp	.+2      	; 0x1f38 <USB_Device_ProcessControlRequest+0x26a>
    1f36:	84 e0       	ldi	r24, 0x04	; 4
    1f38:	80 93 c6 01 	sts	0x01C6, r24

	EVENT_USB_Device_ConfigurationChanged();
    1f3c:	0e 94 c1 09 	call	0x1382	; 0x1382 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f40:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1f44:	83 ff       	sbrs	r24, 3
    1f46:	0a c0       	rjmp	.+20     	; 0x1f5c <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f48:	80 91 e8 00 	lds	r24, 0x00E8
    1f4c:	87 7f       	andi	r24, 0xF7	; 247
    1f4e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f52:	80 91 eb 00 	lds	r24, 0x00EB
    1f56:	80 62       	ori	r24, 0x20	; 32
    1f58:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1f5c:	aa 96       	adiw	r28, 0x2a	; 42
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	08 95       	ret

00001f70 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    1f70:	90 93 5a 01 	sts	0x015A, r25
    1f74:	80 93 59 01 	sts	0x0159, r24
    1f78:	08 95       	ret

00001f7a <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    1f7a:	e0 91 59 01 	lds	r30, 0x0159
    1f7e:	f0 91 5a 01 	lds	r31, 0x015A
    1f82:	30 97       	sbiw	r30, 0x00	; 0
    1f84:	21 f0       	breq	.+8      	; 0x1f8e <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    1f86:	01 90       	ld	r0, Z+
    1f88:	f0 81       	ld	r31, Z
    1f8a:	e0 2d       	mov	r30, r0
    1f8c:	09 94       	ijmp
}
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	08 95       	ret

00001f92 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1f92:	ef 92       	push	r14
    1f94:	ff 92       	push	r15
    1f96:	0f 93       	push	r16
    1f98:	1f 93       	push	r17
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    if (!driver) return;
    1f9e:	e0 91 59 01 	lds	r30, 0x0159
    1fa2:	f0 91 5a 01 	lds	r31, 0x015A
    1fa6:	30 97       	sbiw	r30, 0x00	; 0
    1fa8:	b1 f1       	breq	.+108    	; 0x2016 <host_keyboard_send+0x84>
    1faa:	8c 01       	movw	r16, r24
    (*driver->send_keyboard)(report);
    1fac:	02 80       	ldd	r0, Z+2	; 0x02
    1fae:	f3 81       	ldd	r31, Z+3	; 0x03
    1fb0:	e0 2d       	mov	r30, r0
    1fb2:	09 95       	icall

    if (debug_keyboard) {
    1fb4:	80 91 b1 01 	lds	r24, 0x01B1
    1fb8:	82 ff       	sbrs	r24, 2
    1fba:	2d c0       	rjmp	.+90     	; 0x2016 <host_keyboard_send+0x84>
        dprint("keyboard_report: ");
    1fbc:	80 ff       	sbrs	r24, 0
    1fbe:	04 c0       	rjmp	.+8      	; 0x1fc8 <host_keyboard_send+0x36>
    1fc0:	88 e7       	ldi	r24, 0x78	; 120
    1fc2:	93 e0       	ldi	r25, 0x03	; 3
    1fc4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    1fc8:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1fca:	18 e0       	ldi	r17, 0x08	; 8
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    1fcc:	82 e7       	ldi	r24, 0x72	; 114
    1fce:	e8 2e       	mov	r14, r24
    1fd0:	83 e0       	ldi	r24, 0x03	; 3
    1fd2:	f8 2e       	mov	r15, r24
    1fd4:	80 91 b1 01 	lds	r24, 0x01B1
    1fd8:	80 ff       	sbrs	r24, 0
    1fda:	0b c0       	rjmp	.+22     	; 0x1ff2 <host_keyboard_send+0x60>
    1fdc:	88 81       	ld	r24, Y
    1fde:	1f 92       	push	r1
    1fe0:	8f 93       	push	r24
    1fe2:	ff 92       	push	r15
    1fe4:	ef 92       	push	r14
    1fe6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	11 50       	subi	r17, 0x01	; 1
    1ff4:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    1ff6:	11 11       	cpse	r17, r1
    1ff8:	ed cf       	rjmp	.-38     	; 0x1fd4 <host_keyboard_send+0x42>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    1ffa:	80 91 b1 01 	lds	r24, 0x01B1
    1ffe:	80 ff       	sbrs	r24, 0
    2000:	0a c0       	rjmp	.+20     	; 0x2016 <host_keyboard_send+0x84>
    2002:	80 e7       	ldi	r24, 0x70	; 112
    2004:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	1f 91       	pop	r17
    200c:	0f 91       	pop	r16
    200e:	ff 90       	pop	r15
    2010:	ef 90       	pop	r14
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2012:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <xputs>
    }
}
    2016:	df 91       	pop	r29
    2018:	cf 91       	pop	r28
    201a:	1f 91       	pop	r17
    201c:	0f 91       	pop	r16
    201e:	ff 90       	pop	r15
    2020:	ef 90       	pop	r14
    2022:	08 95       	ret

00002024 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2024:	e0 91 59 01 	lds	r30, 0x0159
    2028:	f0 91 5a 01 	lds	r31, 0x015A
    202c:	30 97       	sbiw	r30, 0x00	; 0
    202e:	21 f0       	breq	.+8      	; 0x2038 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2030:	04 80       	ldd	r0, Z+4	; 0x04
    2032:	f5 81       	ldd	r31, Z+5	; 0x05
    2034:	e0 2d       	mov	r30, r0
    2036:	09 94       	ijmp
    2038:	08 95       	ret

0000203a <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    203a:	20 91 57 01 	lds	r18, 0x0157
    203e:	30 91 58 01 	lds	r19, 0x0158
    2042:	82 17       	cp	r24, r18
    2044:	93 07       	cpc	r25, r19
    2046:	71 f0       	breq	.+28     	; 0x2064 <host_system_send+0x2a>
    last_system_report = report;
    2048:	90 93 58 01 	sts	0x0158, r25
    204c:	80 93 57 01 	sts	0x0157, r24

    if (!driver) return;
    2050:	e0 91 59 01 	lds	r30, 0x0159
    2054:	f0 91 5a 01 	lds	r31, 0x015A
    2058:	30 97       	sbiw	r30, 0x00	; 0
    205a:	21 f0       	breq	.+8      	; 0x2064 <host_system_send+0x2a>
    (*driver->send_system)(report);
    205c:	06 80       	ldd	r0, Z+6	; 0x06
    205e:	f7 81       	ldd	r31, Z+7	; 0x07
    2060:	e0 2d       	mov	r30, r0
    2062:	09 94       	ijmp
    2064:	08 95       	ret

00002066 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    2066:	20 91 55 01 	lds	r18, 0x0155
    206a:	30 91 56 01 	lds	r19, 0x0156
    206e:	82 17       	cp	r24, r18
    2070:	93 07       	cpc	r25, r19
    2072:	71 f0       	breq	.+28     	; 0x2090 <host_consumer_send+0x2a>
    last_consumer_report = report;
    2074:	90 93 56 01 	sts	0x0156, r25
    2078:	80 93 55 01 	sts	0x0155, r24

    if (!driver) return;
    207c:	e0 91 59 01 	lds	r30, 0x0159
    2080:	f0 91 5a 01 	lds	r31, 0x015A
    2084:	30 97       	sbiw	r30, 0x00	; 0
    2086:	21 f0       	breq	.+8      	; 0x2090 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    2088:	00 84       	ldd	r0, Z+8	; 0x08
    208a:	f1 85       	ldd	r31, Z+9	; 0x09
    208c:	e0 2d       	mov	r30, r0
    208e:	09 94       	ijmp
    2090:	08 95       	ret

00002092 <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    2092:	08 95       	ret

00002094 <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    2094:	0c 94 49 10 	jmp	0x2092	; 0x2092 <matrix_setup>

00002098 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    2098:	0e 94 3d 1c 	call	0x387a	; 0x387a <timer_init>
    matrix_init();
    209c:	0e 94 a1 06 	call	0xd42	; 0xd42 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    20a0:	0c 94 fa 1d 	jmp	0x3bf4	; 0x3bf4 <bootmagic>

000020a4 <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    20a4:	cf 93       	push	r28
    20a6:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    20a8:	80 91 b1 01 	lds	r24, 0x01B1
    20ac:	82 ff       	sbrs	r24, 2
    20ae:	1e c0       	rjmp	.+60     	; 0x20ec <keyboard_set_leds+0x48>
    20b0:	80 ff       	sbrs	r24, 0
    20b2:	04 c0       	rjmp	.+8      	; 0x20bc <keyboard_set_leds+0x18>
    20b4:	81 e9       	ldi	r24, 0x91	; 145
    20b6:	93 e0       	ldi	r25, 0x03	; 3
    20b8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    20bc:	80 91 b1 01 	lds	r24, 0x01B1
    20c0:	80 ff       	sbrs	r24, 0
    20c2:	0c c0       	rjmp	.+24     	; 0x20dc <keyboard_set_leds+0x38>
    20c4:	1f 92       	push	r1
    20c6:	cf 93       	push	r28
    20c8:	8c e8       	ldi	r24, 0x8C	; 140
    20ca:	93 e0       	ldi	r25, 0x03	; 3
    20cc:	9f 93       	push	r25
    20ce:	8f 93       	push	r24
    20d0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	80 91 b1 01 	lds	r24, 0x01B1
    20e0:	80 ff       	sbrs	r24, 0
    20e2:	04 c0       	rjmp	.+8      	; 0x20ec <keyboard_set_leds+0x48>
    20e4:	8a e8       	ldi	r24, 0x8A	; 138
    20e6:	93 e0       	ldi	r25, 0x03	; 3
    20e8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    led_set(leds);
    20ec:	8c 2f       	mov	r24, r28
}
    20ee:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    20f0:	0c 94 37 08 	jmp	0x106e	; 0x106e <led_set>

000020f4 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    20f4:	4f 92       	push	r4
    20f6:	5f 92       	push	r5
    20f8:	7f 92       	push	r7
    20fa:	8f 92       	push	r8
    20fc:	9f 92       	push	r9
    20fe:	af 92       	push	r10
    2100:	bf 92       	push	r11
    2102:	cf 92       	push	r12
    2104:	df 92       	push	r13
    2106:	ef 92       	push	r14
    2108:	ff 92       	push	r15
    210a:	0f 93       	push	r16
    210c:	1f 93       	push	r17
    210e:	cf 93       	push	r28
    2110:	df 93       	push	r29
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	2a 97       	sbiw	r28, 0x0a	; 10
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2122:	0e 94 c5 06 	call	0xd8a	; 0xd8a <matrix_scan>
    2126:	9c e5       	ldi	r25, 0x5C	; 92
    2128:	c9 2e       	mov	r12, r25
    212a:	91 e0       	ldi	r25, 0x01	; 1
    212c:	d9 2e       	mov	r13, r25
    212e:	00 e0       	ldi	r16, 0x00	; 0
    2130:	10 e0       	ldi	r17, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2132:	aa 24       	eor	r10, r10
    2134:	a3 94       	inc	r10
    2136:	b1 2c       	mov	r11, r1
    2138:	70 2e       	mov	r7, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    213a:	80 2f       	mov	r24, r16
    213c:	0e 94 e7 07 	call	0xfce	; 0xfce <matrix_get_row>
    2140:	4c 01       	movw	r8, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2142:	f6 01       	movw	r30, r12
    2144:	41 90       	ld	r4, Z+
    2146:	51 90       	ld	r5, Z+
    2148:	6f 01       	movw	r12, r30
    214a:	48 26       	eor	r4, r24
    214c:	59 26       	eor	r5, r25
        if (matrix_change) {
    214e:	41 14       	cp	r4, r1
    2150:	51 04       	cpc	r5, r1
    2152:	b1 f4       	brne	.+44     	; 0x2180 <keyboard_task+0x8c>
    2154:	0f 5f       	subi	r16, 0xFF	; 255
    2156:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2158:	05 30       	cpi	r16, 0x05	; 5
    215a:	11 05       	cpc	r17, r1
    215c:	69 f7       	brne	.-38     	; 0x2138 <keyboard_task+0x44>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    215e:	8f ef       	ldi	r24, 0xFF	; 255
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	8a 83       	std	Y+2, r24	; 0x02
    2164:	1b 82       	std	Y+3, r1	; 0x03
    2166:	0e 94 46 1c 	call	0x388c	; 0x388c <timer_read>
    216a:	81 60       	ori	r24, 0x01	; 1
    216c:	78 2f       	mov	r23, r24
    216e:	9d 83       	std	Y+5, r25	; 0x05
    2170:	8c 83       	std	Y+4, r24	; 0x04
    2172:	49 81       	ldd	r20, Y+1	; 0x01
    2174:	5a 81       	ldd	r21, Y+2	; 0x02
    2176:	6b 81       	ldd	r22, Y+3	; 0x03
    2178:	8d 81       	ldd	r24, Y+5	; 0x05
    217a:	0e 94 33 11 	call	0x2266	; 0x2266 <action_exec>
    217e:	3a c0       	rjmp	.+116    	; 0x21f4 <keyboard_task+0x100>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    2180:	80 91 b1 01 	lds	r24, 0x01B1
    2184:	81 fd       	sbrc	r24, 1
    2186:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <matrix_print>
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    218e:	75 01       	movw	r14, r10
    2190:	02 2e       	mov	r0, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <keyboard_task+0xa4>
    2194:	ee 0c       	add	r14, r14
    2196:	ff 1c       	adc	r15, r15
    2198:	0a 94       	dec	r0
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <keyboard_task+0xa0>
    219c:	c7 01       	movw	r24, r14
    219e:	84 21       	and	r24, r4
    21a0:	95 21       	and	r25, r5
    21a2:	89 2b       	or	r24, r25
    21a4:	09 f1       	breq	.+66     	; 0x21e8 <keyboard_task+0xf4>
                    action_exec((keyevent_t){
    21a6:	2e 83       	std	Y+6, r18	; 0x06
    21a8:	7f 82       	std	Y+7, r7	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    21aa:	8e 20       	and	r8, r14
    21ac:	9f 20       	and	r9, r15
    21ae:	91 e0       	ldi	r25, 0x01	; 1
    21b0:	89 28       	or	r8, r9
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <keyboard_task+0xc2>
    21b4:	90 e0       	ldi	r25, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    21b6:	98 87       	std	Y+8, r25	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    21b8:	0e 94 46 1c 	call	0x388c	; 0x388c <timer_read>
    21bc:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    21be:	78 2f       	mov	r23, r24
    21c0:	9a 87       	std	Y+10, r25	; 0x0a
    21c2:	89 87       	std	Y+9, r24	; 0x09
    21c4:	4e 81       	ldd	r20, Y+6	; 0x06
    21c6:	5f 81       	ldd	r21, Y+7	; 0x07
    21c8:	68 85       	ldd	r22, Y+8	; 0x08
    21ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    21cc:	0e 94 33 11 	call	0x2266	; 0x2266 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    21d0:	00 0f       	add	r16, r16
    21d2:	11 1f       	adc	r17, r17
    21d4:	f8 01       	movw	r30, r16
    21d6:	e4 5a       	subi	r30, 0xA4	; 164
    21d8:	fe 4f       	sbci	r31, 0xFE	; 254
    21da:	80 81       	ld	r24, Z
    21dc:	91 81       	ldd	r25, Z+1	; 0x01
    21de:	e8 26       	eor	r14, r24
    21e0:	f9 26       	eor	r15, r25
    21e2:	f1 82       	std	Z+1, r15	; 0x01
    21e4:	e0 82       	st	Z, r14
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    21e6:	06 c0       	rjmp	.+12     	; 0x21f4 <keyboard_task+0x100>
    21e8:	2f 5f       	subi	r18, 0xFF	; 255
    21ea:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    21ec:	2f 30       	cpi	r18, 0x0F	; 15
    21ee:	31 05       	cpc	r19, r1
    21f0:	71 f6       	brne	.-100    	; 0x218e <keyboard_task+0x9a>
    21f2:	b0 cf       	rjmp	.-160    	; 0x2154 <keyboard_task+0x60>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    21f4:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    21f8:	10 91 5b 01 	lds	r17, 0x015B
    21fc:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <host_keyboard_leds>
    2200:	18 17       	cp	r17, r24
    2202:	d9 f0       	breq	.+54     	; 0x223a <keyboard_task+0x146>
        led_status = host_keyboard_leds();
    2204:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <host_keyboard_leds>
    2208:	80 93 5b 01 	sts	0x015B, r24
        keyboard_set_leds(led_status);
    }
}
    220c:	2a 96       	adiw	r28, 0x0a	; 10
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	df 91       	pop	r29
    221a:	cf 91       	pop	r28
    221c:	1f 91       	pop	r17
    221e:	0f 91       	pop	r16
    2220:	ff 90       	pop	r15
    2222:	ef 90       	pop	r14
    2224:	df 90       	pop	r13
    2226:	cf 90       	pop	r12
    2228:	bf 90       	pop	r11
    222a:	af 90       	pop	r10
    222c:	9f 90       	pop	r9
    222e:	8f 90       	pop	r8
    2230:	7f 90       	pop	r7
    2232:	5f 90       	pop	r5
    2234:	4f 90       	pop	r4
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    2236:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <keyboard_set_leds>
    }
}
    223a:	2a 96       	adiw	r28, 0x0a	; 10
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	cd bf       	out	0x3d, r28	; 61
    2246:	df 91       	pop	r29
    2248:	cf 91       	pop	r28
    224a:	1f 91       	pop	r17
    224c:	0f 91       	pop	r16
    224e:	ff 90       	pop	r15
    2250:	ef 90       	pop	r14
    2252:	df 90       	pop	r13
    2254:	cf 90       	pop	r12
    2256:	bf 90       	pop	r11
    2258:	af 90       	pop	r10
    225a:	9f 90       	pop	r9
    225c:	8f 90       	pop	r8
    225e:	7f 90       	pop	r7
    2260:	5f 90       	pop	r5
    2262:	4f 90       	pop	r4
    2264:	08 95       	ret

00002266 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    226e:	2b 97       	sbiw	r28, 0x0b	; 11
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	de bf       	out	0x3e, r29	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	4f 83       	std	Y+7, r20	; 0x07
    227c:	58 87       	std	Y+8, r21	; 0x08
    227e:	69 87       	std	Y+9, r22	; 0x09
    2280:	7a 87       	std	Y+10, r23	; 0x0a
    2282:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    2284:	de 01       	movw	r26, r28
    2286:	11 96       	adiw	r26, 0x01	; 1
    2288:	86 e0       	ldi	r24, 0x06	; 6
    228a:	fd 01       	movw	r30, r26
    228c:	11 92       	st	Z+, r1
    228e:	8a 95       	dec	r24
    2290:	e9 f7       	brne	.-6      	; 0x228c <action_exec+0x26>
    2292:	85 e0       	ldi	r24, 0x05	; 5
    2294:	fe 01       	movw	r30, r28
    2296:	37 96       	adiw	r30, 0x07	; 7
    2298:	01 90       	ld	r0, Z+
    229a:	0d 92       	st	X+, r0
    229c:	8a 95       	dec	r24
    229e:	e1 f7       	brne	.-8      	; 0x2298 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    22a0:	49 81       	ldd	r20, Y+1	; 0x01
    22a2:	5a 81       	ldd	r21, Y+2	; 0x02
    22a4:	6b 81       	ldd	r22, Y+3	; 0x03
    22a6:	7c 81       	ldd	r23, Y+4	; 0x04
    22a8:	8d 81       	ldd	r24, Y+5	; 0x05
    22aa:	9e 81       	ldd	r25, Y+6	; 0x06
    22ac:	0e 94 45 18 	call	0x308a	; 0x308a <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    22b0:	2b 96       	adiw	r28, 0x0b	; 11
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	08 95       	ret

000022c2 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    22c2:	cf 93       	push	r28
    if (code == KC_NO) {
    22c4:	88 23       	and	r24, r24
    22c6:	09 f4       	brne	.+2      	; 0x22ca <register_code+0x8>
    22c8:	cd c0       	rjmp	.+410    	; 0x2464 <register_code+0x1a2>
    22ca:	c8 2f       	mov	r28, r24
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    22cc:	82 38       	cpi	r24, 0x82	; 130
    22ce:	59 f4       	brne	.+22     	; 0x22e6 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    22d0:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <host_keyboard_leds>
    22d4:	81 fd       	sbrc	r24, 1
    22d6:	c6 c0       	rjmp	.+396    	; 0x2464 <register_code+0x1a2>
#endif
        add_key(KC_CAPSLOCK);
    22d8:	89 e3       	ldi	r24, 0x39	; 57
    22da:	0e 94 01 1b 	call	0x3602	; 0x3602 <add_key>
        send_keyboard_report();
    22de:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    22e2:	89 e3       	ldi	r24, 0x39	; 57
    22e4:	0c c0       	rjmp	.+24     	; 0x22fe <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    22e6:	83 38       	cpi	r24, 0x83	; 131
    22e8:	79 f4       	brne	.+30     	; 0x2308 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    22ea:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <host_keyboard_leds>
    22ee:	80 fd       	sbrc	r24, 0
    22f0:	b9 c0       	rjmp	.+370    	; 0x2464 <register_code+0x1a2>
#endif
        add_key(KC_NUMLOCK);
    22f2:	83 e5       	ldi	r24, 0x53	; 83
    22f4:	0e 94 01 1b 	call	0x3602	; 0x3602 <add_key>
        send_keyboard_report();
    22f8:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    22fc:	83 e5       	ldi	r24, 0x53	; 83
    22fe:	0e 94 1e 1b 	call	0x363c	; 0x363c <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2302:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    2304:	0c 94 7a 1b 	jmp	0x36f4	; 0x36f4 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2308:	84 38       	cpi	r24, 0x84	; 132
    230a:	59 f4       	brne	.+22     	; 0x2322 <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    230c:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <host_keyboard_leds>
    2310:	82 fd       	sbrc	r24, 2
    2312:	a8 c0       	rjmp	.+336    	; 0x2464 <register_code+0x1a2>
#endif
        add_key(KC_SCROLLLOCK);
    2314:	87 e4       	ldi	r24, 0x47	; 71
    2316:	0e 94 01 1b 	call	0x3602	; 0x3602 <add_key>
        send_keyboard_report();
    231a:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    231e:	87 e4       	ldi	r24, 0x47	; 71
    2320:	ee cf       	rjmp	.-36     	; 0x22fe <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2322:	8c ef       	ldi	r24, 0xFC	; 252
    2324:	8c 0f       	add	r24, r28
    2326:	81 3a       	cpi	r24, 0xA1	; 161
    2328:	48 f4       	brcc	.+18     	; 0x233c <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    232a:	8c 2f       	mov	r24, r28
    232c:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <command_proc>
    2330:	81 11       	cpse	r24, r1
    2332:	98 c0       	rjmp	.+304    	; 0x2464 <register_code+0x1a2>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2334:	8c 2f       	mov	r24, r28
    2336:	0e 94 01 1b 	call	0x3602	; 0x3602 <add_key>
    233a:	e3 cf       	rjmp	.-58     	; 0x2302 <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    233c:	80 e2       	ldi	r24, 0x20	; 32
    233e:	8c 0f       	add	r24, r28
    2340:	88 30       	cpi	r24, 0x08	; 8
    2342:	48 f4       	brcc	.+18     	; 0x2356 <register_code+0x94>
        add_mods(MOD_BIT(code));
    2344:	c7 70       	andi	r28, 0x07	; 7
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	01 c0       	rjmp	.+2      	; 0x234c <register_code+0x8a>
    234a:	88 0f       	add	r24, r24
    234c:	ca 95       	dec	r28
    234e:	ea f7       	brpl	.-6      	; 0x234a <register_code+0x88>
    2350:	0e 94 40 1b 	call	0x3680	; 0x3680 <add_mods>
    2354:	d6 cf       	rjmp	.-84     	; 0x2302 <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2356:	8b e5       	ldi	r24, 0x5B	; 91
    2358:	8c 0f       	add	r24, r28
    235a:	83 30       	cpi	r24, 0x03	; 3
    235c:	78 f4       	brcc	.+30     	; 0x237c <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    235e:	c5 3a       	cpi	r28, 0xA5	; 165
    2360:	29 f0       	breq	.+10     	; 0x236c <register_code+0xaa>
    2362:	c6 3a       	cpi	r28, 0xA6	; 166
    2364:	31 f0       	breq	.+12     	; 0x2372 <register_code+0xb0>
    2366:	83 e8       	ldi	r24, 0x83	; 131
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	05 c0       	rjmp	.+10     	; 0x2376 <register_code+0xb4>
    236c:	81 e8       	ldi	r24, 0x81	; 129
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <register_code+0xb4>
    2372:	82 e8       	ldi	r24, 0x82	; 130
    2374:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2376:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    2378:	0c 94 1d 10 	jmp	0x203a	; 0x203a <host_system_send>
    }
    else if IS_CONSUMER(code) {
    237c:	88 e5       	ldi	r24, 0x58	; 88
    237e:	8c 0f       	add	r24, r28
    2380:	85 31       	cpi	r24, 0x15	; 21
    2382:	08 f0       	brcs	.+2      	; 0x2386 <register_code+0xc4>
    2384:	6f c0       	rjmp	.+222    	; 0x2464 <register_code+0x1a2>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2386:	c8 3a       	cpi	r28, 0xA8	; 168
    2388:	61 f1       	breq	.+88     	; 0x23e2 <register_code+0x120>
    238a:	c9 3a       	cpi	r28, 0xA9	; 169
    238c:	69 f1       	breq	.+90     	; 0x23e8 <register_code+0x126>
    238e:	ca 3a       	cpi	r28, 0xAA	; 170
    2390:	71 f1       	breq	.+92     	; 0x23ee <register_code+0x12c>
    2392:	cb 3a       	cpi	r28, 0xAB	; 171
    2394:	79 f1       	breq	.+94     	; 0x23f4 <register_code+0x132>
    2396:	cc 3a       	cpi	r28, 0xAC	; 172
    2398:	81 f1       	breq	.+96     	; 0x23fa <register_code+0x138>
    239a:	cd 3a       	cpi	r28, 0xAD	; 173
    239c:	89 f1       	breq	.+98     	; 0x2400 <register_code+0x13e>
    239e:	ce 3a       	cpi	r28, 0xAE	; 174
    23a0:	91 f1       	breq	.+100    	; 0x2406 <register_code+0x144>
    23a2:	cf 3a       	cpi	r28, 0xAF	; 175
    23a4:	99 f1       	breq	.+102    	; 0x240c <register_code+0x14a>
    23a6:	c1 3b       	cpi	r28, 0xB1	; 177
    23a8:	a1 f1       	breq	.+104    	; 0x2412 <register_code+0x150>
    23aa:	c0 3b       	cpi	r28, 0xB0	; 176
    23ac:	a9 f1       	breq	.+106    	; 0x2418 <register_code+0x156>
    23ae:	c2 3b       	cpi	r28, 0xB2	; 178
    23b0:	b1 f1       	breq	.+108    	; 0x241e <register_code+0x15c>
    23b2:	c3 3b       	cpi	r28, 0xB3	; 179
    23b4:	b9 f1       	breq	.+110    	; 0x2424 <register_code+0x162>
    23b6:	c4 3b       	cpi	r28, 0xB4	; 180
    23b8:	c1 f1       	breq	.+112    	; 0x242a <register_code+0x168>
    23ba:	c5 3b       	cpi	r28, 0xB5	; 181
    23bc:	c9 f1       	breq	.+114    	; 0x2430 <register_code+0x16e>
    23be:	c6 3b       	cpi	r28, 0xB6	; 182
    23c0:	d1 f1       	breq	.+116    	; 0x2436 <register_code+0x174>
    23c2:	c7 3b       	cpi	r28, 0xB7	; 183
    23c4:	d9 f1       	breq	.+118    	; 0x243c <register_code+0x17a>
    23c6:	c8 3b       	cpi	r28, 0xB8	; 184
    23c8:	e1 f1       	breq	.+120    	; 0x2442 <register_code+0x180>
    23ca:	c9 3b       	cpi	r28, 0xB9	; 185
    23cc:	e9 f1       	breq	.+122    	; 0x2448 <register_code+0x186>
    23ce:	ca 3b       	cpi	r28, 0xBA	; 186
    23d0:	f1 f1       	breq	.+124    	; 0x244e <register_code+0x18c>
    23d2:	cb 3b       	cpi	r28, 0xBB	; 187
    23d4:	f9 f1       	breq	.+126    	; 0x2454 <register_code+0x192>
    23d6:	cc 3b       	cpi	r28, 0xBC	; 188
    23d8:	09 f4       	brne	.+2      	; 0x23dc <register_code+0x11a>
    23da:	3f c0       	rjmp	.+126    	; 0x245a <register_code+0x198>
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	3e c0       	rjmp	.+124    	; 0x245e <register_code+0x19c>
    23e2:	82 ee       	ldi	r24, 0xE2	; 226
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	3b c0       	rjmp	.+118    	; 0x245e <register_code+0x19c>
    23e8:	89 ee       	ldi	r24, 0xE9	; 233
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	38 c0       	rjmp	.+112    	; 0x245e <register_code+0x19c>
    23ee:	8a ee       	ldi	r24, 0xEA	; 234
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	35 c0       	rjmp	.+106    	; 0x245e <register_code+0x19c>
    23f4:	85 eb       	ldi	r24, 0xB5	; 181
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	32 c0       	rjmp	.+100    	; 0x245e <register_code+0x19c>
    23fa:	86 eb       	ldi	r24, 0xB6	; 182
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	2f c0       	rjmp	.+94     	; 0x245e <register_code+0x19c>
    2400:	83 eb       	ldi	r24, 0xB3	; 179
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	2c c0       	rjmp	.+88     	; 0x245e <register_code+0x19c>
    2406:	84 eb       	ldi	r24, 0xB4	; 180
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	29 c0       	rjmp	.+82     	; 0x245e <register_code+0x19c>
    240c:	87 eb       	ldi	r24, 0xB7	; 183
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	26 c0       	rjmp	.+76     	; 0x245e <register_code+0x19c>
    2412:	8c ec       	ldi	r24, 0xCC	; 204
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	23 c0       	rjmp	.+70     	; 0x245e <register_code+0x19c>
    2418:	8d ec       	ldi	r24, 0xCD	; 205
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	20 c0       	rjmp	.+64     	; 0x245e <register_code+0x19c>
    241e:	83 e8       	ldi	r24, 0x83	; 131
    2420:	91 e0       	ldi	r25, 0x01	; 1
    2422:	1d c0       	rjmp	.+58     	; 0x245e <register_code+0x19c>
    2424:	8a e8       	ldi	r24, 0x8A	; 138
    2426:	91 e0       	ldi	r25, 0x01	; 1
    2428:	1a c0       	rjmp	.+52     	; 0x245e <register_code+0x19c>
    242a:	82 e9       	ldi	r24, 0x92	; 146
    242c:	91 e0       	ldi	r25, 0x01	; 1
    242e:	17 c0       	rjmp	.+46     	; 0x245e <register_code+0x19c>
    2430:	84 e9       	ldi	r24, 0x94	; 148
    2432:	91 e0       	ldi	r25, 0x01	; 1
    2434:	14 c0       	rjmp	.+40     	; 0x245e <register_code+0x19c>
    2436:	81 e2       	ldi	r24, 0x21	; 33
    2438:	92 e0       	ldi	r25, 0x02	; 2
    243a:	11 c0       	rjmp	.+34     	; 0x245e <register_code+0x19c>
    243c:	83 e2       	ldi	r24, 0x23	; 35
    243e:	92 e0       	ldi	r25, 0x02	; 2
    2440:	0e c0       	rjmp	.+28     	; 0x245e <register_code+0x19c>
    2442:	84 e2       	ldi	r24, 0x24	; 36
    2444:	92 e0       	ldi	r25, 0x02	; 2
    2446:	0b c0       	rjmp	.+22     	; 0x245e <register_code+0x19c>
    2448:	85 e2       	ldi	r24, 0x25	; 37
    244a:	92 e0       	ldi	r25, 0x02	; 2
    244c:	08 c0       	rjmp	.+16     	; 0x245e <register_code+0x19c>
    244e:	86 e2       	ldi	r24, 0x26	; 38
    2450:	92 e0       	ldi	r25, 0x02	; 2
    2452:	05 c0       	rjmp	.+10     	; 0x245e <register_code+0x19c>
    2454:	87 e2       	ldi	r24, 0x27	; 39
    2456:	92 e0       	ldi	r25, 0x02	; 2
    2458:	02 c0       	rjmp	.+4      	; 0x245e <register_code+0x19c>
    245a:	8a e2       	ldi	r24, 0x2A	; 42
    245c:	92 e0       	ldi	r25, 0x02	; 2
    }
}
    245e:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    2460:	0c 94 33 10 	jmp	0x2066	; 0x2066 <host_consumer_send>
    }
}
    2464:	cf 91       	pop	r28
    2466:	08 95       	ret

00002468 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2468:	88 23       	and	r24, r24
    246a:	09 f4       	brne	.+2      	; 0x246e <unregister_code+0x6>
    246c:	4b c0       	rjmp	.+150    	; 0x2504 <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    246e:	82 38       	cpi	r24, 0x82	; 130
    2470:	59 f4       	brne	.+22     	; 0x2488 <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    2472:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <host_keyboard_leds>
    2476:	81 ff       	sbrs	r24, 1
    2478:	45 c0       	rjmp	.+138    	; 0x2504 <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    247a:	89 e3       	ldi	r24, 0x39	; 57
    247c:	0e 94 01 1b 	call	0x3602	; 0x3602 <add_key>
        send_keyboard_report();
    2480:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2484:	89 e3       	ldi	r24, 0x39	; 57
    2486:	0c c0       	rjmp	.+24     	; 0x24a0 <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2488:	83 38       	cpi	r24, 0x83	; 131
    248a:	71 f4       	brne	.+28     	; 0x24a8 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    248c:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <host_keyboard_leds>
    2490:	80 ff       	sbrs	r24, 0
    2492:	38 c0       	rjmp	.+112    	; 0x2504 <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    2494:	83 e5       	ldi	r24, 0x53	; 83
    2496:	0e 94 01 1b 	call	0x3602	; 0x3602 <add_key>
        send_keyboard_report();
    249a:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    249e:	83 e5       	ldi	r24, 0x53	; 83
    24a0:	0e 94 1e 1b 	call	0x363c	; 0x363c <del_key>
        send_keyboard_report();
    24a4:	0c 94 7a 1b 	jmp	0x36f4	; 0x36f4 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    24a8:	84 38       	cpi	r24, 0x84	; 132
    24aa:	59 f4       	brne	.+22     	; 0x24c2 <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    24ac:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <host_keyboard_leds>
    24b0:	82 ff       	sbrs	r24, 2
    24b2:	28 c0       	rjmp	.+80     	; 0x2504 <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    24b4:	87 e4       	ldi	r24, 0x47	; 71
    24b6:	0e 94 01 1b 	call	0x3602	; 0x3602 <add_key>
        send_keyboard_report();
    24ba:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    24be:	87 e4       	ldi	r24, 0x47	; 71
    24c0:	ef cf       	rjmp	.-34     	; 0x24a0 <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    24c2:	9c ef       	ldi	r25, 0xFC	; 252
    24c4:	98 0f       	add	r25, r24
    24c6:	91 3a       	cpi	r25, 0xA1	; 161
    24c8:	58 f3       	brcs	.-42     	; 0x24a0 <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    24ca:	90 e2       	ldi	r25, 0x20	; 32
    24cc:	98 0f       	add	r25, r24
    24ce:	98 30       	cpi	r25, 0x08	; 8
    24d0:	50 f4       	brcc	.+20     	; 0x24e6 <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    24d2:	87 70       	andi	r24, 0x07	; 7
    24d4:	91 e0       	ldi	r25, 0x01	; 1
    24d6:	01 c0       	rjmp	.+2      	; 0x24da <unregister_code+0x72>
    24d8:	99 0f       	add	r25, r25
    24da:	8a 95       	dec	r24
    24dc:	ea f7       	brpl	.-6      	; 0x24d8 <unregister_code+0x70>
    24de:	89 2f       	mov	r24, r25
    24e0:	0e 94 46 1b 	call	0x368c	; 0x368c <del_mods>
    24e4:	df cf       	rjmp	.-66     	; 0x24a4 <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    24e6:	9b e5       	ldi	r25, 0x5B	; 91
    24e8:	98 0f       	add	r25, r24
    24ea:	93 30       	cpi	r25, 0x03	; 3
    24ec:	20 f4       	brcc	.+8      	; 0x24f6 <unregister_code+0x8e>
        host_system_send(0);
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	0c 94 1d 10 	jmp	0x203a	; 0x203a <host_system_send>
    }
    else if IS_CONSUMER(code) {
    24f6:	88 5a       	subi	r24, 0xA8	; 168
    24f8:	85 31       	cpi	r24, 0x15	; 21
    24fa:	20 f4       	brcc	.+8      	; 0x2504 <unregister_code+0x9c>
        host_consumer_send(0);
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	0c 94 33 10 	jmp	0x2066	; 0x2066 <host_consumer_send>
    2504:	08 95       	ret

00002506 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2506:	88 23       	and	r24, r24
    2508:	21 f0       	breq	.+8      	; 0x2512 <register_mods+0xc>
        add_mods(mods);
    250a:	0e 94 40 1b 	call	0x3680	; 0x3680 <add_mods>
        send_keyboard_report();
    250e:	0c 94 7a 1b 	jmp	0x36f4	; 0x36f4 <send_keyboard_report>
    2512:	08 95       	ret

00002514 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2514:	88 23       	and	r24, r24
    2516:	21 f0       	breq	.+8      	; 0x2520 <unregister_mods+0xc>
        del_mods(mods);
    2518:	0e 94 46 1b 	call	0x368c	; 0x368c <del_mods>
        send_keyboard_report();
    251c:	0c 94 7a 1b 	jmp	0x36f4	; 0x36f4 <send_keyboard_report>
    2520:	08 95       	ret

00002522 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    2522:	cf 92       	push	r12
    2524:	df 92       	push	r13
    2526:	ef 92       	push	r14
    2528:	ff 92       	push	r15
    252a:	0f 93       	push	r16
    252c:	1f 93       	push	r17
    252e:	cf 93       	push	r28
    2530:	df 93       	push	r29
    2532:	00 d0       	rcall	.+0      	; 0x2534 <process_action+0x12>
    2534:	00 d0       	rcall	.+0      	; 0x2536 <process_action+0x14>
    2536:	00 d0       	rcall	.+0      	; 0x2538 <process_action+0x16>
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    keyevent_t event = record->event;
    253c:	25 e0       	ldi	r18, 0x05	; 5
    253e:	fc 01       	movw	r30, r24
    2540:	de 01       	movw	r26, r28
    2542:	11 96       	adiw	r26, 0x01	; 1
    2544:	01 90       	ld	r0, Z+
    2546:	0d 92       	st	X+, r0
    2548:	2a 95       	dec	r18
    254a:	e1 f7       	brne	.-8      	; 0x2544 <process_action+0x22>
    254c:	fc 01       	movw	r30, r24
    254e:	40 81       	ld	r20, Z
    2550:	31 81       	ldd	r19, Z+1	; 0x01
    2552:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2554:	25 81       	ldd	r18, Z+5	; 0x05
    2556:	22 95       	swap	r18
    2558:	2f 70       	andi	r18, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    255a:	63 81       	ldd	r22, Z+3	; 0x03
    255c:	74 81       	ldd	r23, Z+4	; 0x04
    255e:	67 2b       	or	r22, r23
    2560:	09 f4       	brne	.+2      	; 0x2564 <process_action+0x42>
    2562:	d8 c2       	rjmp	.+1456   	; 0x2b14 <process_action+0x5f2>
    2564:	3f 3f       	cpi	r19, 0xFF	; 255
    2566:	19 f4       	brne	.+6      	; 0x256e <process_action+0x4c>
#endif

    if (IS_NOEVENT(event)) { return; }
    2568:	4f 3f       	cpi	r20, 0xFF	; 255
    256a:	09 f4       	brne	.+2      	; 0x256e <process_action+0x4c>
    256c:	d3 c2       	rjmp	.+1446   	; 0x2b14 <process_action+0x5f2>
    256e:	6c 01       	movw	r12, r24

    action_t action = layer_switch_get_action(event.key);
    2570:	49 83       	std	Y+1, r20	; 0x01
    2572:	3a 83       	std	Y+2, r19	; 0x02
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	9a 81       	ldd	r25, Y+2	; 0x02
    2578:	2e 83       	std	Y+6, r18	; 0x06
    257a:	0e 94 c0 1a 	call	0x3580	; 0x3580 <layer_switch_get_action>
    257e:	18 2f       	mov	r17, r24
    2580:	09 2f       	mov	r16, r25
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2582:	0e 94 bf 1a 	call	0x357e	; 0x357e <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2586:	0e 94 86 19 	call	0x330c	; 0x330c <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    258a:	e0 2f       	mov	r30, r16
    258c:	e2 95       	swap	r30
    258e:	ef 70       	andi	r30, 0x0F	; 15
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	e0 5a       	subi	r30, 0xA0	; 160
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	2e 81       	ldd	r18, Y+6	; 0x06
    2598:	0c 94 72 28 	jmp	0x50e4	; 0x50e4 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    259c:	80 2f       	mov	r24, r16
    259e:	80 7f       	andi	r24, 0xF0	; 240
    25a0:	90 2f       	mov	r25, r16
    25a2:	9f 70       	andi	r25, 0x0F	; 15
    25a4:	09 2f       	mov	r16, r25
    25a6:	88 23       	and	r24, r24
    25a8:	11 f0       	breq	.+4      	; 0x25ae <process_action+0x8c>
    25aa:	02 95       	swap	r16
    25ac:	00 7f       	andi	r16, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    25ae:	ff 20       	and	r15, r15
    25b0:	49 f0       	breq	.+18     	; 0x25c4 <process_action+0xa2>
                    if (mods) {
    25b2:	00 23       	and	r16, r16
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <process_action+0x96>
    25b6:	5f c2       	rjmp	.+1214   	; 0x2a76 <process_action+0x554>
                        add_weak_mods(mods);
    25b8:	80 2f       	mov	r24, r16
    25ba:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <add_weak_mods>
                        send_keyboard_report();
    25be:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <send_keyboard_report>
    25c2:	59 c2       	rjmp	.+1202   	; 0x2a76 <process_action+0x554>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    25c4:	81 2f       	mov	r24, r17
    25c6:	0e 94 34 12 	call	0x2468	; 0x2468 <unregister_code>
                    if (mods) {
    25ca:	00 23       	and	r16, r16
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <process_action+0xae>
    25ce:	a2 c2       	rjmp	.+1348   	; 0x2b14 <process_action+0x5f2>
                        del_weak_mods(mods);
    25d0:	80 2f       	mov	r24, r16
    25d2:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    25d6:	26 96       	adiw	r28, 0x06	; 6
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	cd bf       	out	0x3d, r28	; 61
    25e2:	df 91       	pop	r29
    25e4:	cf 91       	pop	r28
    25e6:	1f 91       	pop	r17
    25e8:	0f 91       	pop	r16
    25ea:	ff 90       	pop	r15
    25ec:	ef 90       	pop	r14
    25ee:	df 90       	pop	r13
    25f0:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    25f2:	0c 94 7a 1b 	jmp	0x36f4	; 0x36f4 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    25f6:	80 2f       	mov	r24, r16
    25f8:	80 7f       	andi	r24, 0xF0	; 240
    25fa:	90 2f       	mov	r25, r16
    25fc:	9f 70       	andi	r25, 0x0F	; 15
    25fe:	09 2f       	mov	r16, r25
    2600:	80 32       	cpi	r24, 0x20	; 32
    2602:	11 f0       	breq	.+4      	; 0x2608 <process_action+0xe6>
    2604:	02 95       	swap	r16
    2606:	00 7f       	andi	r16, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    2608:	11 23       	and	r17, r17
    260a:	19 f0       	breq	.+6      	; 0x2612 <process_action+0xf0>
    260c:	11 30       	cpi	r17, 0x01	; 1
    260e:	01 f1       	breq	.+64     	; 0x2650 <process_action+0x12e>
    2610:	29 c0       	rjmp	.+82     	; 0x2664 <process_action+0x142>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2612:	ff 20       	and	r15, r15
    2614:	a9 f0       	breq	.+42     	; 0x2640 <process_action+0x11e>
                            if (tap_count == 0) {
                                register_mods(mods);
    2616:	80 2f       	mov	r24, r16
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    2618:	22 23       	and	r18, r18
    261a:	49 f1       	breq	.+82     	; 0x266e <process_action+0x14c>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    261c:	21 30       	cpi	r18, 0x01	; 1
    261e:	39 f5       	brne	.+78     	; 0x266e <process_action+0x14c>
            break;
#endif
        default:
            break;
    }
}
    2620:	26 96       	adiw	r28, 0x06	; 6
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	f8 94       	cli
    2626:	de bf       	out	0x3e, r29	; 62
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	cd bf       	out	0x3d, r28	; 61
    262c:	df 91       	pop	r29
    262e:	cf 91       	pop	r28
    2630:	1f 91       	pop	r17
    2632:	0f 91       	pop	r16
    2634:	ff 90       	pop	r15
    2636:	ef 90       	pop	r14
    2638:	df 90       	pop	r13
    263a:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    263c:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2640:	22 23       	and	r18, r18
    2642:	19 f0       	breq	.+6      	; 0x264a <process_action+0x128>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2644:	21 30       	cpi	r18, 0x01	; 1
    2646:	09 f4       	brne	.+2      	; 0x264a <process_action+0x128>
    2648:	65 c2       	rjmp	.+1226   	; 0x2b14 <process_action+0x5f2>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    264a:	0e 94 66 1b 	call	0x36cc	; 0x36cc <clear_oneshot_mods>
    264e:	2c c0       	rjmp	.+88     	; 0x26a8 <process_action+0x186>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2650:	ff 20       	and	r15, r15
    2652:	e9 f0       	breq	.+58     	; 0x268e <process_action+0x16c>
                            if (tap_count <= TAPPING_TOGGLE) {
    2654:	26 30       	cpi	r18, 0x06	; 6
    2656:	08 f0       	brcs	.+2      	; 0x265a <process_action+0x138>
    2658:	5d c2       	rjmp	.+1210   	; 0x2b14 <process_action+0x5f2>
                                if (mods & get_mods()) {
    265a:	0e 94 3d 1b 	call	0x367a	; 0x367a <get_mods>
    265e:	80 23       	and	r24, r16
    2660:	29 f0       	breq	.+10     	; 0x266c <process_action+0x14a>
    2662:	22 c0       	rjmp	.+68     	; 0x26a8 <process_action+0x186>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2664:	ff 20       	and	r15, r15
    2666:	f1 f0       	breq	.+60     	; 0x26a4 <process_action+0x182>
                            if (tap_count > 0) {
    2668:	21 11       	cpse	r18, r1
    266a:	15 c0       	rjmp	.+42     	; 0x2696 <process_action+0x174>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    266c:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    266e:	26 96       	adiw	r28, 0x06	; 6
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	ff 90       	pop	r15
    2684:	ef 90       	pop	r14
    2686:	df 90       	pop	r13
    2688:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    268a:	0c 94 83 12 	jmp	0x2506	; 0x2506 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    268e:	25 30       	cpi	r18, 0x05	; 5
    2690:	08 f0       	brcs	.+2      	; 0x2694 <process_action+0x172>
    2692:	40 c2       	rjmp	.+1152   	; 0x2b14 <process_action+0x5f2>
    2694:	09 c0       	rjmp	.+18     	; 0x26a8 <process_action+0x186>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    2696:	f6 01       	movw	r30, r12
    2698:	85 81       	ldd	r24, Z+5	; 0x05
    269a:	80 ff       	sbrs	r24, 0
    269c:	ec c1       	rjmp	.+984    	; 0x2a76 <process_action+0x554>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    269e:	8f 70       	andi	r24, 0x0F	; 15
    26a0:	85 83       	std	Z+5, r24	; 0x05
    26a2:	e4 cf       	rjmp	.-56     	; 0x266c <process_action+0x14a>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    26a4:	21 11       	cpse	r18, r1
    26a6:	fb c1       	rjmp	.+1014   	; 0x2a9e <process_action+0x57c>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    26a8:	80 2f       	mov	r24, r16
    26aa:	69 c1       	rjmp	.+722    	; 0x297e <process_action+0x45c>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    26ac:	20 2f       	mov	r18, r16
    26ae:	26 95       	lsr	r18
    26b0:	26 95       	lsr	r18
    26b2:	23 70       	andi	r18, 0x03	; 3
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	21 15       	cp	r18, r1
    26b8:	31 05       	cpc	r19, r1
    26ba:	21 f0       	breq	.+8      	; 0x26c4 <process_action+0x1a2>
    26bc:	21 30       	cpi	r18, 0x01	; 1
    26be:	31 05       	cpc	r19, r1
    26c0:	c9 f0       	breq	.+50     	; 0x26f4 <process_action+0x1d2>
    26c2:	28 c2       	rjmp	.+1104   	; 0x2b14 <process_action+0x5f2>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    26c4:	ff 20       	and	r15, r15
    26c6:	21 f0       	breq	.+8      	; 0x26d0 <process_action+0x1ae>
                        host_system_send(action.usage.code);
    26c8:	81 2f       	mov	r24, r17
    26ca:	90 2f       	mov	r25, r16
    26cc:	93 70       	andi	r25, 0x03	; 3
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <process_action+0x1b2>
                    } else {
                        host_system_send(0);
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    26d4:	26 96       	adiw	r28, 0x06	; 6
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	df 91       	pop	r29
    26e2:	cf 91       	pop	r28
    26e4:	1f 91       	pop	r17
    26e6:	0f 91       	pop	r16
    26e8:	ff 90       	pop	r15
    26ea:	ef 90       	pop	r14
    26ec:	df 90       	pop	r13
    26ee:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    26f0:	0c 94 1d 10 	jmp	0x203a	; 0x203a <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    26f4:	ff 20       	and	r15, r15
    26f6:	21 f0       	breq	.+8      	; 0x2700 <process_action+0x1de>
                        host_consumer_send(action.usage.code);
    26f8:	81 2f       	mov	r24, r17
    26fa:	90 2f       	mov	r25, r16
    26fc:	93 70       	andi	r25, 0x03	; 3
    26fe:	02 c0       	rjmp	.+4      	; 0x2704 <process_action+0x1e2>
                    } else {
                        host_consumer_send(0);
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2704:	26 96       	adiw	r28, 0x06	; 6
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	1f 91       	pop	r17
    2716:	0f 91       	pop	r16
    2718:	ff 90       	pop	r15
    271a:	ef 90       	pop	r14
    271c:	df 90       	pop	r13
    271e:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    2720:	0c 94 33 10 	jmp	0x2066	; 0x2066 <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2724:	81 2f       	mov	r24, r17
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2726:	ff 20       	and	r15, r15
    2728:	19 f0       	breq	.+6      	; 0x2730 <process_action+0x20e>
                mousekey_on(action.key.code);
    272a:	0e 94 01 20 	call	0x4002	; 0x4002 <mousekey_on>
    272e:	02 c0       	rjmp	.+4      	; 0x2734 <process_action+0x212>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2730:	0e 94 69 20 	call	0x40d2	; 0x40d2 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    2734:	26 96       	adiw	r28, 0x06	; 6
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	cd bf       	out	0x3d, r28	; 61
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	1f 91       	pop	r17
    2746:	0f 91       	pop	r16
    2748:	ff 90       	pop	r15
    274a:	ef 90       	pop	r14
    274c:	df 90       	pop	r13
    274e:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    2750:	0c 94 ee 20 	jmp	0x41dc	; 0x41dc <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2754:	80 2f       	mov	r24, r16
    2756:	83 70       	andi	r24, 0x03	; 3
    2758:	09 f0       	breq	.+2      	; 0x275c <process_action+0x23a>
    275a:	78 c0       	rjmp	.+240    	; 0x284c <process_action+0x32a>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    275c:	f1 10       	cpse	r15, r1
    275e:	da c1       	rjmp	.+948    	; 0x2b14 <process_action+0x5f2>
                    uint8_t shift = action.layer_bitop.part*4;
    2760:	81 2f       	mov	r24, r17
    2762:	82 95       	swap	r24
    2764:	86 95       	lsr	r24
    2766:	87 70       	andi	r24, 0x07	; 7
    2768:	88 0f       	add	r24, r24
    276a:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    276c:	91 2f       	mov	r25, r17
    276e:	9f 70       	andi	r25, 0x0F	; 15
    2770:	c9 2e       	mov	r12, r25
    2772:	d1 2c       	mov	r13, r1
    2774:	e1 2c       	mov	r14, r1
    2776:	f1 2c       	mov	r15, r1
    2778:	08 2e       	mov	r0, r24
    277a:	04 c0       	rjmp	.+8      	; 0x2784 <process_action+0x262>
    277c:	cc 0c       	add	r12, r12
    277e:	dd 1c       	adc	r13, r13
    2780:	ee 1c       	adc	r14, r14
    2782:	ff 1c       	adc	r15, r15
    2784:	0a 94       	dec	r0
    2786:	d2 f7       	brpl	.-12     	; 0x277c <process_action+0x25a>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2788:	14 ff       	sbrs	r17, 4
    278a:	12 c0       	rjmp	.+36     	; 0x27b0 <process_action+0x28e>
    278c:	4f e0       	ldi	r20, 0x0F	; 15
    278e:	50 e0       	ldi	r21, 0x00	; 0
    2790:	60 e0       	ldi	r22, 0x00	; 0
    2792:	70 e0       	ldi	r23, 0x00	; 0
    2794:	04 c0       	rjmp	.+8      	; 0x279e <process_action+0x27c>
    2796:	44 0f       	add	r20, r20
    2798:	55 1f       	adc	r21, r21
    279a:	66 1f       	adc	r22, r22
    279c:	77 1f       	adc	r23, r23
    279e:	8a 95       	dec	r24
    27a0:	d2 f7       	brpl	.-12     	; 0x2796 <process_action+0x274>
    27a2:	cb 01       	movw	r24, r22
    27a4:	ba 01       	movw	r22, r20
    27a6:	60 95       	com	r22
    27a8:	70 95       	com	r23
    27aa:	80 95       	com	r24
    27ac:	90 95       	com	r25
    27ae:	03 c0       	rjmp	.+6      	; 0x27b6 <process_action+0x294>
    27b0:	60 e0       	ldi	r22, 0x00	; 0
    27b2:	70 e0       	ldi	r23, 0x00	; 0
    27b4:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    27b6:	20 2f       	mov	r18, r16
    27b8:	26 95       	lsr	r18
    27ba:	26 95       	lsr	r18
    27bc:	23 70       	andi	r18, 0x03	; 3
    27be:	42 2f       	mov	r20, r18
    27c0:	50 e0       	ldi	r21, 0x00	; 0
    27c2:	42 30       	cpi	r20, 0x02	; 2
    27c4:	51 05       	cpc	r21, r1
    27c6:	d1 f0       	breq	.+52     	; 0x27fc <process_action+0x2da>
    27c8:	43 30       	cpi	r20, 0x03	; 3
    27ca:	51 05       	cpc	r21, r1
    27cc:	59 f1       	breq	.+86     	; 0x2824 <process_action+0x302>
    27ce:	6c 29       	or	r22, r12
    27d0:	7d 29       	or	r23, r13
    27d2:	8e 29       	or	r24, r14
    27d4:	9f 29       	or	r25, r15
    27d6:	41 30       	cpi	r20, 0x01	; 1
    27d8:	51 05       	cpc	r21, r1
    27da:	41 f1       	breq	.+80     	; 0x282c <process_action+0x30a>
            break;
#endif
        default:
            break;
    }
}
    27dc:	26 96       	adiw	r28, 0x06	; 6
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	1f 91       	pop	r17
    27ee:	0f 91       	pop	r16
    27f0:	ff 90       	pop	r15
    27f2:	ef 90       	pop	r14
    27f4:	df 90       	pop	r13
    27f6:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    27f8:	0c 94 ad 19 	jmp	0x335a	; 0x335a <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    27fc:	6c 29       	or	r22, r12
    27fe:	7d 29       	or	r23, r13
    2800:	8e 29       	or	r24, r14
    2802:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2804:	26 96       	adiw	r28, 0x06	; 6
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	cd bf       	out	0x3d, r28	; 61
    2810:	df 91       	pop	r29
    2812:	cf 91       	pop	r28
    2814:	1f 91       	pop	r17
    2816:	0f 91       	pop	r16
    2818:	ff 90       	pop	r15
    281a:	ef 90       	pop	r14
    281c:	df 90       	pop	r13
    281e:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2820:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2824:	0e 94 ad 19 	call	0x335a	; 0x335a <default_layer_and>
    2828:	c7 01       	movw	r24, r14
    282a:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    282c:	26 96       	adiw	r28, 0x06	; 6
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	f8 94       	cli
    2832:	de bf       	out	0x3e, r29	; 62
    2834:	0f be       	out	0x3f, r0	; 63
    2836:	cd bf       	out	0x3d, r28	; 61
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	1f 91       	pop	r17
    283e:	0f 91       	pop	r16
    2840:	ff 90       	pop	r15
    2842:	ef 90       	pop	r14
    2844:	df 90       	pop	r13
    2846:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2848:	0c 94 91 19 	jmp	0x3322	; 0x3322 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    284c:	ff 20       	and	r15, r15
    284e:	19 f0       	breq	.+6      	; 0x2856 <process_action+0x334>
    2850:	80 2f       	mov	r24, r16
    2852:	81 70       	andi	r24, 0x01	; 1
    2854:	01 c0       	rjmp	.+2      	; 0x2858 <process_action+0x336>
    2856:	86 95       	lsr	r24
    2858:	88 23       	and	r24, r24
    285a:	09 f4       	brne	.+2      	; 0x285e <process_action+0x33c>
    285c:	5b c1       	rjmp	.+694    	; 0x2b14 <process_action+0x5f2>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    285e:	81 2f       	mov	r24, r17
    2860:	82 95       	swap	r24
    2862:	86 95       	lsr	r24
    2864:	87 70       	andi	r24, 0x07	; 7
    2866:	88 0f       	add	r24, r24
    2868:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    286a:	91 2f       	mov	r25, r17
    286c:	9f 70       	andi	r25, 0x0F	; 15
    286e:	c9 2e       	mov	r12, r25
    2870:	d1 2c       	mov	r13, r1
    2872:	e1 2c       	mov	r14, r1
    2874:	f1 2c       	mov	r15, r1
    2876:	08 2e       	mov	r0, r24
    2878:	04 c0       	rjmp	.+8      	; 0x2882 <process_action+0x360>
    287a:	cc 0c       	add	r12, r12
    287c:	dd 1c       	adc	r13, r13
    287e:	ee 1c       	adc	r14, r14
    2880:	ff 1c       	adc	r15, r15
    2882:	0a 94       	dec	r0
    2884:	d2 f7       	brpl	.-12     	; 0x287a <process_action+0x358>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2886:	14 ff       	sbrs	r17, 4
    2888:	12 c0       	rjmp	.+36     	; 0x28ae <process_action+0x38c>
    288a:	4f e0       	ldi	r20, 0x0F	; 15
    288c:	50 e0       	ldi	r21, 0x00	; 0
    288e:	60 e0       	ldi	r22, 0x00	; 0
    2890:	70 e0       	ldi	r23, 0x00	; 0
    2892:	04 c0       	rjmp	.+8      	; 0x289c <process_action+0x37a>
    2894:	44 0f       	add	r20, r20
    2896:	55 1f       	adc	r21, r21
    2898:	66 1f       	adc	r22, r22
    289a:	77 1f       	adc	r23, r23
    289c:	8a 95       	dec	r24
    289e:	d2 f7       	brpl	.-12     	; 0x2894 <process_action+0x372>
    28a0:	cb 01       	movw	r24, r22
    28a2:	ba 01       	movw	r22, r20
    28a4:	60 95       	com	r22
    28a6:	70 95       	com	r23
    28a8:	80 95       	com	r24
    28aa:	90 95       	com	r25
    28ac:	03 c0       	rjmp	.+6      	; 0x28b4 <process_action+0x392>
    28ae:	60 e0       	ldi	r22, 0x00	; 0
    28b0:	70 e0       	ldi	r23, 0x00	; 0
    28b2:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    28b4:	20 2f       	mov	r18, r16
    28b6:	26 95       	lsr	r18
    28b8:	26 95       	lsr	r18
    28ba:	23 70       	andi	r18, 0x03	; 3
    28bc:	42 2f       	mov	r20, r18
    28be:	50 e0       	ldi	r21, 0x00	; 0
    28c0:	42 30       	cpi	r20, 0x02	; 2
    28c2:	51 05       	cpc	r21, r1
    28c4:	d1 f0       	breq	.+52     	; 0x28fa <process_action+0x3d8>
    28c6:	43 30       	cpi	r20, 0x03	; 3
    28c8:	51 05       	cpc	r21, r1
    28ca:	59 f1       	breq	.+86     	; 0x2922 <process_action+0x400>
    28cc:	6c 29       	or	r22, r12
    28ce:	7d 29       	or	r23, r13
    28d0:	8e 29       	or	r24, r14
    28d2:	9f 29       	or	r25, r15
    28d4:	41 30       	cpi	r20, 0x01	; 1
    28d6:	51 05       	cpc	r21, r1
    28d8:	41 f1       	breq	.+80     	; 0x292a <process_action+0x408>
            break;
#endif
        default:
            break;
    }
}
    28da:	26 96       	adiw	r28, 0x06	; 6
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	cd bf       	out	0x3d, r28	; 61
    28e6:	df 91       	pop	r29
    28e8:	cf 91       	pop	r28
    28ea:	1f 91       	pop	r17
    28ec:	0f 91       	pop	r16
    28ee:	ff 90       	pop	r15
    28f0:	ef 90       	pop	r14
    28f2:	df 90       	pop	r13
    28f4:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    28f6:	0c 94 87 1a 	jmp	0x350e	; 0x350e <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    28fa:	6c 29       	or	r22, r12
    28fc:	7d 29       	or	r23, r13
    28fe:	8e 29       	or	r24, r14
    2900:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2902:	26 96       	adiw	r28, 0x06	; 6
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	de bf       	out	0x3e, r29	; 62
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	cd bf       	out	0x3d, r28	; 61
    290e:	df 91       	pop	r29
    2910:	cf 91       	pop	r28
    2912:	1f 91       	pop	r17
    2914:	0f 91       	pop	r16
    2916:	ff 90       	pop	r15
    2918:	ef 90       	pop	r14
    291a:	df 90       	pop	r13
    291c:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    291e:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2922:	0e 94 87 1a 	call	0x350e	; 0x350e <layer_and>
    2926:	c7 01       	movw	r24, r14
    2928:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    292a:	26 96       	adiw	r28, 0x06	; 6
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	f8 94       	cli
    2930:	de bf       	out	0x3e, r29	; 62
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	cd bf       	out	0x3d, r28	; 61
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	1f 91       	pop	r17
    293c:	0f 91       	pop	r16
    293e:	ff 90       	pop	r15
    2940:	ef 90       	pop	r14
    2942:	df 90       	pop	r13
    2944:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2946:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    294a:	10 3f       	cpi	r17, 0xF0	; 240
    294c:	41 f1       	breq	.+80     	; 0x299e <process_action+0x47c>
    294e:	18 f4       	brcc	.+6      	; 0x2956 <process_action+0x434>
    2950:	10 3e       	cpi	r17, 0xE0	; 224
    2952:	48 f4       	brcc	.+18     	; 0x2966 <process_action+0x444>
    2954:	8b c0       	rjmp	.+278    	; 0x2a6c <process_action+0x54a>
    2956:	12 3f       	cpi	r17, 0xF2	; 242
    2958:	09 f4       	brne	.+2      	; 0x295c <process_action+0x43a>
    295a:	50 c0       	rjmp	.+160    	; 0x29fc <process_action+0x4da>
    295c:	d8 f1       	brcs	.+118    	; 0x29d4 <process_action+0x4b2>
    295e:	13 3f       	cpi	r17, 0xF3	; 243
    2960:	09 f4       	brne	.+2      	; 0x2964 <process_action+0x442>
    2962:	60 c0       	rjmp	.+192    	; 0x2a24 <process_action+0x502>
    2964:	83 c0       	rjmp	.+262    	; 0x2a6c <process_action+0x54a>
    2966:	1f 70       	andi	r17, 0x0F	; 15
    2968:	80 2f       	mov	r24, r16
    296a:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    296c:	ff 20       	and	r15, r15
    296e:	21 f0       	breq	.+8      	; 0x2978 <process_action+0x456>
                        layer_on(action.layer_tap.val);
    2970:	0e 94 04 1a 	call	0x3408	; 0x3408 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2974:	81 2f       	mov	r24, r17
    2976:	7b ce       	rjmp	.-778    	; 0x266e <process_action+0x14c>
                    } else {
                        layer_off(action.layer_tap.val);
    2978:	0e 94 25 1a 	call	0x344a	; 0x344a <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    297c:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    297e:	26 96       	adiw	r28, 0x06	; 6
    2980:	0f b6       	in	r0, 0x3f	; 63
    2982:	f8 94       	cli
    2984:	de bf       	out	0x3e, r29	; 62
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	cd bf       	out	0x3d, r28	; 61
    298a:	df 91       	pop	r29
    298c:	cf 91       	pop	r28
    298e:	1f 91       	pop	r17
    2990:	0f 91       	pop	r16
    2992:	ff 90       	pop	r15
    2994:	ef 90       	pop	r14
    2996:	df 90       	pop	r13
    2998:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    299a:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    299e:	ff 20       	and	r15, r15
    29a0:	a9 f0       	breq	.+42     	; 0x29cc <process_action+0x4aa>
                        if (tap_count < TAPPING_TOGGLE) {
    29a2:	25 30       	cpi	r18, 0x05	; 5
    29a4:	08 f0       	brcs	.+2      	; 0x29a8 <process_action+0x486>
    29a6:	b6 c0       	rjmp	.+364    	; 0x2b14 <process_action+0x5f2>
                            layer_invert(action.layer_tap.val);
    29a8:	80 2f       	mov	r24, r16
    29aa:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    29ac:	26 96       	adiw	r28, 0x06	; 6
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	1f 91       	pop	r17
    29be:	0f 91       	pop	r16
    29c0:	ff 90       	pop	r15
    29c2:	ef 90       	pop	r14
    29c4:	df 90       	pop	r13
    29c6:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    29c8:	0c 94 4a 1a 	jmp	0x3494	; 0x3494 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    29cc:	26 30       	cpi	r18, 0x06	; 6
    29ce:	08 f0       	brcs	.+2      	; 0x29d2 <process_action+0x4b0>
    29d0:	a1 c0       	rjmp	.+322    	; 0x2b14 <process_action+0x5f2>
    29d2:	ea cf       	rjmp	.-44     	; 0x29a8 <process_action+0x486>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    29d4:	ff 20       	and	r15, r15
    29d6:	a1 f0       	breq	.+40     	; 0x2a00 <process_action+0x4de>
    29d8:	80 2f       	mov	r24, r16
    29da:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    29dc:	26 96       	adiw	r28, 0x06	; 6
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	f8 94       	cli
    29e2:	de bf       	out	0x3e, r29	; 62
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	cd bf       	out	0x3d, r28	; 61
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	1f 91       	pop	r17
    29ee:	0f 91       	pop	r16
    29f0:	ff 90       	pop	r15
    29f2:	ef 90       	pop	r14
    29f4:	df 90       	pop	r13
    29f6:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    29f8:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    29fc:	ff 20       	and	r15, r15
    29fe:	61 f3       	breq	.-40     	; 0x29d8 <process_action+0x4b6>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2a00:	80 2f       	mov	r24, r16
    2a02:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2a04:	26 96       	adiw	r28, 0x06	; 6
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	f8 94       	cli
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	0f be       	out	0x3f, r0	; 63
    2a0e:	cd bf       	out	0x3d, r28	; 61
    2a10:	df 91       	pop	r29
    2a12:	cf 91       	pop	r28
    2a14:	1f 91       	pop	r17
    2a16:	0f 91       	pop	r16
    2a18:	ff 90       	pop	r15
    2a1a:	ef 90       	pop	r14
    2a1c:	df 90       	pop	r13
    2a1e:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2a20:	0c 94 25 1a 	jmp	0x344a	; 0x344a <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2a24:	ff 20       	and	r15, r15
    2a26:	91 f0       	breq	.+36     	; 0x2a4c <process_action+0x52a>
    2a28:	80 2f       	mov	r24, r16
    2a2a:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2a2c:	26 96       	adiw	r28, 0x06	; 6
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
    2a38:	df 91       	pop	r29
    2a3a:	cf 91       	pop	r28
    2a3c:	1f 91       	pop	r17
    2a3e:	0f 91       	pop	r16
    2a40:	ff 90       	pop	r15
    2a42:	ef 90       	pop	r14
    2a44:	df 90       	pop	r13
    2a46:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2a48:	0c 94 ef 19 	jmp	0x33de	; 0x33de <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2a4c:	26 96       	adiw	r28, 0x06	; 6
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	de bf       	out	0x3e, r29	; 62
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	cd bf       	out	0x3d, r28	; 61
    2a58:	df 91       	pop	r29
    2a5a:	cf 91       	pop	r28
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	ff 90       	pop	r15
    2a62:	ef 90       	pop	r14
    2a64:	df 90       	pop	r13
    2a66:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2a68:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2a6c:	ff 20       	and	r15, r15
    2a6e:	a1 f0       	breq	.+40     	; 0x2a98 <process_action+0x576>
                        if (tap_count > 0) {
    2a70:	22 23       	and	r18, r18
    2a72:	09 f4       	brne	.+2      	; 0x2a76 <process_action+0x554>
    2a74:	b1 cf       	rjmp	.-158    	; 0x29d8 <process_action+0x4b6>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2a76:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2a78:	26 96       	adiw	r28, 0x06	; 6
    2a7a:	0f b6       	in	r0, 0x3f	; 63
    2a7c:	f8 94       	cli
    2a7e:	de bf       	out	0x3e, r29	; 62
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	cd bf       	out	0x3d, r28	; 61
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	1f 91       	pop	r17
    2a8a:	0f 91       	pop	r16
    2a8c:	ff 90       	pop	r15
    2a8e:	ef 90       	pop	r14
    2a90:	df 90       	pop	r13
    2a92:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2a94:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2a98:	22 23       	and	r18, r18
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <process_action+0x57c>
    2a9c:	b1 cf       	rjmp	.-158    	; 0x2a00 <process_action+0x4de>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2a9e:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2aa0:	26 96       	adiw	r28, 0x06	; 6
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	de bf       	out	0x3e, r29	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	cd bf       	out	0x3d, r28	; 61
    2aac:	df 91       	pop	r29
    2aae:	cf 91       	pop	r28
    2ab0:	1f 91       	pop	r17
    2ab2:	0f 91       	pop	r16
    2ab4:	ff 90       	pop	r15
    2ab6:	ef 90       	pop	r14
    2ab8:	df 90       	pop	r13
    2aba:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2abc:	0c 94 34 12 	jmp	0x2468	; 0x2468 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2ac0:	40 2f       	mov	r20, r16
    2ac2:	4f 70       	andi	r20, 0x0F	; 15
    2ac4:	61 2f       	mov	r22, r17
    2ac6:	c6 01       	movw	r24, r12
    2ac8:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2acc:	26 96       	adiw	r28, 0x06	; 6
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	ff 90       	pop	r15
    2ae2:	ef 90       	pop	r14
    2ae4:	df 90       	pop	r13
    2ae6:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2ae8:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2aec:	40 2f       	mov	r20, r16
    2aee:	4f 70       	andi	r20, 0x0F	; 15
    2af0:	61 2f       	mov	r22, r17
    2af2:	c6 01       	movw	r24, r12
            break;
#endif
        default:
            break;
    }
}
    2af4:	26 96       	adiw	r28, 0x06	; 6
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	de bf       	out	0x3e, r29	; 62
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	cd bf       	out	0x3d, r28	; 61
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	1f 91       	pop	r17
    2b06:	0f 91       	pop	r16
    2b08:	ff 90       	pop	r15
    2b0a:	ef 90       	pop	r14
    2b0c:	df 90       	pop	r13
    2b0e:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2b10:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <action_function>
            break;
#endif
        default:
            break;
    }
}
    2b14:	26 96       	adiw	r28, 0x06	; 6
    2b16:	0f b6       	in	r0, 0x3f	; 63
    2b18:	f8 94       	cli
    2b1a:	de bf       	out	0x3e, r29	; 62
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	cd bf       	out	0x3d, r28	; 61
    2b20:	df 91       	pop	r29
    2b22:	cf 91       	pop	r28
    2b24:	1f 91       	pop	r17
    2b26:	0f 91       	pop	r16
    2b28:	ff 90       	pop	r15
    2b2a:	ef 90       	pop	r14
    2b2c:	df 90       	pop	r13
    2b2e:	cf 90       	pop	r12
    2b30:	08 95       	ret

00002b32 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2b32:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <clear_weak_mods>
    clear_keys();
    2b36:	0e 94 2f 1b 	call	0x365e	; 0x365e <clear_keys>
    send_keyboard_report();
    2b3a:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2b3e:	0e 94 21 22 	call	0x4442	; 0x4442 <mousekey_clear>
    mousekey_send();
    2b42:	0e 94 ee 20 	call	0x41dc	; 0x41dc <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 1d 10 	call	0x203a	; 0x203a <host_system_send>
    host_consumer_send(0);
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0c 94 33 10 	jmp	0x2066	; 0x2066 <host_consumer_send>

00002b56 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2b56:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <clear_mods>
    clear_keyboard_but_mods();
    2b5a:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <clear_keyboard_but_mods>

00002b5e <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2b5e:	0e 94 c0 1a 	call	0x3580	; 0x3580 <layer_switch_get_action>

    switch (action.kind.id) {
    2b62:	29 2f       	mov	r18, r25
    2b64:	22 95       	swap	r18
    2b66:	2f 70       	andi	r18, 0x0F	; 15
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	2c 30       	cpi	r18, 0x0C	; 12
    2b6c:	31 05       	cpc	r19, r1
    2b6e:	4c f4       	brge	.+18     	; 0x2b82 <is_tap_key+0x24>
    2b70:	2a 30       	cpi	r18, 0x0A	; 10
    2b72:	31 05       	cpc	r19, r1
    2b74:	6c f4       	brge	.+26     	; 0x2b90 <is_tap_key+0x32>
    2b76:	22 50       	subi	r18, 0x02	; 2
    2b78:	31 09       	sbc	r19, r1
    2b7a:	22 30       	cpi	r18, 0x02	; 2
    2b7c:	31 05       	cpc	r19, r1
    2b7e:	88 f4       	brcc	.+34     	; 0x2ba2 <is_tap_key+0x44>
    2b80:	07 c0       	rjmp	.+14     	; 0x2b90 <is_tap_key+0x32>
    2b82:	2c 30       	cpi	r18, 0x0C	; 12
    2b84:	31 05       	cpc	r19, r1
    2b86:	49 f0       	breq	.+18     	; 0x2b9a <is_tap_key+0x3c>
    2b88:	2f 30       	cpi	r18, 0x0F	; 15
    2b8a:	31 05       	cpc	r19, r1
    2b8c:	31 f0       	breq	.+12     	; 0x2b9a <is_tap_key+0x3c>
    2b8e:	09 c0       	rjmp	.+18     	; 0x2ba2 <is_tap_key+0x44>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2b90:	80 3e       	cpi	r24, 0xE0	; 224
    2b92:	48 f0       	brcs	.+18     	; 0x2ba6 <is_tap_key+0x48>
    2b94:	80 3f       	cpi	r24, 0xF0	; 240
    2b96:	29 f4       	brne	.+10     	; 0x2ba2 <is_tap_key+0x44>
    2b98:	06 c0       	rjmp	.+12     	; 0x2ba6 <is_tap_key+0x48>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2b9a:	93 fb       	bst	r25, 3
    2b9c:	88 27       	eor	r24, r24
    2b9e:	80 f9       	bld	r24, 0
    2ba0:	08 95       	ret
            return false;
    }
    return false;
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	08 95       	ret
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2ba8:	08 95       	ret

00002baa <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2baa:	cf 93       	push	r28
    2bac:	df 93       	push	r29
    2bae:	00 d0       	rcall	.+0      	; 0x2bb0 <debug_event+0x6>
    2bb0:	00 d0       	rcall	.+0      	; 0x2bb2 <debug_event+0x8>
    2bb2:	1f 92       	push	r1
    2bb4:	cd b7       	in	r28, 0x3d	; 61
    2bb6:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	0f 90       	pop	r0
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	08 95       	ret

00002bc8 <debug_record>:

void debug_record(keyrecord_t record)
{
    2bc8:	cf 93       	push	r28
    2bca:	df 93       	push	r29
    2bcc:	00 d0       	rcall	.+0      	; 0x2bce <debug_record+0x6>
    2bce:	00 d0       	rcall	.+0      	; 0x2bd0 <debug_record+0x8>
    2bd0:	00 d0       	rcall	.+0      	; 0x2bd2 <debug_record+0xa>
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2bd6:	26 96       	adiw	r28, 0x06	; 6
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	de bf       	out	0x3e, r29	; 62
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	cd bf       	out	0x3d, r28	; 61
    2be2:	df 91       	pop	r29
    2be4:	cf 91       	pop	r28
    2be6:	08 95       	ret

00002be8 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2be8:	1f 93       	push	r17
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2bee:	c0 91 66 01 	lds	r28, 0x0166
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2bf2:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2bf4:	80 91 67 01 	lds	r24, 0x0167
    2bf8:	c8 17       	cp	r28, r24
    2bfa:	99 f0       	breq	.+38     	; 0x2c22 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2bfc:	d0 e0       	ldi	r29, 0x00	; 0
    2bfe:	1c 9f       	mul	r17, r28
    2c00:	f0 01       	movw	r30, r0
    2c02:	1d 9f       	mul	r17, r29
    2c04:	f0 0d       	add	r31, r0
    2c06:	11 24       	eor	r1, r1
    2c08:	e8 59       	subi	r30, 0x98	; 152
    2c0a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c0c:	40 81       	ld	r20, Z
    2c0e:	51 81       	ldd	r21, Z+1	; 0x01
    2c10:	62 81       	ldd	r22, Z+2	; 0x02
    2c12:	73 81       	ldd	r23, Z+3	; 0x03
    2c14:	84 81       	ldd	r24, Z+4	; 0x04
    2c16:	95 81       	ldd	r25, Z+5	; 0x05
    2c18:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c1c:	21 96       	adiw	r28, 0x01	; 1
    2c1e:	c7 70       	andi	r28, 0x07	; 7
    2c20:	e9 cf       	rjmp	.-46     	; 0x2bf4 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2c22:	df 91       	pop	r29
    2c24:	cf 91       	pop	r28
    2c26:	1f 91       	pop	r17
    2c28:	08 95       	ret

00002c2a <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2c2a:	40 91 98 01 	lds	r20, 0x0198
    2c2e:	50 91 99 01 	lds	r21, 0x0199
    2c32:	60 91 9a 01 	lds	r22, 0x019A
    2c36:	70 91 9b 01 	lds	r23, 0x019B
    2c3a:	80 91 9c 01 	lds	r24, 0x019C
    2c3e:	90 91 9d 01 	lds	r25, 0x019D
    2c42:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <debug_record>

00002c46 <waiting_buffer_scan_tap>:

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2c46:	80 91 9d 01 	lds	r24, 0x019D
    2c4a:	82 95       	swap	r24
    2c4c:	8f 70       	andi	r24, 0x0F	; 15
    2c4e:	09 f0       	breq	.+2      	; 0x2c52 <waiting_buffer_scan_tap+0xc>
    2c50:	54 c0       	rjmp	.+168    	; 0x2cfa <waiting_buffer_scan_tap+0xb4>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2c52:	80 91 9a 01 	lds	r24, 0x019A
    2c56:	88 23       	and	r24, r24
    2c58:	09 f4       	brne	.+2      	; 0x2c5c <waiting_buffer_scan_tap+0x16>
    2c5a:	4f c0       	rjmp	.+158    	; 0x2cfa <waiting_buffer_scan_tap+0xb4>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c5c:	80 91 66 01 	lds	r24, 0x0166
    2c60:	a0 91 67 01 	lds	r26, 0x0167
    2c64:	60 91 98 01 	lds	r22, 0x0198
    2c68:	70 91 99 01 	lds	r23, 0x0199
    2c6c:	40 91 9b 01 	lds	r20, 0x019B
    2c70:	50 91 9c 01 	lds	r21, 0x019C
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2c74:	b6 e0       	ldi	r27, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c76:	8a 17       	cp	r24, r26
    2c78:	09 f4       	brne	.+2      	; 0x2c7c <waiting_buffer_scan_tap+0x36>
    2c7a:	3f c0       	rjmp	.+126    	; 0x2cfa <waiting_buffer_scan_tap+0xb4>
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	41 15       	cp	r20, r1
    2c80:	51 05       	cpc	r21, r1
    2c82:	c1 f1       	breq	.+112    	; 0x2cf4 <waiting_buffer_scan_tap+0xae>
    2c84:	7f 3f       	cpi	r23, 0xFF	; 255
    2c86:	11 f4       	brne	.+4      	; 0x2c8c <waiting_buffer_scan_tap+0x46>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2c88:	6f 3f       	cpi	r22, 0xFF	; 255
    2c8a:	a1 f1       	breq	.+104    	; 0x2cf4 <waiting_buffer_scan_tap+0xae>
    2c8c:	b8 9f       	mul	r27, r24
    2c8e:	f0 01       	movw	r30, r0
    2c90:	b9 9f       	mul	r27, r25
    2c92:	f0 0d       	add	r31, r0
    2c94:	11 24       	eor	r1, r1
    2c96:	e8 59       	subi	r30, 0x98	; 152
    2c98:	fe 4f       	sbci	r31, 0xFE	; 254
    2c9a:	21 81       	ldd	r18, Z+1	; 0x01
    2c9c:	72 13       	cpse	r23, r18
    2c9e:	2a c0       	rjmp	.+84     	; 0x2cf4 <waiting_buffer_scan_tap+0xae>
    2ca0:	20 81       	ld	r18, Z
    2ca2:	62 13       	cpse	r22, r18
    2ca4:	27 c0       	rjmp	.+78     	; 0x2cf4 <waiting_buffer_scan_tap+0xae>
    2ca6:	22 81       	ldd	r18, Z+2	; 0x02
    2ca8:	21 11       	cpse	r18, r1
    2caa:	24 c0       	rjmp	.+72     	; 0x2cf4 <waiting_buffer_scan_tap+0xae>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2cac:	23 81       	ldd	r18, Z+3	; 0x03
    2cae:	34 81       	ldd	r19, Z+4	; 0x04
    2cb0:	24 17       	cp	r18, r20
    2cb2:	35 07       	cpc	r19, r21
    2cb4:	10 f4       	brcc	.+4      	; 0x2cba <waiting_buffer_scan_tap+0x74>
    2cb6:	21 50       	subi	r18, 0x01	; 1
    2cb8:	31 09       	sbc	r19, r1
    2cba:	24 1b       	sub	r18, r20
    2cbc:	35 0b       	sbc	r19, r21
    2cbe:	28 3c       	cpi	r18, 0xC8	; 200
    2cc0:	31 05       	cpc	r19, r1
    2cc2:	c0 f4       	brcc	.+48     	; 0x2cf4 <waiting_buffer_scan_tap+0xae>
            tapping_key.tap.count = 1;
    2cc4:	20 91 9d 01 	lds	r18, 0x019D
    2cc8:	2f 70       	andi	r18, 0x0F	; 15
    2cca:	20 61       	ori	r18, 0x10	; 16
    2ccc:	20 93 9d 01 	sts	0x019D, r18
            waiting_buffer[i].tap.count = 1;
    2cd0:	26 e0       	ldi	r18, 0x06	; 6
    2cd2:	28 9f       	mul	r18, r24
    2cd4:	f0 01       	movw	r30, r0
    2cd6:	29 9f       	mul	r18, r25
    2cd8:	f0 0d       	add	r31, r0
    2cda:	11 24       	eor	r1, r1
    2cdc:	e3 59       	subi	r30, 0x93	; 147
    2cde:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce0:	80 81       	ld	r24, Z
    2ce2:	8f 70       	andi	r24, 0x0F	; 15
    2ce4:	80 61       	ori	r24, 0x10	; 16
    2ce6:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2ce8:	88 e9       	ldi	r24, 0x98	; 152
    2cea:	91 e0       	ldi	r25, 0x01	; 1
    2cec:	0e 94 91 12 	call	0x2522	; 0x2522 <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2cf0:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2cf4:	01 96       	adiw	r24, 0x01	; 1
    2cf6:	87 70       	andi	r24, 0x07	; 7
    2cf8:	be cf       	rjmp	.-132    	; 0x2c76 <waiting_buffer_scan_tap+0x30>
    2cfa:	08 95       	ret

00002cfc <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2cfc:	cf 92       	push	r12
    2cfe:	df 92       	push	r13
    2d00:	ef 92       	push	r14
    2d02:	ff 92       	push	r15
    2d04:	0f 93       	push	r16
    2d06:	1f 93       	push	r17
    2d08:	cf 93       	push	r28
    2d0a:	df 93       	push	r29
    2d0c:	cd b7       	in	r28, 0x3d	; 61
    2d0e:	de b7       	in	r29, 0x3e	; 62
    2d10:	62 97       	sbiw	r28, 0x12	; 18
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	de bf       	out	0x3e, r29	; 62
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	cd bf       	out	0x3d, r28	; 61
    2d1c:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2d1e:	85 e0       	ldi	r24, 0x05	; 5
    2d20:	f8 01       	movw	r30, r16
    2d22:	de 01       	movw	r26, r28
    2d24:	1d 96       	adiw	r26, 0x0d	; 13
    2d26:	01 90       	ld	r0, Z+
    2d28:	0d 92       	st	X+, r0
    2d2a:	8a 95       	dec	r24
    2d2c:	e1 f7       	brne	.-8      	; 0x2d26 <process_tapping+0x2a>
    2d2e:	d8 01       	movw	r26, r16
    2d30:	4c 91       	ld	r20, X
    2d32:	11 96       	adiw	r26, 0x01	; 1
    2d34:	5c 91       	ld	r21, X
    2d36:	11 97       	sbiw	r26, 0x01	; 1
    2d38:	12 96       	adiw	r26, 0x02	; 2
    2d3a:	6c 91       	ld	r22, X
    2d3c:	12 97       	sbiw	r26, 0x02	; 2
    2d3e:	13 96       	adiw	r26, 0x03	; 3
    2d40:	cd 90       	ld	r12, X+
    2d42:	dc 90       	ld	r13, X
    2d44:	14 97       	sbiw	r26, 0x04	; 4
    2d46:	30 91 98 01 	lds	r19, 0x0198
    2d4a:	70 91 99 01 	lds	r23, 0x0199
    2d4e:	80 91 9b 01 	lds	r24, 0x019B
    2d52:	90 91 9c 01 	lds	r25, 0x019C
    2d56:	00 97       	sbiw	r24, 0x00	; 0
    2d58:	09 f4       	brne	.+2      	; 0x2d5c <process_tapping+0x60>
    2d5a:	6b c1       	rjmp	.+726    	; 0x3032 <process_tapping+0x336>
    2d5c:	7f 3f       	cpi	r23, 0xFF	; 255
    2d5e:	19 f4       	brne	.+6      	; 0x2d66 <process_tapping+0x6a>

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2d60:	3f 3f       	cpi	r19, 0xFF	; 255
    2d62:	09 f4       	brne	.+2      	; 0x2d66 <process_tapping+0x6a>
    2d64:	66 c1       	rjmp	.+716    	; 0x3032 <process_tapping+0x336>
    2d66:	e0 90 9a 01 	lds	r14, 0x019A
    2d6a:	ee 20       	and	r14, r14
    2d6c:	09 f4       	brne	.+2      	; 0x2d70 <process_tapping+0x74>
    2d6e:	c0 c0       	rjmp	.+384    	; 0x2ef0 <process_tapping+0x1f4>
    2d70:	20 91 9d 01 	lds	r18, 0x019D
        if (WITHIN_TAPPING_TERM(event)) {
    2d74:	c8 16       	cp	r12, r24
    2d76:	d9 06       	cpc	r13, r25
    2d78:	28 f0       	brcs	.+10     	; 0x2d84 <process_tapping+0x88>
    2d7a:	f6 01       	movw	r30, r12
    2d7c:	e8 1b       	sub	r30, r24
    2d7e:	f9 0b       	sbc	r31, r25
    2d80:	cf 01       	movw	r24, r30
    2d82:	04 c0       	rjmp	.+8      	; 0x2d8c <process_tapping+0x90>
    2d84:	80 95       	com	r24
    2d86:	90 95       	com	r25
    2d88:	8c 0d       	add	r24, r12
    2d8a:	9d 1d       	adc	r25, r13
    2d8c:	ff 24       	eor	r15, r15
    2d8e:	f3 94       	inc	r15
    2d90:	88 3c       	cpi	r24, 0xC8	; 200
    2d92:	91 05       	cpc	r25, r1
    2d94:	78 f0       	brcs	.+30     	; 0x2db4 <process_tapping+0xb8>
    2d96:	f1 2c       	mov	r15, r1
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2d98:	20 7f       	andi	r18, 0xF0	; 240
    2d9a:	09 f0       	breq	.+2      	; 0x2d9e <process_tapping+0xa2>
    2d9c:	c6 c0       	rjmp	.+396    	; 0x2f2a <process_tapping+0x22e>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2d9e:	7c 2d       	mov	r23, r12
    2da0:	d9 8a       	std	Y+17, r13	; 0x11
    2da2:	c8 8a       	std	Y+16, r12	; 0x10
    2da4:	89 89       	ldd	r24, Y+17	; 0x11
    2da6:	0e 94 d5 15 	call	0x2baa	; 0x2baa <debug_event>
                process_action(&tapping_key);
    2daa:	88 e9       	ldi	r24, 0x98	; 152
    2dac:	91 e0       	ldi	r25, 0x01	; 1
    2dae:	0e 94 91 12 	call	0x2522	; 0x2522 <process_action>
    2db2:	b1 c0       	rjmp	.+354    	; 0x2f16 <process_tapping+0x21a>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
    2db4:	82 2f       	mov	r24, r18
    2db6:	80 7f       	andi	r24, 0xF0	; 240
    2db8:	09 f0       	breq	.+2      	; 0x2dbc <process_tapping+0xc0>
    2dba:	46 c0       	rjmp	.+140    	; 0x2e48 <process_tapping+0x14c>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2dbc:	75 13       	cpse	r23, r21
    2dbe:	14 c0       	rjmp	.+40     	; 0x2de8 <process_tapping+0xec>
    2dc0:	34 13       	cpse	r19, r20
    2dc2:	12 c0       	rjmp	.+36     	; 0x2de8 <process_tapping+0xec>
    2dc4:	61 11       	cpse	r22, r1
    2dc6:	10 c0       	rjmp	.+32     	; 0x2de8 <process_tapping+0xec>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2dc8:	2f 70       	andi	r18, 0x0F	; 15
    2dca:	20 61       	ori	r18, 0x10	; 16
    2dcc:	20 93 9d 01 	sts	0x019D, r18
                    debug_tapping_key();
    2dd0:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <debug_tapping_key>
                    process_action(&tapping_key);
    2dd4:	88 e9       	ldi	r24, 0x98	; 152
    2dd6:	91 e0       	ldi	r25, 0x01	; 1
    2dd8:	0e 94 91 12 	call	0x2522	; 0x2522 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2ddc:	80 91 9d 01 	lds	r24, 0x019D
    2de0:	d8 01       	movw	r26, r16
    2de2:	15 96       	adiw	r26, 0x05	; 5
    2de4:	8c 93       	st	X, r24
    2de6:	2e c0       	rjmp	.+92     	; 0x2e44 <process_tapping+0x148>
    2de8:	cd 28       	or	r12, r13
    2dea:	19 f1       	breq	.+70     	; 0x2e32 <process_tapping+0x136>
    2dec:	5f 3f       	cpi	r21, 0xFF	; 255
    2dee:	11 f4       	brne	.+4      	; 0x2df4 <process_tapping+0xf8>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2df0:	4f 3f       	cpi	r20, 0xFF	; 255
    2df2:	f9 f0       	breq	.+62     	; 0x2e32 <process_tapping+0x136>
    2df4:	f6 2e       	mov	r15, r22
    2df6:	61 11       	cpse	r22, r1
    2df8:	1c c0       	rjmp	.+56     	; 0x2e32 <process_tapping+0x136>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2dfa:	80 91 66 01 	lds	r24, 0x0166
    2dfe:	20 91 67 01 	lds	r18, 0x0167
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2e02:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e04:	82 17       	cp	r24, r18
    2e06:	09 f4       	brne	.+2      	; 0x2e0a <process_tapping+0x10e>
    2e08:	5a c0       	rjmp	.+180    	; 0x2ebe <process_tapping+0x1c2>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	38 9f       	mul	r19, r24
    2e0e:	f0 01       	movw	r30, r0
    2e10:	39 9f       	mul	r19, r25
    2e12:	f0 0d       	add	r31, r0
    2e14:	11 24       	eor	r1, r1
    2e16:	e8 59       	subi	r30, 0x98	; 152
    2e18:	fe 4f       	sbci	r31, 0xFE	; 254
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	57 13       	cpse	r21, r23
    2e1e:	06 c0       	rjmp	.+12     	; 0x2e2c <process_tapping+0x130>
    2e20:	70 81       	ld	r23, Z
    2e22:	47 13       	cpse	r20, r23
    2e24:	03 c0       	rjmp	.+6      	; 0x2e2c <process_tapping+0x130>
    2e26:	72 81       	ldd	r23, Z+2	; 0x02
    2e28:	71 11       	cpse	r23, r1
    2e2a:	03 c0       	rjmp	.+6      	; 0x2e32 <process_tapping+0x136>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e2c:	01 96       	adiw	r24, 0x01	; 1
    2e2e:	87 70       	andi	r24, 0x07	; 7
    2e30:	e9 cf       	rjmp	.-46     	; 0x2e04 <process_tapping+0x108>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2e32:	f6 2e       	mov	r15, r22
    2e34:	66 23       	and	r22, r22
    2e36:	09 f4       	brne	.+2      	; 0x2e3a <process_tapping+0x13e>
    2e38:	18 c1       	rjmp	.+560    	; 0x306a <process_tapping+0x36e>
                        tapping_key.tap.interrupted = true;
    2e3a:	80 91 9d 01 	lds	r24, 0x019D
    2e3e:	81 60       	ori	r24, 0x01	; 1
    2e40:	80 93 9d 01 	sts	0x019D, r24
                    }
                    // enqueue 
                    return false;
    2e44:	f1 2c       	mov	r15, r1
    2e46:	11 c1       	rjmp	.+546    	; 0x306a <process_tapping+0x36e>
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2e48:	75 13       	cpse	r23, r21
    2e4a:	08 c0       	rjmp	.+16     	; 0x2e5c <process_tapping+0x160>
    2e4c:	34 13       	cpse	r19, r20
    2e4e:	06 c0       	rjmp	.+12     	; 0x2e5c <process_tapping+0x160>
    2e50:	61 11       	cpse	r22, r1
    2e52:	04 c0       	rjmp	.+8      	; 0x2e5c <process_tapping+0x160>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    2e54:	80 91 9d 01 	lds	r24, 0x019D
    2e58:	d8 01       	movw	r26, r16
    2e5a:	c3 c0       	rjmp	.+390    	; 0x2fe2 <process_tapping+0x2e6>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2e5c:	4d 87       	std	Y+13, r20	; 0x0d
    2e5e:	5e 87       	std	Y+14, r21	; 0x0e
    2e60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e64:	6a 8b       	std	Y+18, r22	; 0x12
    2e66:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <is_tap_key>
    2e6a:	6a 89       	ldd	r22, Y+18	; 0x12
    2e6c:	88 23       	and	r24, r24
    2e6e:	e1 f1       	breq	.+120    	; 0x2ee8 <process_tapping+0x1ec>
    2e70:	66 23       	and	r22, r22
    2e72:	d1 f1       	breq	.+116    	; 0x2ee8 <process_tapping+0x1ec>
                    if (tapping_key.tap.count > 1) {
    2e74:	20 91 9d 01 	lds	r18, 0x019D
    2e78:	82 2f       	mov	r24, r18
    2e7a:	82 95       	swap	r24
    2e7c:	8f 70       	andi	r24, 0x0F	; 15
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	02 97       	sbiw	r24, 0x02	; 2
    2e82:	74 f0       	brlt	.+28     	; 0x2ea0 <process_tapping+0x1a4>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2e84:	80 91 98 01 	lds	r24, 0x0198
    2e88:	90 91 99 01 	lds	r25, 0x0199
    2e8c:	98 87       	std	Y+8, r25	; 0x08
    2e8e:	8f 83       	std	Y+7, r24	; 0x07
    2e90:	19 86       	std	Y+9, r1	; 0x09
    2e92:	db 86       	std	Y+11, r13	; 0x0b
    2e94:	ca 86       	std	Y+10, r12	; 0x0a
    2e96:	2c 87       	std	Y+12, r18	; 0x0c
    2e98:	ce 01       	movw	r24, r28
    2e9a:	07 96       	adiw	r24, 0x07	; 7
    2e9c:	0e 94 91 12 	call	0x2522	; 0x2522 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    2ea0:	86 e0       	ldi	r24, 0x06	; 6
    2ea2:	f8 01       	movw	r30, r16
    2ea4:	a8 e9       	ldi	r26, 0x98	; 152
    2ea6:	b1 e0       	ldi	r27, 0x01	; 1
    2ea8:	01 90       	ld	r0, Z+
    2eaa:	0d 92       	st	X+, r0
    2eac:	8a 95       	dec	r24
    2eae:	e1 f7       	brne	.-8      	; 0x2ea8 <process_tapping+0x1ac>
                    waiting_buffer_scan_tap();
    2eb0:	0e 94 23 16 	call	0x2c46	; 0x2c46 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    2eb4:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <debug_tapping_key>
                    return true;
    2eb8:	ff 24       	eor	r15, r15
    2eba:	f3 94       	inc	r15
    2ebc:	d6 c0       	rjmp	.+428    	; 0x306a <process_tapping+0x36e>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    2ebe:	4d 87       	std	Y+13, r20	; 0x0d
    2ec0:	5e 87       	std	Y+14, r21	; 0x0e
    2ec2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ec4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ec6:	0e 94 c0 1a 	call	0x3580	; 0x3580 <layer_switch_get_action>
                    switch (action.kind.id) {
    2eca:	29 2f       	mov	r18, r25
    2ecc:	22 95       	swap	r18
    2ece:	2f 70       	andi	r18, 0x0F	; 15
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	22 30       	cpi	r18, 0x02	; 2
    2ed4:	31 05       	cpc	r19, r1
    2ed6:	0c f0       	brlt	.+2      	; 0x2eda <process_tapping+0x1de>
    2ed8:	bc c0       	rjmp	.+376    	; 0x3052 <process_tapping+0x356>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    2eda:	9f 70       	andi	r25, 0x0F	; 15
    2edc:	09 f0       	breq	.+2      	; 0x2ee0 <process_tapping+0x1e4>
    2ede:	b6 c0       	rjmp	.+364    	; 0x304c <process_tapping+0x350>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
                            if (IS_MOD(action.key.code)) return false;
    2ee0:	80 5e       	subi	r24, 0xE0	; 224
    2ee2:	88 30       	cpi	r24, 0x08	; 8
    2ee4:	08 f4       	brcc	.+2      	; 0x2ee8 <process_tapping+0x1ec>
    2ee6:	c1 c0       	rjmp	.+386    	; 0x306a <process_tapping+0x36e>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    2ee8:	c8 01       	movw	r24, r16
    2eea:	0e 94 91 12 	call	0x2522	; 0x2522 <process_action>
    2eee:	e4 cf       	rjmp	.-56     	; 0x2eb8 <process_tapping+0x1bc>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2ef0:	c8 16       	cp	r12, r24
    2ef2:	d9 06       	cpc	r13, r25
    2ef4:	08 f4       	brcc	.+2      	; 0x2ef8 <process_tapping+0x1fc>
    2ef6:	53 c0       	rjmp	.+166    	; 0x2f9e <process_tapping+0x2a2>
    2ef8:	f6 01       	movw	r30, r12
    2efa:	e8 1b       	sub	r30, r24
    2efc:	f9 0b       	sbc	r31, r25
    2efe:	cf 01       	movw	r24, r30
    2f00:	88 3c       	cpi	r24, 0xC8	; 200
    2f02:	91 05       	cpc	r25, r1
    2f04:	08 f4       	brcc	.+2      	; 0x2f08 <process_tapping+0x20c>
    2f06:	50 c0       	rjmp	.+160    	; 0x2fa8 <process_tapping+0x2ac>
    2f08:	f1 2c       	mov	r15, r1
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    2f0a:	7c 2d       	mov	r23, r12
    2f0c:	d9 8a       	std	Y+17, r13	; 0x11
    2f0e:	c8 8a       	std	Y+16, r12	; 0x10
    2f10:	89 89       	ldd	r24, Y+17	; 0x11
    2f12:	0e 94 d5 15 	call	0x2baa	; 0x2baa <debug_event>
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
    2f16:	e8 e9       	ldi	r30, 0x98	; 152
    2f18:	f1 e0       	ldi	r31, 0x01	; 1
    2f1a:	86 e0       	ldi	r24, 0x06	; 6
    2f1c:	df 01       	movw	r26, r30
    2f1e:	1d 92       	st	X+, r1
    2f20:	8a 95       	dec	r24
    2f22:	e9 f7       	brne	.-6      	; 0x2f1e <process_tapping+0x222>
                debug_tapping_key();
    2f24:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <debug_tapping_key>
                return false;
    2f28:	a0 c0       	rjmp	.+320    	; 0x306a <process_tapping+0x36e>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2f2a:	75 13       	cpse	r23, r21
    2f2c:	14 c0       	rjmp	.+40     	; 0x2f56 <process_tapping+0x25a>
    2f2e:	34 13       	cpse	r19, r20
    2f30:	12 c0       	rjmp	.+36     	; 0x2f56 <process_tapping+0x25a>
    2f32:	61 11       	cpse	r22, r1
    2f34:	10 c0       	rjmp	.+32     	; 0x2f56 <process_tapping+0x25a>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    2f36:	80 91 9d 01 	lds	r24, 0x019D
    2f3a:	f8 01       	movw	r30, r16
    2f3c:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    2f3e:	c8 01       	movw	r24, r16
    2f40:	0e 94 91 12 	call	0x2522	; 0x2522 <process_action>
                    tapping_key = (keyrecord_t){};
    2f44:	86 e0       	ldi	r24, 0x06	; 6
    2f46:	e8 e9       	ldi	r30, 0x98	; 152
    2f48:	f1 e0       	ldi	r31, 0x01	; 1
    2f4a:	df 01       	movw	r26, r30
    2f4c:	1d 92       	st	X+, r1
    2f4e:	8a 95       	dec	r24
    2f50:	e9 f7       	brne	.-6      	; 0x2f4c <process_tapping+0x250>
                    return true;
    2f52:	fe 2c       	mov	r15, r14
    2f54:	8a c0       	rjmp	.+276    	; 0x306a <process_tapping+0x36e>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2f56:	4d 87       	std	Y+13, r20	; 0x0d
    2f58:	5e 87       	std	Y+14, r21	; 0x0e
    2f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f5e:	6a 8b       	std	Y+18, r22	; 0x12
    2f60:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <is_tap_key>
    2f64:	6a 89       	ldd	r22, Y+18	; 0x12
    2f66:	88 23       	and	r24, r24
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <process_tapping+0x270>
    2f6a:	be cf       	rjmp	.-132    	; 0x2ee8 <process_tapping+0x1ec>
    2f6c:	66 23       	and	r22, r22
    2f6e:	09 f4       	brne	.+2      	; 0x2f72 <process_tapping+0x276>
    2f70:	bb cf       	rjmp	.-138    	; 0x2ee8 <process_tapping+0x1ec>
                    if (tapping_key.tap.count > 1) {
    2f72:	20 91 9d 01 	lds	r18, 0x019D
    2f76:	82 2f       	mov	r24, r18
    2f78:	82 95       	swap	r24
    2f7a:	8f 70       	andi	r24, 0x0F	; 15
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	02 97       	sbiw	r24, 0x02	; 2
    2f80:	0c f4       	brge	.+2      	; 0x2f84 <process_tapping+0x288>
    2f82:	8e cf       	rjmp	.-228    	; 0x2ea0 <process_tapping+0x1a4>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2f84:	80 91 98 01 	lds	r24, 0x0198
    2f88:	90 91 99 01 	lds	r25, 0x0199
    2f8c:	9a 83       	std	Y+2, r25	; 0x02
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	1b 82       	std	Y+3, r1	; 0x03
    2f92:	dd 82       	std	Y+5, r13	; 0x05
    2f94:	cc 82       	std	Y+4, r12	; 0x04
    2f96:	2e 83       	std	Y+6, r18	; 0x06
    2f98:	ce 01       	movw	r24, r28
    2f9a:	01 96       	adiw	r24, 0x01	; 1
    2f9c:	7f cf       	rjmp	.-258    	; 0x2e9c <process_tapping+0x1a0>
    2f9e:	80 95       	com	r24
    2fa0:	90 95       	com	r25
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2fa2:	8c 0d       	add	r24, r12
    2fa4:	9d 1d       	adc	r25, r13
    2fa6:	ac cf       	rjmp	.-168    	; 0x2f00 <process_tapping+0x204>
            if (event.pressed) {
    2fa8:	f6 2e       	mov	r15, r22
    2faa:	66 23       	and	r22, r22
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <process_tapping+0x2b4>
    2fae:	9c cf       	rjmp	.-200    	; 0x2ee8 <process_tapping+0x1ec>
                if (IS_TAPPING_KEY(event.key)) {
    2fb0:	75 13       	cpse	r23, r21
    2fb2:	2e c0       	rjmp	.+92     	; 0x3010 <process_tapping+0x314>
    2fb4:	34 13       	cpse	r19, r20
    2fb6:	2c c0       	rjmp	.+88     	; 0x3010 <process_tapping+0x314>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    2fb8:	20 91 9d 01 	lds	r18, 0x019D
    2fbc:	20 fd       	sbrc	r18, 0
    2fbe:	1f c0       	rjmp	.+62     	; 0x2ffe <process_tapping+0x302>
    2fc0:	82 2f       	mov	r24, r18
    2fc2:	82 95       	swap	r24
    2fc4:	8f 70       	andi	r24, 0x0F	; 15
    2fc6:	d9 f0       	breq	.+54     	; 0x2ffe <process_tapping+0x302>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    2fc8:	d8 01       	movw	r26, r16
    2fca:	15 96       	adiw	r26, 0x05	; 5
    2fcc:	2c 93       	st	X, r18
    2fce:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    2fd0:	8f 30       	cpi	r24, 0x0F	; 15
    2fd2:	49 f0       	breq	.+18     	; 0x2fe6 <process_tapping+0x2ea>
    2fd4:	8f 5f       	subi	r24, 0xFF	; 255
    2fd6:	98 2f       	mov	r25, r24
    2fd8:	92 95       	swap	r25
    2fda:	90 7f       	andi	r25, 0xF0	; 240
    2fdc:	82 2f       	mov	r24, r18
    2fde:	8f 70       	andi	r24, 0x0F	; 15
    2fe0:	89 2b       	or	r24, r25
    2fe2:	15 96       	adiw	r26, 0x05	; 5
    2fe4:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    2fe6:	c8 01       	movw	r24, r16
    2fe8:	0e 94 91 12 	call	0x2522	; 0x2522 <process_action>
                        tapping_key = *keyp;
    2fec:	86 e0       	ldi	r24, 0x06	; 6
    2fee:	f8 01       	movw	r30, r16
    2ff0:	a8 e9       	ldi	r26, 0x98	; 152
    2ff2:	b1 e0       	ldi	r27, 0x01	; 1
    2ff4:	01 90       	ld	r0, Z+
    2ff6:	0d 92       	st	X+, r0
    2ff8:	8a 95       	dec	r24
    2ffa:	e1 f7       	brne	.-8      	; 0x2ff4 <process_tapping+0x2f8>
    2ffc:	93 cf       	rjmp	.-218    	; 0x2f24 <process_tapping+0x228>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    2ffe:	86 e0       	ldi	r24, 0x06	; 6
    3000:	f8 01       	movw	r30, r16
    3002:	a8 e9       	ldi	r26, 0x98	; 152
    3004:	b1 e0       	ldi	r27, 0x01	; 1
    3006:	01 90       	ld	r0, Z+
    3008:	0d 92       	st	X+, r0
    300a:	8a 95       	dec	r24
    300c:	e1 f7       	brne	.-8      	; 0x3006 <process_tapping+0x30a>
                        return true;
    300e:	2d c0       	rjmp	.+90     	; 0x306a <process_tapping+0x36e>
                    }
                } else if (is_tap_key(event.key)) {
    3010:	4d 87       	std	Y+13, r20	; 0x0d
    3012:	5e 87       	std	Y+14, r21	; 0x0e
    3014:	8d 85       	ldd	r24, Y+13	; 0x0d
    3016:	9e 85       	ldd	r25, Y+14	; 0x0e
    3018:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <is_tap_key>
    301c:	81 11       	cpse	r24, r1
    301e:	40 cf       	rjmp	.-384    	; 0x2ea0 <process_tapping+0x1a4>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    3020:	80 91 9d 01 	lds	r24, 0x019D
    3024:	81 60       	ori	r24, 0x01	; 1
    3026:	80 93 9d 01 	sts	0x019D, r24
                    process_action(keyp);
    302a:	c8 01       	movw	r24, r16
    302c:	0e 94 91 12 	call	0x2522	; 0x2522 <process_action>
                    return true;
    3030:	1c c0       	rjmp	.+56     	; 0x306a <process_tapping+0x36e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    3032:	66 23       	and	r22, r22
    3034:	09 f4       	brne	.+2      	; 0x3038 <process_tapping+0x33c>
    3036:	58 cf       	rjmp	.-336    	; 0x2ee8 <process_tapping+0x1ec>
    3038:	4d 87       	std	Y+13, r20	; 0x0d
    303a:	5e 87       	std	Y+14, r21	; 0x0e
    303c:	8d 85       	ldd	r24, Y+13	; 0x0d
    303e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3040:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <is_tap_key>
    3044:	88 23       	and	r24, r24
    3046:	09 f4       	brne	.+2      	; 0x304a <process_tapping+0x34e>
    3048:	4f cf       	rjmp	.-354    	; 0x2ee8 <process_tapping+0x1ec>
    304a:	2a cf       	rjmp	.-428    	; 0x2ea0 <process_tapping+0x1a4>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    304c:	81 11       	cpse	r24, r1
    304e:	48 cf       	rjmp	.-368    	; 0x2ee0 <process_tapping+0x1e4>
    3050:	0c c0       	rjmp	.+24     	; 0x306a <process_tapping+0x36e>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    3052:	24 30       	cpi	r18, 0x04	; 4
    3054:	31 05       	cpc	r19, r1
    3056:	0c f0       	brlt	.+2      	; 0x305a <process_tapping+0x35e>
    3058:	47 cf       	rjmp	.-370    	; 0x2ee8 <process_tapping+0x1ec>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    305a:	9f 70       	andi	r25, 0x0F	; 15
    305c:	09 f4       	brne	.+2      	; 0x3060 <process_tapping+0x364>
    305e:	40 cf       	rjmp	.-384    	; 0x2ee0 <process_tapping+0x1e4>
    3060:	f8 01       	movw	r30, r16
    3062:	95 81       	ldd	r25, Z+5	; 0x05
    3064:	90 7f       	andi	r25, 0xF0	; 240
    3066:	09 f0       	breq	.+2      	; 0x306a <process_tapping+0x36e>
    3068:	3b cf       	rjmp	.-394    	; 0x2ee0 <process_tapping+0x1e4>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    306a:	8f 2d       	mov	r24, r15
    306c:	62 96       	adiw	r28, 0x12	; 18
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	1f 91       	pop	r17
    307e:	0f 91       	pop	r16
    3080:	ff 90       	pop	r15
    3082:	ef 90       	pop	r14
    3084:	df 90       	pop	r13
    3086:	cf 90       	pop	r12
    3088:	08 95       	ret

0000308a <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    308a:	1f 93       	push	r17
    308c:	cf 93       	push	r28
    308e:	df 93       	push	r29
    3090:	cd b7       	in	r28, 0x3d	; 61
    3092:	de b7       	in	r29, 0x3e	; 62
    3094:	2c 97       	sbiw	r28, 0x0c	; 12
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	4f 83       	std	Y+7, r20	; 0x07
    30a2:	58 87       	std	Y+8, r21	; 0x08
    30a4:	69 87       	std	Y+9, r22	; 0x09
    30a6:	7a 87       	std	Y+10, r23	; 0x0a
    30a8:	8b 87       	std	Y+11, r24	; 0x0b
    30aa:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    30ac:	ce 01       	movw	r24, r28
    30ae:	07 96       	adiw	r24, 0x07	; 7
    30b0:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <process_tapping>
    30b4:	88 23       	and	r24, r24
    30b6:	69 f0       	breq	.+26     	; 0x30d2 <action_tapping_process+0x48>
    30b8:	8f 81       	ldd	r24, Y+7	; 0x07
    30ba:	98 85       	ldd	r25, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    30bc:	2a 85       	ldd	r18, Y+10	; 0x0a
    30be:	3b 85       	ldd	r19, Y+11	; 0x0b
    30c0:	23 2b       	or	r18, r19
    30c2:	f1 f1       	breq	.+124    	; 0x3140 <action_tapping_process+0xb6>
    30c4:	9f 3f       	cpi	r25, 0xFF	; 255
    30c6:	09 f0       	breq	.+2      	; 0x30ca <action_tapping_process+0x40>
    30c8:	63 c0       	rjmp	.+198    	; 0x3190 <action_tapping_process+0x106>
    30ca:	8f 3f       	cpi	r24, 0xFF	; 255
    30cc:	09 f0       	breq	.+2      	; 0x30d0 <action_tapping_process+0x46>
    30ce:	60 c0       	rjmp	.+192    	; 0x3190 <action_tapping_process+0x106>
    30d0:	37 c0       	rjmp	.+110    	; 0x3140 <action_tapping_process+0xb6>
    30d2:	86 e0       	ldi	r24, 0x06	; 6
    30d4:	fe 01       	movw	r30, r28
    30d6:	37 96       	adiw	r30, 0x07	; 7
    30d8:	de 01       	movw	r26, r28
    30da:	11 96       	adiw	r26, 0x01	; 1
    30dc:	01 90       	ld	r0, Z+
    30de:	0d 92       	st	X+, r0
    30e0:	8a 95       	dec	r24
    30e2:	e1 f7       	brne	.-8      	; 0x30dc <action_tapping_process+0x52>
    30e4:	6f 81       	ldd	r22, Y+7	; 0x07
    30e6:	78 85       	ldd	r23, Y+8	; 0x08
    30e8:	ea 85       	ldd	r30, Y+10	; 0x0a
    30ea:	fb 85       	ldd	r31, Y+11	; 0x0b
    30ec:	30 97       	sbiw	r30, 0x00	; 0
    30ee:	41 f1       	breq	.+80     	; 0x3140 <action_tapping_process+0xb6>
    30f0:	7f 3f       	cpi	r23, 0xFF	; 255
    30f2:	11 f4       	brne	.+4      	; 0x30f8 <action_tapping_process+0x6e>
    30f4:	6f 3f       	cpi	r22, 0xFF	; 255
    30f6:	21 f1       	breq	.+72     	; 0x3140 <action_tapping_process+0xb6>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    30f8:	20 91 67 01 	lds	r18, 0x0167
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	c9 01       	movw	r24, r18
    3100:	01 96       	adiw	r24, 0x01	; 1
    3102:	87 70       	andi	r24, 0x07	; 7
    3104:	99 27       	eor	r25, r25
    3106:	40 91 66 01 	lds	r20, 0x0166
    310a:	50 e0       	ldi	r21, 0x00	; 0
    310c:	84 17       	cp	r24, r20
    310e:	95 07       	cpc	r25, r21
    3110:	09 f4       	brne	.+2      	; 0x3114 <action_tapping_process+0x8a>
    3112:	47 c0       	rjmp	.+142    	; 0x31a2 <action_tapping_process+0x118>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3114:	69 83       	std	Y+1, r22	; 0x01
    3116:	7a 83       	std	Y+2, r23	; 0x02
    3118:	fd 83       	std	Y+5, r31	; 0x05
    311a:	ec 83       	std	Y+4, r30	; 0x04
    311c:	96 e0       	ldi	r25, 0x06	; 6
    311e:	92 9f       	mul	r25, r18
    3120:	d0 01       	movw	r26, r0
    3122:	93 9f       	mul	r25, r19
    3124:	b0 0d       	add	r27, r0
    3126:	11 24       	eor	r1, r1
    3128:	a8 59       	subi	r26, 0x98	; 152
    312a:	be 4f       	sbci	r27, 0xFE	; 254
    312c:	fe 01       	movw	r30, r28
    312e:	31 96       	adiw	r30, 0x01	; 1
    3130:	01 90       	ld	r0, Z+
    3132:	0d 92       	st	X+, r0
    3134:	9a 95       	dec	r25
    3136:	e1 f7       	brne	.-8      	; 0x3130 <action_tapping_process+0xa6>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3138:	80 93 67 01 	sts	0x0167, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    313c:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3140:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3142:	80 91 66 01 	lds	r24, 0x0166
    3146:	90 91 67 01 	lds	r25, 0x0167
    314a:	89 17       	cp	r24, r25
    314c:	c1 f1       	breq	.+112    	; 0x31be <action_tapping_process+0x134>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    314e:	18 9f       	mul	r17, r24
    3150:	c0 01       	movw	r24, r0
    3152:	11 24       	eor	r1, r1
    3154:	88 59       	subi	r24, 0x98	; 152
    3156:	9e 4f       	sbci	r25, 0xFE	; 254
    3158:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <process_tapping>
    315c:	88 23       	and	r24, r24
    315e:	79 f1       	breq	.+94     	; 0x31be <action_tapping_process+0x134>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3160:	e0 91 66 01 	lds	r30, 0x0166
    3164:	1e 9f       	mul	r17, r30
    3166:	f0 01       	movw	r30, r0
    3168:	11 24       	eor	r1, r1
    316a:	e8 59       	subi	r30, 0x98	; 152
    316c:	fe 4f       	sbci	r31, 0xFE	; 254
    316e:	40 81       	ld	r20, Z
    3170:	51 81       	ldd	r21, Z+1	; 0x01
    3172:	62 81       	ldd	r22, Z+2	; 0x02
    3174:	73 81       	ldd	r23, Z+3	; 0x03
    3176:	84 81       	ldd	r24, Z+4	; 0x04
    3178:	95 81       	ldd	r25, Z+5	; 0x05
    317a:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    317e:	80 91 66 01 	lds	r24, 0x0166
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	01 96       	adiw	r24, 0x01	; 1
    3186:	87 70       	andi	r24, 0x07	; 7
    3188:	99 27       	eor	r25, r25
    318a:	80 93 66 01 	sts	0x0166, r24
    318e:	d9 cf       	rjmp	.-78     	; 0x3142 <action_tapping_process+0xb8>

void action_tapping_process(keyrecord_t record)
{
    if (process_tapping(&record)) {
        if (!IS_NOEVENT(record.event)) {
            debug("processed: "); debug_record(record); debug("\n");
    3190:	4f 81       	ldd	r20, Y+7	; 0x07
    3192:	58 85       	ldd	r21, Y+8	; 0x08
    3194:	69 85       	ldd	r22, Y+9	; 0x09
    3196:	7a 85       	ldd	r23, Y+10	; 0x0a
    3198:	8b 85       	ldd	r24, Y+11	; 0x0b
    319a:	9c 85       	ldd	r25, Y+12	; 0x0c
    319c:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <debug_record>
    31a0:	cf cf       	rjmp	.-98     	; 0x3140 <action_tapping_process+0xb6>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    31a2:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    31a6:	10 92 67 01 	sts	0x0167, r1
    waiting_buffer_tail = 0;
    31aa:	10 92 66 01 	sts	0x0166, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    31ae:	e8 e9       	ldi	r30, 0x98	; 152
    31b0:	f1 e0       	ldi	r31, 0x01	; 1
    31b2:	86 e0       	ldi	r24, 0x06	; 6
    31b4:	df 01       	movw	r26, r30
    31b6:	1d 92       	st	X+, r1
    31b8:	8a 95       	dec	r24
    31ba:	e9 f7       	brne	.-6      	; 0x31b6 <action_tapping_process+0x12c>
    31bc:	c1 cf       	rjmp	.-126    	; 0x3140 <action_tapping_process+0xb6>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    31be:	2c 96       	adiw	r28, 0x0c	; 12
    31c0:	0f b6       	in	r0, 0x3f	; 63
    31c2:	f8 94       	cli
    31c4:	de bf       	out	0x3e, r29	; 62
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	cd bf       	out	0x3d, r28	; 61
    31ca:	df 91       	pop	r29
    31cc:	cf 91       	pop	r28
    31ce:	1f 91       	pop	r17
    31d0:	08 95       	ret

000031d2 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    31d2:	df 92       	push	r13
    31d4:	ef 92       	push	r14
    31d6:	ff 92       	push	r15
    31d8:	0f 93       	push	r16
    31da:	1f 93       	push	r17
    31dc:	cf 93       	push	r28
    31de:	df 93       	push	r29
    31e0:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    31e2:	89 2b       	or	r24, r25
    31e4:	09 f4       	brne	.+2      	; 0x31e8 <action_macro_play+0x16>
    31e6:	8a c0       	rjmp	.+276    	; 0x32fc <action_macro_play+0x12a>
    31e8:	e1 2c       	mov	r14, r1
    31ea:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    31ec:	dd 24       	eor	r13, r13
    31ee:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    31f0:	ef 01       	movw	r28, r30
    31f2:	21 96       	adiw	r28, 0x01	; 1
    31f4:	84 91       	lpm	r24, Z
    31f6:	85 37       	cpi	r24, 0x75	; 117
    31f8:	09 f4       	brne	.+2      	; 0x31fc <action_macro_play+0x2a>
    31fa:	61 c0       	rjmp	.+194    	; 0x32be <action_macro_play+0xec>
    31fc:	58 f4       	brcc	.+22     	; 0x3214 <action_macro_play+0x42>
    31fe:	84 37       	cpi	r24, 0x74	; 116
    3200:	08 f0       	brcs	.+2      	; 0x3204 <action_macro_play+0x32>
    3202:	4e c0       	rjmp	.+156    	; 0x32a0 <action_macro_play+0xce>
    3204:	84 30       	cpi	r24, 0x04	; 4
    3206:	08 f0       	brcs	.+2      	; 0x320a <action_macro_play+0x38>
    3208:	6a c0       	rjmp	.+212    	; 0x32de <action_macro_play+0x10c>
    320a:	81 30       	cpi	r24, 0x01	; 1
    320c:	d1 f0       	breq	.+52     	; 0x3242 <action_macro_play+0x70>
    320e:	82 30       	cpi	r24, 0x02	; 2
    3210:	71 f1       	breq	.+92     	; 0x326e <action_macro_play+0x9c>
    3212:	74 c0       	rjmp	.+232    	; 0x32fc <action_macro_play+0x12a>
    3214:	88 37       	cpi	r24, 0x78	; 120
    3216:	09 f4       	brne	.+2      	; 0x321a <action_macro_play+0x48>
    3218:	5d c0       	rjmp	.+186    	; 0x32d4 <action_macro_play+0x102>
    321a:	50 f4       	brcc	.+20     	; 0x3230 <action_macro_play+0x5e>
    321c:	86 37       	cpi	r24, 0x76	; 118
    321e:	09 f4       	brne	.+2      	; 0x3222 <action_macro_play+0x50>
    3220:	55 c0       	rjmp	.+170    	; 0x32cc <action_macro_play+0xfa>
    3222:	87 37       	cpi	r24, 0x77	; 119
    3224:	09 f0       	breq	.+2      	; 0x3228 <action_macro_play+0x56>
    3226:	6a c0       	rjmp	.+212    	; 0x32fc <action_macro_play+0x12a>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    3228:	8e 2d       	mov	r24, r14
    322a:	0e 94 4d 1b 	call	0x369a	; 0x369a <set_mods>
    322e:	54 c0       	rjmp	.+168    	; 0x32d8 <action_macro_play+0x106>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3230:	9c e7       	ldi	r25, 0x7C	; 124
    3232:	98 0f       	add	r25, r24
    3234:	90 37       	cpi	r25, 0x70	; 112
    3236:	08 f0       	brcs	.+2      	; 0x323a <action_macro_play+0x68>
    3238:	61 c0       	rjmp	.+194    	; 0x32fc <action_macro_play+0x12a>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    323a:	8f 77       	andi	r24, 0x7F	; 127
    323c:	0e 94 34 12 	call	0x2468	; 0x2468 <unregister_code>
                break;
    3240:	50 c0       	rjmp	.+160    	; 0x32e2 <action_macro_play+0x110>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    3242:	8f 01       	movw	r16, r30
    3244:	0e 5f       	subi	r16, 0xFE	; 254
    3246:	1f 4f       	sbci	r17, 0xFF	; 255
    3248:	fe 01       	movw	r30, r28
    324a:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    324c:	90 e2       	ldi	r25, 0x20	; 32
    324e:	98 0f       	add	r25, r24
    3250:	98 30       	cpi	r25, 0x08	; 8
    3252:	50 f4       	brcc	.+20     	; 0x3268 <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    3254:	87 70       	andi	r24, 0x07	; 7
    3256:	fd 2d       	mov	r31, r13
    3258:	01 c0       	rjmp	.+2      	; 0x325c <action_macro_play+0x8a>
    325a:	ff 0f       	add	r31, r31
    325c:	8a 95       	dec	r24
    325e:	ea f7       	brpl	.-6      	; 0x325a <action_macro_play+0x88>
    3260:	8f 2f       	mov	r24, r31
    3262:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <add_weak_mods>
    3266:	14 c0       	rjmp	.+40     	; 0x3290 <action_macro_play+0xbe>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    3268:	0e 94 61 11 	call	0x22c2	; 0x22c2 <register_code>
    326c:	13 c0       	rjmp	.+38     	; 0x3294 <action_macro_play+0xc2>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    326e:	8f 01       	movw	r16, r30
    3270:	0e 5f       	subi	r16, 0xFE	; 254
    3272:	1f 4f       	sbci	r17, 0xFF	; 255
    3274:	fe 01       	movw	r30, r28
    3276:	c4 91       	lpm	r28, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3278:	80 e2       	ldi	r24, 0x20	; 32
    327a:	8c 0f       	add	r24, r28
    327c:	88 30       	cpi	r24, 0x08	; 8
    327e:	60 f4       	brcc	.+24     	; 0x3298 <action_macro_play+0xc6>
                    del_weak_mods(MOD_BIT(macro));
    3280:	c7 70       	andi	r28, 0x07	; 7
    3282:	8d 2d       	mov	r24, r13
    3284:	01 c0       	rjmp	.+2      	; 0x3288 <action_macro_play+0xb6>
    3286:	88 0f       	add	r24, r24
    3288:	ca 95       	dec	r28
    328a:	ea f7       	brpl	.-6      	; 0x3286 <action_macro_play+0xb4>
    328c:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <del_weak_mods>
                    send_keyboard_report();
    3290:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3294:	e8 01       	movw	r28, r16
    3296:	25 c0       	rjmp	.+74     	; 0x32e2 <action_macro_play+0x110>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    3298:	8c 2f       	mov	r24, r28
    329a:	0e 94 34 12 	call	0x2468	; 0x2468 <unregister_code>
    329e:	fa cf       	rjmp	.-12     	; 0x3294 <action_macro_play+0xc2>
                }
                break;
            case WAIT:
                MACRO_READ();
    32a0:	9f 01       	movw	r18, r30
    32a2:	2e 5f       	subi	r18, 0xFE	; 254
    32a4:	3f 4f       	sbci	r19, 0xFF	; 255
    32a6:	fe 01       	movw	r30, r28
    32a8:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    32aa:	cc 23       	and	r28, r28
    32ac:	69 f0       	breq	.+26     	; 0x32c8 <action_macro_play+0xf6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    32ae:	8f e9       	ldi	r24, 0x9F	; 159
    32b0:	9f e0       	ldi	r25, 0x0F	; 15
    32b2:	01 97       	sbiw	r24, 0x01	; 1
    32b4:	f1 f7       	brne	.-4      	; 0x32b2 <action_macro_play+0xe0>
    32b6:	00 c0       	rjmp	.+0      	; 0x32b8 <action_macro_play+0xe6>
    32b8:	00 00       	nop
    32ba:	c1 50       	subi	r28, 0x01	; 1
    32bc:	f6 cf       	rjmp	.-20     	; 0x32aa <action_macro_play+0xd8>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    32be:	9f 01       	movw	r18, r30
    32c0:	2e 5f       	subi	r18, 0xFE	; 254
    32c2:	3f 4f       	sbci	r19, 0xFF	; 255
    32c4:	fe 01       	movw	r30, r28
    32c6:	f4 90       	lpm	r15, Z
    32c8:	e9 01       	movw	r28, r18
                dprintf("INTERVAL(%u)\n", interval);
                break;
    32ca:	0b c0       	rjmp	.+22     	; 0x32e2 <action_macro_play+0x110>
            case MOD_STORE:
                mod_storage = get_mods();
    32cc:	0e 94 3d 1b 	call	0x367a	; 0x367a <get_mods>
    32d0:	e8 2e       	mov	r14, r24
                break;
    32d2:	07 c0       	rjmp	.+14     	; 0x32e2 <action_macro_play+0x110>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    32d4:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <clear_mods>
                send_keyboard_report();
    32d8:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <send_keyboard_report>
                break;
    32dc:	02 c0       	rjmp	.+4      	; 0x32e2 <action_macro_play+0x110>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    32de:	0e 94 61 11 	call	0x22c2	; 0x22c2 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    32e2:	8f 2d       	mov	r24, r15
    32e4:	88 23       	and	r24, r24
    32e6:	41 f0       	breq	.+16     	; 0x32f8 <action_macro_play+0x126>
    32e8:	ef e9       	ldi	r30, 0x9F	; 159
    32ea:	ff e0       	ldi	r31, 0x0F	; 15
    32ec:	31 97       	sbiw	r30, 0x01	; 1
    32ee:	f1 f7       	brne	.-4      	; 0x32ec <action_macro_play+0x11a>
    32f0:	00 c0       	rjmp	.+0      	; 0x32f2 <action_macro_play+0x120>
    32f2:	00 00       	nop
    32f4:	81 50       	subi	r24, 0x01	; 1
    32f6:	f6 cf       	rjmp	.-20     	; 0x32e4 <action_macro_play+0x112>
    32f8:	fe 01       	movw	r30, r28
    32fa:	7a cf       	rjmp	.-268    	; 0x31f0 <action_macro_play+0x1e>
    }
}
    32fc:	df 91       	pop	r29
    32fe:	cf 91       	pop	r28
    3300:	1f 91       	pop	r17
    3302:	0f 91       	pop	r16
    3304:	ff 90       	pop	r15
    3306:	ef 90       	pop	r14
    3308:	df 90       	pop	r13
    330a:	08 95       	ret

0000330c <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    330c:	08 95       	ret

0000330e <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    330e:	60 93 a2 01 	sts	0x01A2, r22
    3312:	70 93 a3 01 	sts	0x01A3, r23
    3316:	80 93 a4 01 	sts	0x01A4, r24
    331a:	90 93 a5 01 	sts	0x01A5, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    331e:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <clear_keyboard_but_mods>

00003322 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    3322:	0f 93       	push	r16
    3324:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    3326:	00 91 a2 01 	lds	r16, 0x01A2
    332a:	10 91 a3 01 	lds	r17, 0x01A3
    332e:	20 91 a4 01 	lds	r18, 0x01A4
    3332:	30 91 a5 01 	lds	r19, 0x01A5
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	80 2b       	or	r24, r16
    333c:	91 2b       	or	r25, r17
    333e:	a2 2b       	or	r26, r18
    3340:	b3 2b       	or	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3342:	80 93 a2 01 	sts	0x01A2, r24
    3346:	90 93 a3 01 	sts	0x01A3, r25
    334a:	a0 93 a4 01 	sts	0x01A4, r26
    334e:	b0 93 a5 01 	sts	0x01A5, r27

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    3352:	1f 91       	pop	r17
    3354:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3356:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <clear_keyboard_but_mods>

0000335a <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    335a:	0f 93       	push	r16
    335c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    335e:	00 91 a2 01 	lds	r16, 0x01A2
    3362:	10 91 a3 01 	lds	r17, 0x01A3
    3366:	20 91 a4 01 	lds	r18, 0x01A4
    336a:	30 91 a5 01 	lds	r19, 0x01A5
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	80 23       	and	r24, r16
    3374:	91 23       	and	r25, r17
    3376:	a2 23       	and	r26, r18
    3378:	b3 23       	and	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    337a:	80 93 a2 01 	sts	0x01A2, r24
    337e:	90 93 a3 01 	sts	0x01A3, r25
    3382:	a0 93 a4 01 	sts	0x01A4, r26
    3386:	b0 93 a5 01 	sts	0x01A5, r27
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    338a:	1f 91       	pop	r17
    338c:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    338e:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <clear_keyboard_but_mods>

00003392 <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    3392:	0f 93       	push	r16
    3394:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3396:	00 91 a2 01 	lds	r16, 0x01A2
    339a:	10 91 a3 01 	lds	r17, 0x01A3
    339e:	20 91 a4 01 	lds	r18, 0x01A4
    33a2:	30 91 a5 01 	lds	r19, 0x01A5
    33a6:	dc 01       	movw	r26, r24
    33a8:	cb 01       	movw	r24, r22
    33aa:	80 27       	eor	r24, r16
    33ac:	91 27       	eor	r25, r17
    33ae:	a2 27       	eor	r26, r18
    33b0:	b3 27       	eor	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    33b2:	80 93 a2 01 	sts	0x01A2, r24
    33b6:	90 93 a3 01 	sts	0x01A3, r25
    33ba:	a0 93 a4 01 	sts	0x01A4, r26
    33be:	b0 93 a5 01 	sts	0x01A5, r27
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    33c2:	1f 91       	pop	r17
    33c4:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    33c6:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <clear_keyboard_but_mods>

000033ca <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    33ca:	10 92 9e 01 	sts	0x019E, r1
    33ce:	10 92 9f 01 	sts	0x019F, r1
    33d2:	10 92 a0 01 	sts	0x01A0, r1
    33d6:	10 92 a1 01 	sts	0x01A1, r1
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    33da:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <clear_keyboard_but_mods>

000033de <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    33de:	41 e0       	ldi	r20, 0x01	; 1
    33e0:	50 e0       	ldi	r21, 0x00	; 0
    33e2:	60 e0       	ldi	r22, 0x00	; 0
    33e4:	70 e0       	ldi	r23, 0x00	; 0
    33e6:	04 c0       	rjmp	.+8      	; 0x33f0 <layer_move+0x12>
    33e8:	44 0f       	add	r20, r20
    33ea:	55 1f       	adc	r21, r21
    33ec:	66 1f       	adc	r22, r22
    33ee:	77 1f       	adc	r23, r23
    33f0:	8a 95       	dec	r24
    33f2:	d2 f7       	brpl	.-12     	; 0x33e8 <layer_move+0xa>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    33f4:	40 93 9e 01 	sts	0x019E, r20
    33f8:	50 93 9f 01 	sts	0x019F, r21
    33fc:	60 93 a0 01 	sts	0x01A0, r22
    3400:	70 93 a1 01 	sts	0x01A1, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3404:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <clear_keyboard_but_mods>

00003408 <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3408:	41 e0       	ldi	r20, 0x01	; 1
    340a:	50 e0       	ldi	r21, 0x00	; 0
    340c:	60 e0       	ldi	r22, 0x00	; 0
    340e:	70 e0       	ldi	r23, 0x00	; 0
    3410:	04 c0       	rjmp	.+8      	; 0x341a <layer_on+0x12>
    3412:	44 0f       	add	r20, r20
    3414:	55 1f       	adc	r21, r21
    3416:	66 1f       	adc	r22, r22
    3418:	77 1f       	adc	r23, r23
    341a:	8a 95       	dec	r24
    341c:	d2 f7       	brpl	.-12     	; 0x3412 <layer_on+0xa>
    341e:	80 91 9e 01 	lds	r24, 0x019E
    3422:	90 91 9f 01 	lds	r25, 0x019F
    3426:	a0 91 a0 01 	lds	r26, 0x01A0
    342a:	b0 91 a1 01 	lds	r27, 0x01A1
    342e:	48 2b       	or	r20, r24
    3430:	59 2b       	or	r21, r25
    3432:	6a 2b       	or	r22, r26
    3434:	7b 2b       	or	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3436:	40 93 9e 01 	sts	0x019E, r20
    343a:	50 93 9f 01 	sts	0x019F, r21
    343e:	60 93 a0 01 	sts	0x01A0, r22
    3442:	70 93 a1 01 	sts	0x01A1, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3446:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <clear_keyboard_but_mods>

0000344a <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    344a:	41 e0       	ldi	r20, 0x01	; 1
    344c:	50 e0       	ldi	r21, 0x00	; 0
    344e:	60 e0       	ldi	r22, 0x00	; 0
    3450:	70 e0       	ldi	r23, 0x00	; 0
    3452:	04 c0       	rjmp	.+8      	; 0x345c <layer_off+0x12>
    3454:	44 0f       	add	r20, r20
    3456:	55 1f       	adc	r21, r21
    3458:	66 1f       	adc	r22, r22
    345a:	77 1f       	adc	r23, r23
    345c:	8a 95       	dec	r24
    345e:	d2 f7       	brpl	.-12     	; 0x3454 <layer_off+0xa>
    3460:	40 95       	com	r20
    3462:	50 95       	com	r21
    3464:	60 95       	com	r22
    3466:	70 95       	com	r23
    3468:	80 91 9e 01 	lds	r24, 0x019E
    346c:	90 91 9f 01 	lds	r25, 0x019F
    3470:	a0 91 a0 01 	lds	r26, 0x01A0
    3474:	b0 91 a1 01 	lds	r27, 0x01A1
    3478:	48 23       	and	r20, r24
    347a:	59 23       	and	r21, r25
    347c:	6a 23       	and	r22, r26
    347e:	7b 23       	and	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3480:	40 93 9e 01 	sts	0x019E, r20
    3484:	50 93 9f 01 	sts	0x019F, r21
    3488:	60 93 a0 01 	sts	0x01A0, r22
    348c:	70 93 a1 01 	sts	0x01A1, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3490:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <clear_keyboard_but_mods>

00003494 <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3494:	41 e0       	ldi	r20, 0x01	; 1
    3496:	50 e0       	ldi	r21, 0x00	; 0
    3498:	60 e0       	ldi	r22, 0x00	; 0
    349a:	70 e0       	ldi	r23, 0x00	; 0
    349c:	04 c0       	rjmp	.+8      	; 0x34a6 <layer_invert+0x12>
    349e:	44 0f       	add	r20, r20
    34a0:	55 1f       	adc	r21, r21
    34a2:	66 1f       	adc	r22, r22
    34a4:	77 1f       	adc	r23, r23
    34a6:	8a 95       	dec	r24
    34a8:	d2 f7       	brpl	.-12     	; 0x349e <layer_invert+0xa>
    34aa:	80 91 9e 01 	lds	r24, 0x019E
    34ae:	90 91 9f 01 	lds	r25, 0x019F
    34b2:	a0 91 a0 01 	lds	r26, 0x01A0
    34b6:	b0 91 a1 01 	lds	r27, 0x01A1
    34ba:	48 27       	eor	r20, r24
    34bc:	59 27       	eor	r21, r25
    34be:	6a 27       	eor	r22, r26
    34c0:	7b 27       	eor	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    34c2:	40 93 9e 01 	sts	0x019E, r20
    34c6:	50 93 9f 01 	sts	0x019F, r21
    34ca:	60 93 a0 01 	sts	0x01A0, r22
    34ce:	70 93 a1 01 	sts	0x01A1, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    34d2:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <clear_keyboard_but_mods>

000034d6 <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    34d6:	0f 93       	push	r16
    34d8:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    34da:	00 91 9e 01 	lds	r16, 0x019E
    34de:	10 91 9f 01 	lds	r17, 0x019F
    34e2:	20 91 a0 01 	lds	r18, 0x01A0
    34e6:	30 91 a1 01 	lds	r19, 0x01A1
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	80 2b       	or	r24, r16
    34f0:	91 2b       	or	r25, r17
    34f2:	a2 2b       	or	r26, r18
    34f4:	b3 2b       	or	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    34f6:	80 93 9e 01 	sts	0x019E, r24
    34fa:	90 93 9f 01 	sts	0x019F, r25
    34fe:	a0 93 a0 01 	sts	0x01A0, r26
    3502:	b0 93 a1 01 	sts	0x01A1, r27
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
    3506:	1f 91       	pop	r17
    3508:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    350a:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <clear_keyboard_but_mods>

0000350e <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    350e:	0f 93       	push	r16
    3510:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3512:	00 91 9e 01 	lds	r16, 0x019E
    3516:	10 91 9f 01 	lds	r17, 0x019F
    351a:	20 91 a0 01 	lds	r18, 0x01A0
    351e:	30 91 a1 01 	lds	r19, 0x01A1
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	80 23       	and	r24, r16
    3528:	91 23       	and	r25, r17
    352a:	a2 23       	and	r26, r18
    352c:	b3 23       	and	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    352e:	80 93 9e 01 	sts	0x019E, r24
    3532:	90 93 9f 01 	sts	0x019F, r25
    3536:	a0 93 a0 01 	sts	0x01A0, r26
    353a:	b0 93 a1 01 	sts	0x01A1, r27
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
    353e:	1f 91       	pop	r17
    3540:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3542:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <clear_keyboard_but_mods>

00003546 <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    3546:	0f 93       	push	r16
    3548:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    354a:	00 91 9e 01 	lds	r16, 0x019E
    354e:	10 91 9f 01 	lds	r17, 0x019F
    3552:	20 91 a0 01 	lds	r18, 0x01A0
    3556:	30 91 a1 01 	lds	r19, 0x01A1
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	80 27       	eor	r24, r16
    3560:	91 27       	eor	r25, r17
    3562:	a2 27       	eor	r26, r18
    3564:	b3 27       	eor	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3566:	80 93 9e 01 	sts	0x019E, r24
    356a:	90 93 9f 01 	sts	0x019F, r25
    356e:	a0 93 a0 01 	sts	0x01A0, r26
    3572:	b0 93 a1 01 	sts	0x01A1, r27
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
}
    3576:	1f 91       	pop	r17
    3578:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    357a:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <clear_keyboard_but_mods>

0000357e <layer_debug>:
{
    layer_state_set(layer_state ^ state);
}

void layer_debug(void)
{
    357e:	08 95       	ret

00003580 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3580:	cf 92       	push	r12
    3582:	df 92       	push	r13
    3584:	ef 92       	push	r14
    3586:	ff 92       	push	r15
    3588:	0f 93       	push	r16
    358a:	1f 93       	push	r17
    358c:	cf 93       	push	r28
    358e:	df 93       	push	r29
    3590:	8c 01       	movw	r16, r24
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3592:	c0 90 a2 01 	lds	r12, 0x01A2
    3596:	d0 90 a3 01 	lds	r13, 0x01A3
    359a:	e0 90 a4 01 	lds	r14, 0x01A4
    359e:	f0 90 a5 01 	lds	r15, 0x01A5
    35a2:	40 91 9e 01 	lds	r20, 0x019E
    35a6:	50 91 9f 01 	lds	r21, 0x019F
    35aa:	60 91 a0 01 	lds	r22, 0x01A0
    35ae:	70 91 a1 01 	lds	r23, 0x01A1
    35b2:	c4 2a       	or	r12, r20
    35b4:	d5 2a       	or	r13, r21
    35b6:	e6 2a       	or	r14, r22
    35b8:	f7 2a       	or	r15, r23
    35ba:	cf e1       	ldi	r28, 0x1F	; 31
    35bc:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    35be:	d7 01       	movw	r26, r14
    35c0:	c6 01       	movw	r24, r12
    35c2:	0c 2e       	mov	r0, r28
    35c4:	04 c0       	rjmp	.+8      	; 0x35ce <layer_switch_get_action+0x4e>
    35c6:	b6 95       	lsr	r27
    35c8:	a7 95       	ror	r26
    35ca:	97 95       	ror	r25
    35cc:	87 95       	ror	r24
    35ce:	0a 94       	dec	r0
    35d0:	d2 f7       	brpl	.-12     	; 0x35c6 <layer_switch_get_action+0x46>
    35d2:	80 ff       	sbrs	r24, 0
    35d4:	07 c0       	rjmp	.+14     	; 0x35e4 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    35d6:	b8 01       	movw	r22, r16
    35d8:	8c 2f       	mov	r24, r28
    35da:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    35de:	81 30       	cpi	r24, 0x01	; 1
    35e0:	91 05       	cpc	r25, r1
    35e2:	31 f4       	brne	.+12     	; 0x35f0 <layer_switch_get_action+0x70>
    35e4:	21 97       	sbiw	r28, 0x01	; 1
    35e6:	58 f7       	brcc	.-42     	; 0x35be <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    35e8:	b8 01       	movw	r22, r16
    35ea:	80 e0       	ldi	r24, 0x00	; 0
    35ec:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    35f0:	df 91       	pop	r29
    35f2:	cf 91       	pop	r28
    35f4:	1f 91       	pop	r17
    35f6:	0f 91       	pop	r16
    35f8:	ff 90       	pop	r15
    35fa:	ef 90       	pop	r14
    35fc:	df 90       	pop	r13
    35fe:	cf 90       	pop	r12
    3600:	08 95       	ret

00003602 <add_key>:
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3602:	20 91 0c 01 	lds	r18, 0x010C
    3606:	30 91 0d 01 	lds	r19, 0x010D
    360a:	f9 01       	movw	r30, r18
    360c:	32 96       	adiw	r30, 0x02	; 2
    keyboard_report->keys[cb_tail] = code;
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    360e:	9f ef       	ldi	r25, 0xFF	; 255
    // add to tail
    keyboard_report->keys[cb_tail] = code;
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    3610:	40 e0       	ldi	r20, 0x00	; 0
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3612:	51 91       	ld	r21, Z+
    3614:	58 17       	cp	r21, r24
    3616:	89 f0       	breq	.+34     	; 0x363a <add_key+0x38>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3618:	9f 3f       	cpi	r25, 0xFF	; 255
    361a:	19 f4       	brne	.+6      	; 0x3622 <add_key+0x20>
    361c:	51 11       	cpse	r21, r1
    361e:	01 c0       	rjmp	.+2      	; 0x3622 <add_key+0x20>
    3620:	94 2f       	mov	r25, r20
    3622:	4f 5f       	subi	r20, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3624:	46 30       	cpi	r20, 0x06	; 6
    3626:	a9 f7       	brne	.-22     	; 0x3612 <add_key+0x10>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    3628:	9f 3f       	cpi	r25, 0xFF	; 255
    362a:	39 f0       	breq	.+14     	; 0x363a <add_key+0x38>
            keyboard_report->keys[empty] = code;
    362c:	f9 01       	movw	r30, r18
    362e:	e9 0f       	add	r30, r25
    3630:	f1 1d       	adc	r31, r1
    3632:	97 fd       	sbrc	r25, 7
    3634:	fa 95       	dec	r31
    3636:	82 83       	std	Z+2, r24	; 0x02
    3638:	08 95       	ret
    363a:	08 95       	ret

0000363c <del_key>:
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    363c:	20 91 0c 01 	lds	r18, 0x010C
    3640:	30 91 0d 01 	lds	r19, 0x010D
    3644:	f9 01       	movw	r30, r18
    3646:	32 96       	adiw	r30, 0x02	; 2
    3648:	28 5f       	subi	r18, 0xF8	; 248
    364a:	3f 4f       	sbci	r19, 0xFF	; 255
    364c:	90 81       	ld	r25, Z
    364e:	98 13       	cpse	r25, r24
    3650:	01 c0       	rjmp	.+2      	; 0x3654 <del_key+0x18>
            keyboard_report->keys[i] = 0;
    3652:	10 82       	st	Z, r1
    3654:	31 96       	adiw	r30, 0x01	; 1
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3656:	e2 17       	cp	r30, r18
    3658:	f3 07       	cpc	r31, r19
    365a:	c1 f7       	brne	.-16     	; 0x364c <del_key+0x10>
        del_key_bit(key);
        return;
    }
#endif
    del_key_byte(key);
}
    365c:	08 95       	ret

0000365e <clear_keys>:

void clear_keys(void)
{
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3662:	e0 91 0c 01 	lds	r30, 0x010C
    3666:	f0 91 0d 01 	lds	r31, 0x010D
    366a:	e8 0f       	add	r30, r24
    366c:	f9 1f       	adc	r31, r25
    366e:	10 82       	st	Z, r1
    3670:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3672:	88 30       	cpi	r24, 0x08	; 8
    3674:	91 05       	cpc	r25, r1
    3676:	a9 f7       	brne	.-22     	; 0x3662 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3678:	08 95       	ret

0000367a <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    367a:	80 91 b0 01 	lds	r24, 0x01B0
    367e:	08 95       	ret

00003680 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    3680:	90 91 b0 01 	lds	r25, 0x01B0
    3684:	89 2b       	or	r24, r25
    3686:	80 93 b0 01 	sts	0x01B0, r24
    368a:	08 95       	ret

0000368c <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    368c:	80 95       	com	r24
    368e:	90 91 b0 01 	lds	r25, 0x01B0
    3692:	89 23       	and	r24, r25
    3694:	80 93 b0 01 	sts	0x01B0, r24
    3698:	08 95       	ret

0000369a <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    369a:	80 93 b0 01 	sts	0x01B0, r24
    369e:	08 95       	ret

000036a0 <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    36a0:	10 92 b0 01 	sts	0x01B0, r1
    36a4:	08 95       	ret

000036a6 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    36a6:	90 91 af 01 	lds	r25, 0x01AF
    36aa:	89 2b       	or	r24, r25
    36ac:	80 93 af 01 	sts	0x01AF, r24
    36b0:	08 95       	ret

000036b2 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    36b2:	80 95       	com	r24
    36b4:	90 91 af 01 	lds	r25, 0x01AF
    36b8:	89 23       	and	r24, r25
    36ba:	80 93 af 01 	sts	0x01AF, r24
    36be:	08 95       	ret

000036c0 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    36c0:	10 92 af 01 	sts	0x01AF, r1
    36c4:	08 95       	ret

000036c6 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    36c6:	80 93 a6 01 	sts	0x01A6, r24
    36ca:	08 95       	ret

000036cc <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    36cc:	10 92 a6 01 	sts	0x01A6, r1
    36d0:	08 95       	ret

000036d2 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    36d2:	80 91 0c 01 	lds	r24, 0x010C
    36d6:	90 91 0d 01 	lds	r25, 0x010D
    36da:	fc 01       	movw	r30, r24
    36dc:	31 96       	adiw	r30, 0x01	; 1
    36de:	9c 01       	movw	r18, r24
    36e0:	28 5f       	subi	r18, 0xF8	; 248
    36e2:	3f 4f       	sbci	r19, 0xFF	; 255
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    36e4:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    36e6:	91 91       	ld	r25, Z+
    36e8:	91 11       	cpse	r25, r1
            cnt++;
    36ea:	8f 5f       	subi	r24, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    36ec:	e2 17       	cp	r30, r18
    36ee:	f3 07       	cpc	r31, r19
    36f0:	d1 f7       	brne	.-12     	; 0x36e6 <has_anykey+0x14>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    36f2:	08 95       	ret

000036f4 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    36f4:	e0 91 0c 01 	lds	r30, 0x010C
    36f8:	f0 91 0d 01 	lds	r31, 0x010D
    36fc:	80 91 b0 01 	lds	r24, 0x01B0
    3700:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3702:	e0 91 0c 01 	lds	r30, 0x010C
    3706:	f0 91 0d 01 	lds	r31, 0x010D
    370a:	90 81       	ld	r25, Z
    370c:	80 91 af 01 	lds	r24, 0x01AF
    3710:	89 2b       	or	r24, r25
    3712:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3714:	80 91 a6 01 	lds	r24, 0x01A6
    3718:	88 23       	and	r24, r24
    371a:	61 f0       	breq	.+24     	; 0x3734 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    371c:	e0 91 0c 01 	lds	r30, 0x010C
    3720:	f0 91 0d 01 	lds	r31, 0x010D
    3724:	90 81       	ld	r25, Z
    3726:	89 2b       	or	r24, r25
    3728:	80 83       	st	Z, r24
        if (has_anykey()) {
    372a:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <has_anykey>
    372e:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3730:	10 92 a6 01 	sts	0x01A6, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3734:	80 91 0c 01 	lds	r24, 0x010C
    3738:	90 91 0d 01 	lds	r25, 0x010D
    373c:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <host_keyboard_send>

00003740 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3740:	90 93 33 01 	sts	0x0133, r25
    3744:	80 93 32 01 	sts	0x0132, r24
    3748:	08 95       	ret

0000374a <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    374a:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    374c:	98 2f       	mov	r25, r24
    374e:	9c 7c       	andi	r25, 0xCC	; 204
    3750:	39 2f       	mov	r19, r25
    3752:	36 95       	lsr	r19
    3754:	36 95       	lsr	r19
    3756:	28 2f       	mov	r18, r24
    3758:	23 73       	andi	r18, 0x33	; 51
    375a:	44 e0       	ldi	r20, 0x04	; 4
    375c:	24 9f       	mul	r18, r20
    375e:	c0 01       	movw	r24, r0
    3760:	11 24       	eor	r1, r1
    3762:	93 2f       	mov	r25, r19
    3764:	98 2b       	or	r25, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3766:	29 2f       	mov	r18, r25
    3768:	2a 7a       	andi	r18, 0xAA	; 170
    376a:	26 95       	lsr	r18
    376c:	89 2f       	mov	r24, r25
    376e:	85 75       	andi	r24, 0x55	; 85
    3770:	88 0f       	add	r24, r24
    return bits;
}
    3772:	82 2b       	or	r24, r18
    3774:	08 95       	ret

00003776 <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3776:	1f 93       	push	r17
    3778:	cf 93       	push	r28
    377a:	df 93       	push	r29
    377c:	1f 92       	push	r1
    377e:	cd b7       	in	r28, 0x3d	; 61
    3780:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3782:	99 83       	std	Y+1, r25	; 0x01
    3784:	0e 94 a5 1b 	call	0x374a	; 0x374a <bitrev>
    3788:	18 2f       	mov	r17, r24
    378a:	99 81       	ldd	r25, Y+1	; 0x01
    378c:	89 2f       	mov	r24, r25
    378e:	0e 94 a5 1b 	call	0x374a	; 0x374a <bitrev>
    3792:	21 2f       	mov	r18, r17
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	32 2f       	mov	r19, r18
    3798:	22 27       	eor	r18, r18
    return bits;
}
    379a:	a9 01       	movw	r20, r18
    379c:	48 2b       	or	r20, r24
    379e:	ca 01       	movw	r24, r20
    37a0:	0f 90       	pop	r0
    37a2:	df 91       	pop	r29
    37a4:	cf 91       	pop	r28
    37a6:	1f 91       	pop	r17
    37a8:	08 95       	ret

000037aa <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    37aa:	80 91 c6 01 	lds	r24, 0x01C6
    37ae:	84 30       	cpi	r24, 0x04	; 4
    37b0:	09 f1       	breq	.+66     	; 0x37f4 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    37b2:	10 92 b2 01 	sts	0x01B2, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    37b6:	20 e4       	ldi	r18, 0x40	; 64
    37b8:	88 e1       	ldi	r24, 0x18	; 24
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	0f b6       	in	r0, 0x3f	; 63
    37be:	f8 94       	cli
    37c0:	a8 95       	wdr
    37c2:	80 93 60 00 	sts	0x0060, r24
    37c6:	0f be       	out	0x3f, r0	; 63
    37c8:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    37cc:	83 b7       	in	r24, 0x33	; 51
    37ce:	81 7f       	andi	r24, 0xF1	; 241
    37d0:	84 60       	ori	r24, 0x04	; 4
    37d2:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    37d4:	83 b7       	in	r24, 0x33	; 51
    37d6:	81 60       	ori	r24, 0x01	; 1
    37d8:	83 bf       	out	0x33, r24	; 51
    sei();
    37da:	78 94       	sei
    sleep_cpu();
    37dc:	88 95       	sleep
    sleep_disable();
    37de:	83 b7       	in	r24, 0x33	; 51
    37e0:	8e 7f       	andi	r24, 0xFE	; 254
    37e2:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    37e4:	88 e1       	ldi	r24, 0x18	; 24
    37e6:	0f b6       	in	r0, 0x3f	; 63
    37e8:	f8 94       	cli
    37ea:	80 93 60 00 	sts	0x0060, r24
    37ee:	10 92 60 00 	sts	0x0060, r1
    37f2:	0f be       	out	0x3f, r0	; 63
    37f4:	08 95       	ret

000037f6 <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    37f6:	08 95       	ret

000037f8 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    37f8:	08 95       	ret

000037fa <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    37fa:	cf 93       	push	r28
    matrix_power_up();
    37fc:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <matrix_power_up>
    matrix_scan();
    3800:	0e 94 c5 06 	call	0xd8a	; 0xd8a <matrix_scan>
    matrix_power_down();
    3804:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3808:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    380a:	8c 2f       	mov	r24, r28
    380c:	0e 94 e7 07 	call	0xfce	; 0xfce <matrix_get_row>
    3810:	89 2b       	or	r24, r25
    3812:	29 f4       	brne	.+10     	; 0x381e <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3814:	cf 5f       	subi	r28, 0xFF	; 255
    3816:	c5 30       	cpi	r28, 0x05	; 5
    3818:	c1 f7       	brne	.-16     	; 0x380a <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    381a:	80 e0       	ldi	r24, 0x00	; 0
    381c:	01 c0       	rjmp	.+2      	; 0x3820 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    381e:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3820:	cf 91       	pop	r28
    3822:	08 95       	ret

00003824 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3824:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <clear_keyboard>

00003828 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3828:	1f 92       	push	r1
    382a:	0f 92       	push	r0
    382c:	0f b6       	in	r0, 0x3f	; 63
    382e:	0f 92       	push	r0
    3830:	11 24       	eor	r1, r1
    3832:	8f 93       	push	r24
    3834:	9f 93       	push	r25
    3836:	af 93       	push	r26
    3838:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    383a:	80 91 b2 01 	lds	r24, 0x01B2
    383e:	81 11       	cpse	r24, r1
    3840:	13 c0       	rjmp	.+38     	; 0x3868 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3842:	80 91 b3 01 	lds	r24, 0x01B3
    3846:	90 91 b4 01 	lds	r25, 0x01B4
    384a:	a0 91 b5 01 	lds	r26, 0x01B5
    384e:	b0 91 b6 01 	lds	r27, 0x01B6
    3852:	41 96       	adiw	r24, 0x11	; 17
    3854:	a1 1d       	adc	r26, r1
    3856:	b1 1d       	adc	r27, r1
    3858:	80 93 b3 01 	sts	0x01B3, r24
    385c:	90 93 b4 01 	sts	0x01B4, r25
    3860:	a0 93 b5 01 	sts	0x01B5, r26
    3864:	b0 93 b6 01 	sts	0x01B6, r27
            break;
        default:
            ;
    }
}
    3868:	bf 91       	pop	r27
    386a:	af 91       	pop	r26
    386c:	9f 91       	pop	r25
    386e:	8f 91       	pop	r24
    3870:	0f 90       	pop	r0
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	0f 90       	pop	r0
    3876:	1f 90       	pop	r1
    3878:	18 95       	reti

0000387a <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    387a:	82 e0       	ldi	r24, 0x02	; 2
    387c:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    387e:	93 e0       	ldi	r25, 0x03	; 3
    3880:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3882:	9a ef       	ldi	r25, 0xFA	; 250
    3884:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3886:	80 93 6e 00 	sts	0x006E, r24
    388a:	08 95       	ret

0000388c <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    388c:	2f b7       	in	r18, 0x3f	; 63
    cli();
    388e:	f8 94       	cli
    t = timer_count;
    3890:	80 91 b3 01 	lds	r24, 0x01B3
    3894:	90 91 b4 01 	lds	r25, 0x01B4
    3898:	a0 91 b5 01 	lds	r26, 0x01B5
    389c:	b0 91 b6 01 	lds	r27, 0x01B6
    SREG = sreg;
    38a0:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    38a2:	08 95       	ret

000038a4 <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    38a4:	2f b7       	in	r18, 0x3f	; 63
    cli();
    38a6:	f8 94       	cli
    t = timer_count;
    38a8:	60 91 b3 01 	lds	r22, 0x01B3
    38ac:	70 91 b4 01 	lds	r23, 0x01B4
    38b0:	80 91 b5 01 	lds	r24, 0x01B5
    38b4:	90 91 b6 01 	lds	r25, 0x01B6
    SREG = sreg;
    38b8:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    38ba:	08 95       	ret

000038bc <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    38bc:	cf 92       	push	r12
    38be:	df 92       	push	r13
    38c0:	ef 92       	push	r14
    38c2:	ff 92       	push	r15
    38c4:	0f 93       	push	r16
    38c6:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    38c8:	2f b7       	in	r18, 0x3f	; 63
    cli();
    38ca:	f8 94       	cli
    t = timer_count;
    38cc:	40 91 b3 01 	lds	r20, 0x01B3
    38d0:	50 91 b4 01 	lds	r21, 0x01B4
    38d4:	60 91 b5 01 	lds	r22, 0x01B5
    38d8:	70 91 b6 01 	lds	r23, 0x01B6
    SREG = sreg;
    38dc:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    38de:	6a 01       	movw	r12, r20
    38e0:	7b 01       	movw	r14, r22
    38e2:	ee 24       	eor	r14, r14
    38e4:	ff 24       	eor	r15, r15
    38e6:	8c 01       	movw	r16, r24
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	c0 16       	cp	r12, r16
    38ee:	d1 06       	cpc	r13, r17
    38f0:	e2 06       	cpc	r14, r18
    38f2:	f3 06       	cpc	r15, r19
    38f4:	10 f4       	brcc	.+4      	; 0x38fa <timer_elapsed+0x3e>
    38f6:	41 50       	subi	r20, 0x01	; 1
    38f8:	51 09       	sbc	r21, r1
    38fa:	9a 01       	movw	r18, r20
    38fc:	28 1b       	sub	r18, r24
    38fe:	39 0b       	sbc	r19, r25
    3900:	c9 01       	movw	r24, r18
}
    3902:	1f 91       	pop	r17
    3904:	0f 91       	pop	r16
    3906:	ff 90       	pop	r15
    3908:	ef 90       	pop	r14
    390a:	df 90       	pop	r13
    390c:	cf 90       	pop	r12
    390e:	08 95       	ret

00003910 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3910:	1f 92       	push	r1
    3912:	0f 92       	push	r0
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	0f 92       	push	r0
    3918:	11 24       	eor	r1, r1
    391a:	8f 93       	push	r24
    391c:	9f 93       	push	r25
    391e:	af 93       	push	r26
    3920:	bf 93       	push	r27
    timer_count++;
    3922:	80 91 b3 01 	lds	r24, 0x01B3
    3926:	90 91 b4 01 	lds	r25, 0x01B4
    392a:	a0 91 b5 01 	lds	r26, 0x01B5
    392e:	b0 91 b6 01 	lds	r27, 0x01B6
    3932:	01 96       	adiw	r24, 0x01	; 1
    3934:	a1 1d       	adc	r26, r1
    3936:	b1 1d       	adc	r27, r1
    3938:	80 93 b3 01 	sts	0x01B3, r24
    393c:	90 93 b4 01 	sts	0x01B4, r25
    3940:	a0 93 b5 01 	sts	0x01B5, r26
    3944:	b0 93 b6 01 	sts	0x01B6, r27
}
    3948:	bf 91       	pop	r27
    394a:	af 91       	pop	r26
    394c:	9f 91       	pop	r25
    394e:	8f 91       	pop	r24
    3950:	0f 90       	pop	r0
    3952:	0f be       	out	0x3f, r0	; 63
    3954:	0f 90       	pop	r0
    3956:	1f 90       	pop	r1
    3958:	18 95       	reti

0000395a <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    395a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <USB_Disable>
    cli();
    395e:	f8 94       	cli
    3960:	2f ef       	ldi	r18, 0xFF	; 255
    3962:	87 ea       	ldi	r24, 0xA7	; 167
    3964:	91 e6       	ldi	r25, 0x61	; 97
    3966:	21 50       	subi	r18, 0x01	; 1
    3968:	80 40       	sbci	r24, 0x00	; 0
    396a:	90 40       	sbci	r25, 0x00	; 0
    396c:	e1 f7       	brne	.-8      	; 0x3966 <bootloader_jump+0xc>
    396e:	00 c0       	rjmp	.+0      	; 0x3970 <bootloader_jump+0x16>
    3970:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3972:	87 e0       	ldi	r24, 0x07	; 7
    3974:	90 eb       	ldi	r25, 0xB0	; 176
    3976:	dc 01       	movw	r26, r24
    3978:	80 93 d0 01 	sts	0x01D0, r24
    397c:	90 93 d1 01 	sts	0x01D1, r25
    3980:	a0 93 d2 01 	sts	0x01D2, r26
    3984:	b0 93 d3 01 	sts	0x01D3, r27
    wdt_enable(WDTO_250MS);
    3988:	9c e0       	ldi	r25, 0x0C	; 12
    398a:	88 e1       	ldi	r24, 0x18	; 24
    398c:	0f b6       	in	r0, 0x3f	; 63
    398e:	f8 94       	cli
    3990:	a8 95       	wdr
    3992:	80 93 60 00 	sts	0x0060, r24
    3996:	0f be       	out	0x3f, r0	; 63
    3998:	90 93 60 00 	sts	0x0060, r25
    for (;;);
    399c:	ff cf       	rjmp	.-2      	; 0x399c <bootloader_jump+0x42>

0000399e <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    399e:	8f 3a       	cpi	r24, 0xAF	; 175
    39a0:	48 f4       	brcc	.+18     	; 0x39b4 <keycode_to_action+0x16>
    39a2:	88 3a       	cpi	r24, 0xA8	; 168
    39a4:	48 f5       	brcc	.+82     	; 0x39f8 <keycode_to_action+0x5a>
    39a6:	85 3a       	cpi	r24, 0xA5	; 165
    39a8:	00 f5       	brcc	.+64     	; 0x39ea <keycode_to_action+0x4c>
    39aa:	84 30       	cpi	r24, 0x04	; 4
    39ac:	e0 f4       	brcc	.+56     	; 0x39e6 <keycode_to_action+0x48>
    39ae:	81 30       	cpi	r24, 0x01	; 1
    39b0:	a9 f1       	breq	.+106    	; 0x3a1c <keycode_to_action+0x7e>
    39b2:	31 c0       	rjmp	.+98     	; 0x3a16 <keycode_to_action+0x78>
    39b4:	88 3e       	cpi	r24, 0xE8	; 232
    39b6:	90 f4       	brcc	.+36     	; 0x39dc <keycode_to_action+0x3e>
    39b8:	80 3e       	cpi	r24, 0xE0	; 224
    39ba:	a8 f4       	brcc	.+42     	; 0x39e6 <keycode_to_action+0x48>
    39bc:	8f 3b       	cpi	r24, 0xBF	; 191
    39be:	59 f5       	brne	.+86     	; 0x3a16 <keycode_to_action+0x78>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    39c0:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <clear_keyboard>
    39c4:	2f ef       	ldi	r18, 0xFF	; 255
    39c6:	80 e7       	ldi	r24, 0x70	; 112
    39c8:	92 e0       	ldi	r25, 0x02	; 2
    39ca:	21 50       	subi	r18, 0x01	; 1
    39cc:	80 40       	sbci	r24, 0x00	; 0
    39ce:	90 40       	sbci	r25, 0x00	; 0
    39d0:	e1 f7       	brne	.-8      	; 0x39ca <keycode_to_action+0x2c>
    39d2:	00 c0       	rjmp	.+0      	; 0x39d4 <keycode_to_action+0x36>
    39d4:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    39d6:	0e 94 ad 1c 	call	0x395a	; 0x395a <bootloader_jump>
    39da:	1d c0       	rjmp	.+58     	; 0x3a16 <keycode_to_action+0x78>

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    39dc:	80 3f       	cpi	r24, 0xF0	; 240
    39de:	d8 f0       	brcs	.+54     	; 0x3a16 <keycode_to_action+0x78>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	90 65       	ori	r25, 0x50	; 80
            break;
    39e4:	08 95       	ret
{
    action_t action = {};
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    39e6:	90 e0       	ldi	r25, 0x00	; 0
            break;
    39e8:	08 95       	ret
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    39ea:	85 3a       	cpi	r24, 0xA5	; 165
    39ec:	d1 f0       	breq	.+52     	; 0x3a22 <keycode_to_action+0x84>
    39ee:	86 3a       	cpi	r24, 0xA6	; 166
    39f0:	d9 f0       	breq	.+54     	; 0x3a28 <keycode_to_action+0x8a>
    39f2:	83 e8       	ldi	r24, 0x83	; 131
    39f4:	90 e4       	ldi	r25, 0x40	; 64
    39f6:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    39f8:	88 3a       	cpi	r24, 0xA8	; 168
    39fa:	c9 f0       	breq	.+50     	; 0x3a2e <keycode_to_action+0x90>
    39fc:	89 3a       	cpi	r24, 0xA9	; 169
    39fe:	d1 f0       	breq	.+52     	; 0x3a34 <keycode_to_action+0x96>
    3a00:	8a 3a       	cpi	r24, 0xAA	; 170
    3a02:	d9 f0       	breq	.+54     	; 0x3a3a <keycode_to_action+0x9c>
    3a04:	8b 3a       	cpi	r24, 0xAB	; 171
    3a06:	e1 f0       	breq	.+56     	; 0x3a40 <keycode_to_action+0xa2>
    3a08:	8c 3a       	cpi	r24, 0xAC	; 172
    3a0a:	e9 f0       	breq	.+58     	; 0x3a46 <keycode_to_action+0xa8>
    3a0c:	8d 3a       	cpi	r24, 0xAD	; 173
    3a0e:	f1 f0       	breq	.+60     	; 0x3a4c <keycode_to_action+0xae>
    3a10:	84 eb       	ldi	r24, 0xB4	; 180
    3a12:	94 e4       	ldi	r25, 0x44	; 68
    3a14:	08 95       	ret


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	90 e0       	ldi	r25, 0x00	; 0
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
    3a1a:	08 95       	ret
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3a1c:	81 e0       	ldi	r24, 0x01	; 1
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3a22:	81 e8       	ldi	r24, 0x81	; 129
    3a24:	90 e4       	ldi	r25, 0x40	; 64
    3a26:	08 95       	ret
    3a28:	82 e8       	ldi	r24, 0x82	; 130
    3a2a:	90 e4       	ldi	r25, 0x40	; 64
    3a2c:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3a2e:	82 ee       	ldi	r24, 0xE2	; 226
    3a30:	94 e4       	ldi	r25, 0x44	; 68
    3a32:	08 95       	ret
    3a34:	89 ee       	ldi	r24, 0xE9	; 233
    3a36:	94 e4       	ldi	r25, 0x44	; 68
    3a38:	08 95       	ret
    3a3a:	8a ee       	ldi	r24, 0xEA	; 234
    3a3c:	94 e4       	ldi	r25, 0x44	; 68
    3a3e:	08 95       	ret
    3a40:	85 eb       	ldi	r24, 0xB5	; 181
    3a42:	94 e4       	ldi	r25, 0x44	; 68
    3a44:	08 95       	ret
    3a46:	86 eb       	ldi	r24, 0xB6	; 182
    3a48:	94 e4       	ldi	r25, 0x44	; 68
    3a4a:	08 95       	ret
    3a4c:	83 eb       	ldi	r24, 0xB3	; 179
    3a4e:	94 e4       	ldi	r25, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    3a50:	08 95       	ret

00003a52 <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3a52:	0e 94 82 06 	call	0xd04	; 0xd04 <keymap_key_to_keycode>
    switch (keycode) {
    3a56:	80 3e       	cpi	r24, 0xE0	; 224
    3a58:	a8 f4       	brcc	.+42     	; 0x3a84 <action_for_key+0x32>
    3a5a:	80 3c       	cpi	r24, 0xC0	; 192
    3a5c:	00 f5       	brcc	.+64     	; 0x3a9e <action_for_key+0x4c>
    3a5e:	81 33       	cpi	r24, 0x31	; 49
    3a60:	09 f4       	brne	.+2      	; 0x3a64 <action_for_key+0x12>
    3a62:	5c c0       	rjmp	.+184    	; 0x3b1c <action_for_key+0xca>
    3a64:	38 f4       	brcc	.+14     	; 0x3a74 <action_for_key+0x22>
    3a66:	89 32       	cpi	r24, 0x29	; 41
    3a68:	09 f4       	brne	.+2      	; 0x3a6c <action_for_key+0x1a>
    3a6a:	52 c0       	rjmp	.+164    	; 0x3b10 <action_for_key+0xbe>
    3a6c:	8a 32       	cpi	r24, 0x2A	; 42
    3a6e:	09 f4       	brne	.+2      	; 0x3a72 <action_for_key+0x20>
    3a70:	5b c0       	rjmp	.+182    	; 0x3b28 <action_for_key+0xd6>
    3a72:	5f c0       	rjmp	.+190    	; 0x3b32 <action_for_key+0xe0>
    3a74:	89 33       	cpi	r24, 0x39	; 57
    3a76:	b1 f0       	breq	.+44     	; 0x3aa4 <action_for_key+0x52>
    3a78:	82 38       	cpi	r24, 0x82	; 130
    3a7a:	a1 f0       	breq	.+40     	; 0x3aa4 <action_for_key+0x52>
    3a7c:	85 33       	cpi	r24, 0x35	; 53
    3a7e:	09 f4       	brne	.+2      	; 0x3a82 <action_for_key+0x30>
    3a80:	41 c0       	rjmp	.+130    	; 0x3b04 <action_for_key+0xb2>
    3a82:	57 c0       	rjmp	.+174    	; 0x3b32 <action_for_key+0xe0>
    3a84:	83 3e       	cpi	r24, 0xE3	; 227
    3a86:	41 f1       	breq	.+80     	; 0x3ad8 <action_for_key+0x86>
    3a88:	28 f4       	brcc	.+10     	; 0x3a94 <action_for_key+0x42>
    3a8a:	80 3e       	cpi	r24, 0xE0	; 224
    3a8c:	99 f0       	breq	.+38     	; 0x3ab4 <action_for_key+0x62>
    3a8e:	82 3e       	cpi	r24, 0xE2	; 226
    3a90:	b9 f0       	breq	.+46     	; 0x3ac0 <action_for_key+0x6e>
    3a92:	4f c0       	rjmp	.+158    	; 0x3b32 <action_for_key+0xe0>
    3a94:	86 3e       	cpi	r24, 0xE6	; 230
    3a96:	31 f1       	breq	.+76     	; 0x3ae4 <action_for_key+0x92>
    3a98:	87 3e       	cpi	r24, 0xE7	; 231
    3a9a:	71 f1       	breq	.+92     	; 0x3af8 <action_for_key+0xa6>
    3a9c:	4a c0       	rjmp	.+148    	; 0x3b32 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3a9e:	0e 94 91 06 	call	0xd22	; 0xd22 <keymap_fn_to_action>
    3aa2:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3aa4:	90 91 cf 01 	lds	r25, 0x01CF
    3aa8:	90 fd       	sbrc	r25, 0
    3aaa:	02 c0       	rjmp	.+4      	; 0x3ab0 <action_for_key+0x5e>
    3aac:	91 ff       	sbrs	r25, 1
    3aae:	41 c0       	rjmp	.+130    	; 0x3b32 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3ab0:	80 ee       	ldi	r24, 0xE0	; 224
    3ab2:	3f c0       	rjmp	.+126    	; 0x3b32 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3ab4:	80 91 cf 01 	lds	r24, 0x01CF
    3ab8:	80 ff       	sbrs	r24, 0
    3aba:	fa cf       	rjmp	.-12     	; 0x3ab0 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3abc:	89 e3       	ldi	r24, 0x39	; 57
    3abe:	39 c0       	rjmp	.+114    	; 0x3b32 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3ac0:	80 91 cf 01 	lds	r24, 0x01CF
    3ac4:	82 ff       	sbrs	r24, 2
    3ac6:	0c c0       	rjmp	.+24     	; 0x3ae0 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3ac8:	80 91 cf 01 	lds	r24, 0x01CF
    3acc:	84 ff       	sbrs	r24, 4
    3ace:	02 c0       	rjmp	.+4      	; 0x3ad4 <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	2f c0       	rjmp	.+94     	; 0x3b32 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3ad4:	83 ee       	ldi	r24, 0xE3	; 227
    3ad6:	2d c0       	rjmp	.+90     	; 0x3b32 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3ad8:	80 91 cf 01 	lds	r24, 0x01CF
    3adc:	82 ff       	sbrs	r24, 2
    3ade:	f4 cf       	rjmp	.-24     	; 0x3ac8 <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3ae0:	82 ee       	ldi	r24, 0xE2	; 226
    3ae2:	27 c0       	rjmp	.+78     	; 0x3b32 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3ae4:	80 91 cf 01 	lds	r24, 0x01CF
    3ae8:	83 ff       	sbrs	r24, 3
    3aea:	0a c0       	rjmp	.+20     	; 0x3b00 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3aec:	80 91 cf 01 	lds	r24, 0x01CF
    3af0:	84 fd       	sbrc	r24, 4
    3af2:	ee cf       	rjmp	.-36     	; 0x3ad0 <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3af4:	87 ee       	ldi	r24, 0xE7	; 231
    3af6:	1d c0       	rjmp	.+58     	; 0x3b32 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3af8:	80 91 cf 01 	lds	r24, 0x01CF
    3afc:	83 ff       	sbrs	r24, 3
    3afe:	f6 cf       	rjmp	.-20     	; 0x3aec <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3b00:	86 ee       	ldi	r24, 0xE6	; 230
    3b02:	17 c0       	rjmp	.+46     	; 0x3b32 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3b04:	80 91 cf 01 	lds	r24, 0x01CF
    3b08:	85 ff       	sbrs	r24, 5
    3b0a:	06 c0       	rjmp	.+12     	; 0x3b18 <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3b0c:	89 e2       	ldi	r24, 0x29	; 41
    3b0e:	11 c0       	rjmp	.+34     	; 0x3b32 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3b10:	80 91 cf 01 	lds	r24, 0x01CF
    3b14:	85 ff       	sbrs	r24, 5
    3b16:	fa cf       	rjmp	.-12     	; 0x3b0c <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3b18:	85 e3       	ldi	r24, 0x35	; 53
    3b1a:	0b c0       	rjmp	.+22     	; 0x3b32 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3b1c:	80 91 cf 01 	lds	r24, 0x01CF
    3b20:	86 ff       	sbrs	r24, 6
    3b22:	06 c0       	rjmp	.+12     	; 0x3b30 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3b24:	8a e2       	ldi	r24, 0x2A	; 42
    3b26:	05 c0       	rjmp	.+10     	; 0x3b32 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3b28:	80 91 cf 01 	lds	r24, 0x01CF
    3b2c:	86 ff       	sbrs	r24, 6
    3b2e:	fa cf       	rjmp	.-12     	; 0x3b24 <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3b30:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3b32:	0e 94 cf 1c 	call	0x399e	; 0x399e <keycode_to_action>
    }
}
    3b36:	08 95       	ret

00003b38 <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3b38:	80 e0       	ldi	r24, 0x00	; 0
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	08 95       	ret

00003b3e <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3b3e:	08 95       	ret

00003b40 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3b40:	af 92       	push	r10
    3b42:	bf 92       	push	r11
    3b44:	cf 92       	push	r12
    3b46:	df 92       	push	r13
    3b48:	ef 92       	push	r14
    3b4a:	ff 92       	push	r15
    3b4c:	0f 93       	push	r16
    3b4e:	1f 93       	push	r17
    3b50:	cf 93       	push	r28
    3b52:	7c 01       	movw	r14, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3b54:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3b56:	cc 24       	eor	r12, r12
    3b58:	c3 94       	inc	r12
    3b5a:	d1 2c       	mov	r13, r1
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    3b5c:	8c 2f       	mov	r24, r28
    3b5e:	0e 94 e7 07 	call	0xfce	; 0xfce <matrix_get_row>
    3b62:	5c 01       	movw	r10, r24
    3b64:	00 e0       	ldi	r16, 0x00	; 0
    3b66:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3b68:	c6 01       	movw	r24, r12
    3b6a:	00 2e       	mov	r0, r16
    3b6c:	02 c0       	rjmp	.+4      	; 0x3b72 <scan_key+0x32>
    3b6e:	88 0f       	add	r24, r24
    3b70:	99 1f       	adc	r25, r25
    3b72:	0a 94       	dec	r0
    3b74:	e2 f7       	brpl	.-8      	; 0x3b6e <scan_key+0x2e>
    3b76:	8a 21       	and	r24, r10
    3b78:	9b 21       	and	r25, r11
    3b7a:	89 2b       	or	r24, r25
    3b7c:	b1 f0       	breq	.+44     	; 0x3baa <scan_key+0x6a>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3b7e:	60 2f       	mov	r22, r16
    3b80:	7c 2f       	mov	r23, r28
    3b82:	80 e0       	ldi	r24, 0x00	; 0
    3b84:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <action_for_key>
    3b88:	9c 01       	movw	r18, r24
                if (action.code == code ||
    3b8a:	8e 15       	cp	r24, r14
    3b8c:	9f 05       	cpc	r25, r15
    3b8e:	59 f0       	breq	.+22     	; 0x3ba6 <scan_key+0x66>
    3b90:	83 2f       	mov	r24, r19
    3b92:	80 7e       	andi	r24, 0xE0	; 224
    3b94:	93 2f       	mov	r25, r19
    3b96:	90 7c       	andi	r25, 0xC0	; 192
    3b98:	11 f0       	breq	.+4      	; 0x3b9e <scan_key+0x5e>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3b9a:	80 3a       	cpi	r24, 0xA0	; 160
    3b9c:	31 f4       	brne	.+12     	; 0x3baa <scan_key+0x6a>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
                     action.key.code == code)) {
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3ba0:	2e 15       	cp	r18, r14
    3ba2:	3f 05       	cpc	r19, r15
    3ba4:	11 f4       	brne	.+4      	; 0x3baa <scan_key+0x6a>
                     action.key.code == code)) {
                    return true;
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	09 c0       	rjmp	.+18     	; 0x3bbc <scan_key+0x7c>
    3baa:	0f 5f       	subi	r16, 0xFF	; 255
    3bac:	1f 4f       	sbci	r17, 0xFF	; 255

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3bae:	0f 30       	cpi	r16, 0x0F	; 15
    3bb0:	11 05       	cpc	r17, r1
    3bb2:	d1 f6       	brne	.-76     	; 0x3b68 <scan_key+0x28>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3bb4:	cf 5f       	subi	r28, 0xFF	; 255
    3bb6:	c5 30       	cpi	r28, 0x05	; 5
    3bb8:	89 f6       	brne	.-94     	; 0x3b5c <scan_key+0x1c>
                    return true;
                }
            }
        }
    }
    return false;
    3bba:	80 e0       	ldi	r24, 0x00	; 0
}
    3bbc:	cf 91       	pop	r28
    3bbe:	1f 91       	pop	r17
    3bc0:	0f 91       	pop	r16
    3bc2:	ff 90       	pop	r15
    3bc4:	ef 90       	pop	r14
    3bc6:	df 90       	pop	r13
    3bc8:	cf 90       	pop	r12
    3bca:	bf 90       	pop	r11
    3bcc:	af 90       	pop	r10
    3bce:	08 95       	ret

00003bd0 <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    3bd0:	cf 93       	push	r28
    3bd2:	df 93       	push	r29
    3bd4:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    3bd6:	8c e2       	ldi	r24, 0x2C	; 44
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <scan_key>
    3bde:	88 23       	and	r24, r24
    3be0:	29 f0       	breq	.+10     	; 0x3bec <bootmagic_scan_key+0x1c>

    return scan_key(code);
    3be2:	ce 01       	movw	r24, r28
}
    3be4:	df 91       	pop	r29
    3be6:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    3be8:	0c 94 a0 1d 	jmp	0x3b40	; 0x3b40 <scan_key>
}
    3bec:	80 e0       	ldi	r24, 0x00	; 0
    3bee:	df 91       	pop	r29
    3bf0:	cf 91       	pop	r28
    3bf2:	08 95       	ret

00003bf4 <bootmagic>:
#include "bootmagic.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    3bf4:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    3bf6:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <eeconfig_is_enabled>
    3bfa:	81 11       	cpse	r24, r1
    3bfc:	02 c0       	rjmp	.+4      	; 0x3c02 <bootmagic+0xe>
        eeconfig_init();
    3bfe:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    3c02:	8b ea       	ldi	r24, 0xAB	; 171
    3c04:	93 e0       	ldi	r25, 0x03	; 3
    3c06:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    3c0a:	c5 e6       	ldi	r28, 0x65	; 101
    3c0c:	c1 50       	subi	r28, 0x01	; 1
    3c0e:	49 f0       	breq	.+18     	; 0x3c22 <bootmagic+0x2e>
    3c10:	0e 94 c5 06 	call	0xd8a	; 0xd8a <matrix_scan>
    3c14:	8f e3       	ldi	r24, 0x3F	; 63
    3c16:	9c e9       	ldi	r25, 0x9C	; 156
    3c18:	01 97       	sbiw	r24, 0x01	; 1
    3c1a:	f1 f7       	brne	.-4      	; 0x3c18 <bootmagic+0x24>
    3c1c:	00 c0       	rjmp	.+0      	; 0x3c1e <bootmagic+0x2a>
    3c1e:	00 00       	nop
    3c20:	f5 cf       	rjmp	.-22     	; 0x3c0c <bootmagic+0x18>
    print("done.\n");
    3c22:	84 ea       	ldi	r24, 0xA4	; 164
    3c24:	93 e0       	ldi	r25, 0x03	; 3
    3c26:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    3c2a:	89 e2       	ldi	r24, 0x29	; 41
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3c32:	81 11       	cpse	r24, r1
    3c34:	22 c1       	rjmp	.+580    	; 0x3e7a <bootmagic+0x286>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3c36:	8a e2       	ldi	r24, 0x2A	; 42
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3c3e:	81 11       	cpse	r24, r1
        eeconfig_init();
    3c40:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    3c44:	85 e0       	ldi	r24, 0x05	; 5
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3c4c:	81 11       	cpse	r24, r1
        bootloader_jump();
    3c4e:	0e 94 ad 1c 	call	0x395a	; 0x395a <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    3c52:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <eeconfig_read_debug>
    3c56:	80 93 b1 01 	sts	0x01B1, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3c5a:	87 e0       	ldi	r24, 0x07	; 7
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3c62:	88 23       	and	r24, r24
    3c64:	c1 f1       	breq	.+112    	; 0x3cd6 <bootmagic+0xe2>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3c66:	8b e1       	ldi	r24, 0x1B	; 27
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3c6e:	88 23       	and	r24, r24
    3c70:	51 f0       	breq	.+20     	; 0x3c86 <bootmagic+0x92>
            debug_config.matrix = !debug_config.matrix;
    3c72:	80 91 b1 01 	lds	r24, 0x01B1
    3c76:	81 fb       	bst	r24, 1
    3c78:	22 27       	eor	r18, r18
    3c7a:	20 f9       	bld	r18, 0
    3c7c:	91 e0       	ldi	r25, 0x01	; 1
    3c7e:	92 27       	eor	r25, r18
    3c80:	90 fb       	bst	r25, 0
    3c82:	81 f9       	bld	r24, 1
    3c84:	0f c0       	rjmp	.+30     	; 0x3ca4 <bootmagic+0xb0>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    3c86:	8e e0       	ldi	r24, 0x0E	; 14
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3c8e:	88 23       	and	r24, r24
    3c90:	61 f0       	breq	.+24     	; 0x3caa <bootmagic+0xb6>
            debug_config.keyboard = !debug_config.keyboard;
    3c92:	80 91 b1 01 	lds	r24, 0x01B1
    3c96:	82 fb       	bst	r24, 2
    3c98:	22 27       	eor	r18, r18
    3c9a:	20 f9       	bld	r18, 0
    3c9c:	91 e0       	ldi	r25, 0x01	; 1
    3c9e:	92 27       	eor	r25, r18
    3ca0:	90 fb       	bst	r25, 0
    3ca2:	82 f9       	bld	r24, 2
    3ca4:	80 93 b1 01 	sts	0x01B1, r24
    3ca8:	16 c0       	rjmp	.+44     	; 0x3cd6 <bootmagic+0xe2>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    3caa:	80 e1       	ldi	r24, 0x10	; 16
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3cb2:	90 91 b1 01 	lds	r25, 0x01B1
    3cb6:	88 23       	and	r24, r24
    3cb8:	41 f0       	breq	.+16     	; 0x3cca <bootmagic+0xd6>
            debug_config.mouse = !debug_config.mouse;
    3cba:	93 fb       	bst	r25, 3
    3cbc:	22 27       	eor	r18, r18
    3cbe:	20 f9       	bld	r18, 0
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	82 27       	eor	r24, r18
    3cc4:	80 fb       	bst	r24, 0
    3cc6:	93 f9       	bld	r25, 3
    3cc8:	04 c0       	rjmp	.+8      	; 0x3cd2 <bootmagic+0xde>
        } else {
            debug_config.enable = !debug_config.enable;
    3cca:	89 2f       	mov	r24, r25
    3ccc:	80 95       	com	r24
    3cce:	80 fb       	bst	r24, 0
    3cd0:	90 f9       	bld	r25, 0
    3cd2:	90 93 b1 01 	sts	0x01B1, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    3cd6:	80 91 b1 01 	lds	r24, 0x01B1
    3cda:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    3cde:	0e 94 76 1f 	call	0x3eec	; 0x3eec <eeconfig_read_keymap>
    3ce2:	80 93 cf 01 	sts	0x01CF, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    3ce6:	80 ee       	ldi	r24, 0xE0	; 224
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3cee:	88 23       	and	r24, r24
    3cf0:	41 f0       	breq	.+16     	; 0x3d02 <bootmagic+0x10e>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    3cf2:	80 91 cf 01 	lds	r24, 0x01CF
    3cf6:	98 2f       	mov	r25, r24
    3cf8:	90 95       	com	r25
    3cfa:	90 fb       	bst	r25, 0
    3cfc:	80 f9       	bld	r24, 0
    3cfe:	80 93 cf 01 	sts	0x01CF, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    3d02:	89 e3       	ldi	r24, 0x39	; 57
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3d0a:	88 23       	and	r24, r24
    3d0c:	59 f0       	breq	.+22     	; 0x3d24 <bootmagic+0x130>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    3d0e:	80 91 cf 01 	lds	r24, 0x01CF
    3d12:	81 fb       	bst	r24, 1
    3d14:	22 27       	eor	r18, r18
    3d16:	20 f9       	bld	r18, 0
    3d18:	91 e0       	ldi	r25, 0x01	; 1
    3d1a:	92 27       	eor	r25, r18
    3d1c:	90 fb       	bst	r25, 0
    3d1e:	81 f9       	bld	r24, 1
    3d20:	80 93 cf 01 	sts	0x01CF, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    3d24:	82 ee       	ldi	r24, 0xE2	; 226
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3d2c:	88 23       	and	r24, r24
    3d2e:	59 f0       	breq	.+22     	; 0x3d46 <bootmagic+0x152>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    3d30:	80 91 cf 01 	lds	r24, 0x01CF
    3d34:	82 fb       	bst	r24, 2
    3d36:	22 27       	eor	r18, r18
    3d38:	20 f9       	bld	r18, 0
    3d3a:	91 e0       	ldi	r25, 0x01	; 1
    3d3c:	92 27       	eor	r25, r18
    3d3e:	90 fb       	bst	r25, 0
    3d40:	82 f9       	bld	r24, 2
    3d42:	80 93 cf 01 	sts	0x01CF, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    3d46:	86 ee       	ldi	r24, 0xE6	; 230
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3d4e:	88 23       	and	r24, r24
    3d50:	59 f0       	breq	.+22     	; 0x3d68 <bootmagic+0x174>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    3d52:	80 91 cf 01 	lds	r24, 0x01CF
    3d56:	83 fb       	bst	r24, 3
    3d58:	22 27       	eor	r18, r18
    3d5a:	20 f9       	bld	r18, 0
    3d5c:	91 e0       	ldi	r25, 0x01	; 1
    3d5e:	92 27       	eor	r25, r18
    3d60:	90 fb       	bst	r25, 0
    3d62:	83 f9       	bld	r24, 3
    3d64:	80 93 cf 01 	sts	0x01CF, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    3d68:	83 ee       	ldi	r24, 0xE3	; 227
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3d70:	88 23       	and	r24, r24
    3d72:	59 f0       	breq	.+22     	; 0x3d8a <bootmagic+0x196>
        keymap_config.no_gui = !keymap_config.no_gui;
    3d74:	80 91 cf 01 	lds	r24, 0x01CF
    3d78:	84 fb       	bst	r24, 4
    3d7a:	22 27       	eor	r18, r18
    3d7c:	20 f9       	bld	r18, 0
    3d7e:	91 e0       	ldi	r25, 0x01	; 1
    3d80:	92 27       	eor	r25, r18
    3d82:	90 fb       	bst	r25, 0
    3d84:	84 f9       	bld	r24, 4
    3d86:	80 93 cf 01 	sts	0x01CF, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    3d8a:	85 e3       	ldi	r24, 0x35	; 53
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3d92:	88 23       	and	r24, r24
    3d94:	59 f0       	breq	.+22     	; 0x3dac <bootmagic+0x1b8>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    3d96:	80 91 cf 01 	lds	r24, 0x01CF
    3d9a:	85 fb       	bst	r24, 5
    3d9c:	22 27       	eor	r18, r18
    3d9e:	20 f9       	bld	r18, 0
    3da0:	91 e0       	ldi	r25, 0x01	; 1
    3da2:	92 27       	eor	r25, r18
    3da4:	90 fb       	bst	r25, 0
    3da6:	85 f9       	bld	r24, 5
    3da8:	80 93 cf 01 	sts	0x01CF, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    3dac:	81 e3       	ldi	r24, 0x31	; 49
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3db4:	88 23       	and	r24, r24
    3db6:	59 f0       	breq	.+22     	; 0x3dce <bootmagic+0x1da>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    3db8:	80 91 cf 01 	lds	r24, 0x01CF
    3dbc:	86 fb       	bst	r24, 6
    3dbe:	22 27       	eor	r18, r18
    3dc0:	20 f9       	bld	r18, 0
    3dc2:	91 e0       	ldi	r25, 0x01	; 1
    3dc4:	92 27       	eor	r25, r18
    3dc6:	90 fb       	bst	r25, 0
    3dc8:	86 f9       	bld	r24, 6
    3dca:	80 93 cf 01 	sts	0x01CF, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    3dce:	81 e1       	ldi	r24, 0x11	; 17
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3dd6:	88 23       	and	r24, r24
    3dd8:	59 f0       	breq	.+22     	; 0x3df0 <bootmagic+0x1fc>
        keymap_config.nkro = !keymap_config.nkro;
    3dda:	80 91 cf 01 	lds	r24, 0x01CF
    3dde:	87 fb       	bst	r24, 7
    3de0:	22 27       	eor	r18, r18
    3de2:	20 f9       	bld	r18, 0
    3de4:	91 e0       	ldi	r25, 0x01	; 1
    3de6:	92 27       	eor	r25, r18
    3de8:	90 fb       	bst	r25, 0
    3dea:	87 f9       	bld	r24, 7
    3dec:	80 93 cf 01 	sts	0x01CF, r24
    }
    eeconfig_write_keymap(keymap_config.raw);
    3df0:	80 91 cf 01 	lds	r24, 0x01CF
    3df4:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <eeconfig_write_keymap>
    keyboard_nkro = keymap_config.nkro;
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    3df8:	87 e2       	ldi	r24, 0x27	; 39
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3e00:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    3e02:	8e e1       	ldi	r24, 0x1E	; 30
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3e0a:	81 11       	cpse	r24, r1
    3e0c:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    3e0e:	8f e1       	ldi	r24, 0x1F	; 31
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3e16:	81 11       	cpse	r24, r1
    3e18:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    3e1a:	80 e2       	ldi	r24, 0x20	; 32
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3e22:	81 11       	cpse	r24, r1
    3e24:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    3e26:	81 e2       	ldi	r24, 0x21	; 33
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3e2e:	81 11       	cpse	r24, r1
    3e30:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    3e32:	82 e2       	ldi	r24, 0x22	; 34
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3e3a:	81 11       	cpse	r24, r1
    3e3c:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    3e3e:	83 e2       	ldi	r24, 0x23	; 35
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3e46:	81 11       	cpse	r24, r1
    3e48:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    3e4a:	84 e2       	ldi	r24, 0x24	; 36
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <bootmagic_scan_key>
    3e52:	88 23       	and	r24, r24
    3e54:	11 f0       	breq	.+4      	; 0x3e5a <bootmagic+0x266>
    3e56:	c0 68       	ori	r28, 0x80	; 128
    3e58:	02 c0       	rjmp	.+4      	; 0x3e5e <bootmagic+0x26a>
    if (default_layer) {
    3e5a:	cc 23       	and	r28, r28
    3e5c:	29 f0       	breq	.+10     	; 0x3e68 <bootmagic+0x274>
        eeconfig_write_default_layer(default_layer);
    3e5e:	8c 2f       	mov	r24, r28
    3e60:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    3e64:	6c 2f       	mov	r22, r28
    3e66:	03 c0       	rjmp	.+6      	; 0x3e6e <bootmagic+0x27a>
    } else {
        default_layer = eeconfig_read_default_layer();
    3e68:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    3e6c:	68 2f       	mov	r22, r24
    3e6e:	70 e0       	ldi	r23, 0x00	; 0
    3e70:	80 e0       	ldi	r24, 0x00	; 0
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    3e74:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    3e76:	0c 94 87 19 	jmp	0x330e	; 0x330e <default_layer_set>
    }
}
    3e7a:	cf 91       	pop	r28
    3e7c:	08 95       	ret

00003e7e <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    3e7e:	6d ee       	ldi	r22, 0xED	; 237
    3e80:	7e ef       	ldi	r23, 0xFE	; 254
    3e82:	80 e0       	ldi	r24, 0x00	; 0
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	0e 94 a8 28 	call	0x5150	; 0x5150 <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    3e8a:	60 e0       	ldi	r22, 0x00	; 0
    3e8c:	82 e0       	ldi	r24, 0x02	; 2
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	0e 94 9a 28 	call	0x5134	; 0x5134 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    3e94:	60 e0       	ldi	r22, 0x00	; 0
    3e96:	83 e0       	ldi	r24, 0x03	; 3
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	0e 94 9a 28 	call	0x5134	; 0x5134 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    3e9e:	60 e0       	ldi	r22, 0x00	; 0
    3ea0:	84 e0       	ldi	r24, 0x04	; 4
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	0e 94 9a 28 	call	0x5134	; 0x5134 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    3ea8:	60 e0       	ldi	r22, 0x00	; 0
    3eaa:	85 e0       	ldi	r24, 0x05	; 5
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	0c 94 9a 28 	jmp	0x5134	; 0x5134 <__eewr_byte_m32u4>

00003eb2 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    3eb2:	80 e0       	ldi	r24, 0x00	; 0
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	0e 94 94 28 	call	0x5128	; 0x5128 <__eerd_word_m32u4>
    3eba:	21 e0       	ldi	r18, 0x01	; 1
    3ebc:	8d 3e       	cpi	r24, 0xED	; 237
    3ebe:	9e 4f       	sbci	r25, 0xFE	; 254
    3ec0:	09 f0       	breq	.+2      	; 0x3ec4 <eeconfig_is_enabled+0x12>
    3ec2:	20 e0       	ldi	r18, 0x00	; 0
}
    3ec4:	82 2f       	mov	r24, r18
    3ec6:	08 95       	ret

00003ec8 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    3ec8:	82 e0       	ldi	r24, 0x02	; 2
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	0c 94 8c 28 	jmp	0x5118	; 0x5118 <__eerd_byte_m32u4>

00003ed0 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    3ed0:	68 2f       	mov	r22, r24
    3ed2:	82 e0       	ldi	r24, 0x02	; 2
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	0c 94 9a 28 	jmp	0x5134	; 0x5134 <__eewr_byte_m32u4>

00003eda <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    3eda:	83 e0       	ldi	r24, 0x03	; 3
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	0c 94 8c 28 	jmp	0x5118	; 0x5118 <__eerd_byte_m32u4>

00003ee2 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    3ee2:	68 2f       	mov	r22, r24
    3ee4:	83 e0       	ldi	r24, 0x03	; 3
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	0c 94 9a 28 	jmp	0x5134	; 0x5134 <__eewr_byte_m32u4>

00003eec <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    3eec:	84 e0       	ldi	r24, 0x04	; 4
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	0c 94 8c 28 	jmp	0x5118	; 0x5118 <__eerd_byte_m32u4>

00003ef4 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    3ef4:	68 2f       	mov	r22, r24
    3ef6:	84 e0       	ldi	r24, 0x04	; 4
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	0c 94 9a 28 	jmp	0x5134	; 0x5134 <__eewr_byte_m32u4>

00003efe <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    3efe:	80 91 b9 01 	lds	r24, 0x01B9
    3f02:	80 ff       	sbrs	r24, 0
    3f04:	0b c0       	rjmp	.+22     	; 0x3f1c <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    3f06:	60 91 11 01 	lds	r22, 0x0111
    3f0a:	85 e0       	ldi	r24, 0x05	; 5
    3f0c:	68 9f       	mul	r22, r24
    3f0e:	b0 01       	movw	r22, r0
    3f10:	11 24       	eor	r1, r1
    3f12:	75 95       	asr	r23
    3f14:	67 95       	ror	r22
    3f16:	75 95       	asr	r23
    3f18:	67 95       	ror	r22
    3f1a:	2b c0       	rjmp	.+86     	; 0x3f72 <move_unit+0x74>
    } else if (mousekey_accel & (1<<1)) {
    3f1c:	81 ff       	sbrs	r24, 1
    3f1e:	09 c0       	rjmp	.+18     	; 0x3f32 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    3f20:	60 91 11 01 	lds	r22, 0x0111
    3f24:	85 e0       	ldi	r24, 0x05	; 5
    3f26:	68 9f       	mul	r22, r24
    3f28:	b0 01       	movw	r22, r0
    3f2a:	11 24       	eor	r1, r1
    3f2c:	75 95       	asr	r23
    3f2e:	67 95       	ror	r22
    3f30:	20 c0       	rjmp	.+64     	; 0x3f72 <move_unit+0x74>
    } else if (mousekey_accel & (1<<2)) {
    3f32:	82 ff       	sbrs	r24, 2
    3f34:	07 c0       	rjmp	.+14     	; 0x3f44 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    3f36:	60 91 11 01 	lds	r22, 0x0111
    3f3a:	85 e0       	ldi	r24, 0x05	; 5
    3f3c:	68 9f       	mul	r22, r24
    3f3e:	b0 01       	movw	r22, r0
    3f40:	11 24       	eor	r1, r1
    3f42:	17 c0       	rjmp	.+46     	; 0x3f72 <move_unit+0x74>
    } else if (mousekey_repeat == 0) {
    3f44:	90 91 ba 01 	lds	r25, 0x01BA
    3f48:	99 23       	and	r25, r25
    3f4a:	d1 f0       	breq	.+52     	; 0x3f80 <move_unit+0x82>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    3f4c:	60 91 10 01 	lds	r22, 0x0110
    3f50:	96 17       	cp	r25, r22
    3f52:	88 f7       	brcc	.-30     	; 0x3f36 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    3f54:	20 91 11 01 	lds	r18, 0x0111
    3f58:	85 e0       	ldi	r24, 0x05	; 5
    3f5a:	28 9f       	mul	r18, r24
    3f5c:	90 01       	movw	r18, r0
    3f5e:	11 24       	eor	r1, r1
    3f60:	92 9f       	mul	r25, r18
    3f62:	a0 01       	movw	r20, r0
    3f64:	93 9f       	mul	r25, r19
    3f66:	50 0d       	add	r21, r0
    3f68:	11 24       	eor	r1, r1
    3f6a:	70 e0       	ldi	r23, 0x00	; 0
    3f6c:	ca 01       	movw	r24, r20
    3f6e:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    3f72:	60 38       	cpi	r22, 0x80	; 128
    3f74:	71 05       	cpc	r23, r1
    3f76:	40 f4       	brcc	.+16     	; 0x3f88 <move_unit+0x8a>
    3f78:	61 15       	cp	r22, r1
    3f7a:	71 05       	cpc	r23, r1
    3f7c:	39 f0       	breq	.+14     	; 0x3f8c <move_unit+0x8e>
    3f7e:	02 c0       	rjmp	.+4      	; 0x3f84 <move_unit+0x86>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    3f80:	65 e0       	ldi	r22, 0x05	; 5
    3f82:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    3f84:	86 2f       	mov	r24, r22
    3f86:	08 95       	ret
    3f88:	8f e7       	ldi	r24, 0x7F	; 127
    3f8a:	08 95       	ret
    3f8c:	81 e0       	ldi	r24, 0x01	; 1
}
    3f8e:	08 95       	ret

00003f90 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    3f90:	80 91 b9 01 	lds	r24, 0x01B9
    3f94:	80 ff       	sbrs	r24, 0
    3f96:	08 c0       	rjmp	.+16     	; 0x3fa8 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    3f98:	60 91 0f 01 	lds	r22, 0x010F
    3f9c:	70 e0       	ldi	r23, 0x00	; 0
    3f9e:	75 95       	asr	r23
    3fa0:	67 95       	ror	r22
    3fa2:	75 95       	asr	r23
    3fa4:	67 95       	ror	r22
    3fa6:	21 c0       	rjmp	.+66     	; 0x3fea <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    3fa8:	81 ff       	sbrs	r24, 1
    3faa:	06 c0       	rjmp	.+12     	; 0x3fb8 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    3fac:	60 91 0f 01 	lds	r22, 0x010F
    3fb0:	70 e0       	ldi	r23, 0x00	; 0
    3fb2:	75 95       	asr	r23
    3fb4:	67 95       	ror	r22
    3fb6:	19 c0       	rjmp	.+50     	; 0x3fea <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    3fb8:	82 ff       	sbrs	r24, 2
    3fba:	04 c0       	rjmp	.+8      	; 0x3fc4 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    3fbc:	60 91 0f 01 	lds	r22, 0x010F
    3fc0:	70 e0       	ldi	r23, 0x00	; 0
    3fc2:	10 c0       	rjmp	.+32     	; 0x3fe4 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    3fc4:	90 91 ba 01 	lds	r25, 0x01BA
    3fc8:	99 23       	and	r25, r25
    3fca:	c1 f0       	breq	.+48     	; 0x3ffc <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    3fcc:	60 91 0e 01 	lds	r22, 0x010E
    3fd0:	96 17       	cp	r25, r22
    3fd2:	a0 f7       	brcc	.-24     	; 0x3fbc <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    3fd4:	80 91 0f 01 	lds	r24, 0x010F
    3fd8:	89 9f       	mul	r24, r25
    3fda:	c0 01       	movw	r24, r0
    3fdc:	11 24       	eor	r1, r1
    3fde:	70 e0       	ldi	r23, 0x00	; 0
    3fe0:	0e 94 5e 28 	call	0x50bc	; 0x50bc <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    3fe4:	60 38       	cpi	r22, 0x80	; 128
    3fe6:	71 05       	cpc	r23, r1
    3fe8:	28 f4       	brcc	.+10     	; 0x3ff4 <wheel_unit+0x64>
    3fea:	61 15       	cp	r22, r1
    3fec:	71 05       	cpc	r23, r1
    3fee:	21 f0       	breq	.+8      	; 0x3ff8 <wheel_unit+0x68>
    3ff0:	86 2f       	mov	r24, r22
    3ff2:	08 95       	ret
    3ff4:	8f e7       	ldi	r24, 0x7F	; 127
    3ff6:	08 95       	ret
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    3ffc:	61 e0       	ldi	r22, 0x01	; 1
    3ffe:	70 e0       	ldi	r23, 0x00	; 0
    4000:	f4 cf       	rjmp	.-24     	; 0x3fea <wheel_unit+0x5a>

00004002 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4002:	80 3f       	cpi	r24, 0xF0	; 240
    4004:	21 f4       	brne	.+8      	; 0x400e <mousekey_on+0xc>
    4006:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <move_unit>
    400a:	81 95       	neg	r24
    400c:	04 c0       	rjmp	.+8      	; 0x4016 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    400e:	81 3f       	cpi	r24, 0xF1	; 241
    4010:	29 f4       	brne	.+10     	; 0x401c <mousekey_on+0x1a>
    4012:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <move_unit>
    4016:	80 93 bd 01 	sts	0x01BD, r24
    401a:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    401c:	82 3f       	cpi	r24, 0xF2	; 242
    401e:	21 f4       	brne	.+8      	; 0x4028 <mousekey_on+0x26>
    4020:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <move_unit>
    4024:	81 95       	neg	r24
    4026:	04 c0       	rjmp	.+8      	; 0x4030 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    4028:	83 3f       	cpi	r24, 0xF3	; 243
    402a:	29 f4       	brne	.+10     	; 0x4036 <mousekey_on+0x34>
    402c:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <move_unit>
    4030:	80 93 bc 01 	sts	0x01BC, r24
    4034:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    4036:	89 3f       	cpi	r24, 0xF9	; 249
    4038:	19 f4       	brne	.+6      	; 0x4040 <mousekey_on+0x3e>
    403a:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <wheel_unit>
    403e:	05 c0       	rjmp	.+10     	; 0x404a <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4040:	8a 3f       	cpi	r24, 0xFA	; 250
    4042:	31 f4       	brne	.+12     	; 0x4050 <mousekey_on+0x4e>
    4044:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <wheel_unit>
    4048:	81 95       	neg	r24
    404a:	80 93 be 01 	sts	0x01BE, r24
    404e:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4050:	8b 3f       	cpi	r24, 0xFB	; 251
    4052:	21 f4       	brne	.+8      	; 0x405c <mousekey_on+0x5a>
    4054:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <wheel_unit>
    4058:	81 95       	neg	r24
    405a:	04 c0       	rjmp	.+8      	; 0x4064 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    405c:	8c 3f       	cpi	r24, 0xFC	; 252
    405e:	29 f4       	brne	.+10     	; 0x406a <mousekey_on+0x68>
    4060:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <wheel_unit>
    4064:	80 93 bf 01 	sts	0x01BF, r24
    4068:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    406a:	84 3f       	cpi	r24, 0xF4	; 244
    406c:	21 f4       	brne	.+8      	; 0x4076 <mousekey_on+0x74>
    406e:	80 91 bb 01 	lds	r24, 0x01BB
    4072:	81 60       	ori	r24, 0x01	; 1
    4074:	17 c0       	rjmp	.+46     	; 0x40a4 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4076:	85 3f       	cpi	r24, 0xF5	; 245
    4078:	21 f4       	brne	.+8      	; 0x4082 <mousekey_on+0x80>
    407a:	80 91 bb 01 	lds	r24, 0x01BB
    407e:	82 60       	ori	r24, 0x02	; 2
    4080:	11 c0       	rjmp	.+34     	; 0x40a4 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4082:	86 3f       	cpi	r24, 0xF6	; 246
    4084:	21 f4       	brne	.+8      	; 0x408e <mousekey_on+0x8c>
    4086:	80 91 bb 01 	lds	r24, 0x01BB
    408a:	84 60       	ori	r24, 0x04	; 4
    408c:	0b c0       	rjmp	.+22     	; 0x40a4 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    408e:	87 3f       	cpi	r24, 0xF7	; 247
    4090:	21 f4       	brne	.+8      	; 0x409a <mousekey_on+0x98>
    4092:	80 91 bb 01 	lds	r24, 0x01BB
    4096:	88 60       	ori	r24, 0x08	; 8
    4098:	05 c0       	rjmp	.+10     	; 0x40a4 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    409a:	88 3f       	cpi	r24, 0xF8	; 248
    409c:	31 f4       	brne	.+12     	; 0x40aa <mousekey_on+0xa8>
    409e:	80 91 bb 01 	lds	r24, 0x01BB
    40a2:	80 61       	ori	r24, 0x10	; 16
    40a4:	80 93 bb 01 	sts	0x01BB, r24
    40a8:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    40aa:	8d 3f       	cpi	r24, 0xFD	; 253
    40ac:	21 f4       	brne	.+8      	; 0x40b6 <mousekey_on+0xb4>
    40ae:	80 91 b9 01 	lds	r24, 0x01B9
    40b2:	81 60       	ori	r24, 0x01	; 1
    40b4:	0b c0       	rjmp	.+22     	; 0x40cc <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    40b6:	8e 3f       	cpi	r24, 0xFE	; 254
    40b8:	21 f4       	brne	.+8      	; 0x40c2 <mousekey_on+0xc0>
    40ba:	80 91 b9 01 	lds	r24, 0x01B9
    40be:	82 60       	ori	r24, 0x02	; 2
    40c0:	05 c0       	rjmp	.+10     	; 0x40cc <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    40c2:	8f 3f       	cpi	r24, 0xFF	; 255
    40c4:	29 f4       	brne	.+10     	; 0x40d0 <mousekey_on+0xce>
    40c6:	80 91 b9 01 	lds	r24, 0x01B9
    40ca:	84 60       	ori	r24, 0x04	; 4
    40cc:	80 93 b9 01 	sts	0x01B9, r24
    40d0:	08 95       	ret

000040d2 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    40d2:	80 3f       	cpi	r24, 0xF0	; 240
    40d4:	39 f4       	brne	.+14     	; 0x40e4 <mousekey_off+0x12>
    40d6:	80 91 bd 01 	lds	r24, 0x01BD
    40da:	87 ff       	sbrs	r24, 7
    40dc:	6c c0       	rjmp	.+216    	; 0x41b6 <mousekey_off+0xe4>
    40de:	10 92 bd 01 	sts	0x01BD, r1
    40e2:	69 c0       	rjmp	.+210    	; 0x41b6 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    40e4:	81 3f       	cpi	r24, 0xF1	; 241
    40e6:	29 f4       	brne	.+10     	; 0x40f2 <mousekey_off+0x20>
    40e8:	80 91 bd 01 	lds	r24, 0x01BD
    40ec:	18 16       	cp	r1, r24
    40ee:	bc f3       	brlt	.-18     	; 0x40de <mousekey_off+0xc>
    40f0:	62 c0       	rjmp	.+196    	; 0x41b6 <mousekey_off+0xe4>
    40f2:	90 91 bc 01 	lds	r25, 0x01BC
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    40f6:	82 3f       	cpi	r24, 0xF2	; 242
    40f8:	29 f4       	brne	.+10     	; 0x4104 <mousekey_off+0x32>
    40fa:	97 ff       	sbrs	r25, 7
    40fc:	5c c0       	rjmp	.+184    	; 0x41b6 <mousekey_off+0xe4>
    40fe:	10 92 bc 01 	sts	0x01BC, r1
    4102:	59 c0       	rjmp	.+178    	; 0x41b6 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4104:	83 3f       	cpi	r24, 0xF3	; 243
    4106:	19 f4       	brne	.+6      	; 0x410e <mousekey_off+0x3c>
    4108:	19 16       	cp	r1, r25
    410a:	cc f3       	brlt	.-14     	; 0x40fe <mousekey_off+0x2c>
    410c:	54 c0       	rjmp	.+168    	; 0x41b6 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    410e:	89 3f       	cpi	r24, 0xF9	; 249
    4110:	41 f4       	brne	.+16     	; 0x4122 <mousekey_off+0x50>
    4112:	80 91 be 01 	lds	r24, 0x01BE
    4116:	18 16       	cp	r1, r24
    4118:	0c f0       	brlt	.+2      	; 0x411c <mousekey_off+0x4a>
    411a:	4d c0       	rjmp	.+154    	; 0x41b6 <mousekey_off+0xe4>
    411c:	10 92 be 01 	sts	0x01BE, r1
    4120:	4a c0       	rjmp	.+148    	; 0x41b6 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4122:	8a 3f       	cpi	r24, 0xFA	; 250
    4124:	29 f4       	brne	.+10     	; 0x4130 <mousekey_off+0x5e>
    4126:	80 91 be 01 	lds	r24, 0x01BE
    412a:	87 ff       	sbrs	r24, 7
    412c:	44 c0       	rjmp	.+136    	; 0x41b6 <mousekey_off+0xe4>
    412e:	f6 cf       	rjmp	.-20     	; 0x411c <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4130:	8b 3f       	cpi	r24, 0xFB	; 251
    4132:	39 f4       	brne	.+14     	; 0x4142 <mousekey_off+0x70>
    4134:	80 91 bf 01 	lds	r24, 0x01BF
    4138:	87 ff       	sbrs	r24, 7
    413a:	3d c0       	rjmp	.+122    	; 0x41b6 <mousekey_off+0xe4>
    413c:	10 92 bf 01 	sts	0x01BF, r1
    4140:	3a c0       	rjmp	.+116    	; 0x41b6 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4142:	8c 3f       	cpi	r24, 0xFC	; 252
    4144:	29 f4       	brne	.+10     	; 0x4150 <mousekey_off+0x7e>
    4146:	80 91 bf 01 	lds	r24, 0x01BF
    414a:	18 16       	cp	r1, r24
    414c:	bc f3       	brlt	.-18     	; 0x413c <mousekey_off+0x6a>
    414e:	33 c0       	rjmp	.+102    	; 0x41b6 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4150:	84 3f       	cpi	r24, 0xF4	; 244
    4152:	21 f4       	brne	.+8      	; 0x415c <mousekey_off+0x8a>
    4154:	80 91 bb 01 	lds	r24, 0x01BB
    4158:	8e 7f       	andi	r24, 0xFE	; 254
    415a:	17 c0       	rjmp	.+46     	; 0x418a <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    415c:	85 3f       	cpi	r24, 0xF5	; 245
    415e:	21 f4       	brne	.+8      	; 0x4168 <mousekey_off+0x96>
    4160:	80 91 bb 01 	lds	r24, 0x01BB
    4164:	8d 7f       	andi	r24, 0xFD	; 253
    4166:	11 c0       	rjmp	.+34     	; 0x418a <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4168:	86 3f       	cpi	r24, 0xF6	; 246
    416a:	21 f4       	brne	.+8      	; 0x4174 <mousekey_off+0xa2>
    416c:	80 91 bb 01 	lds	r24, 0x01BB
    4170:	8b 7f       	andi	r24, 0xFB	; 251
    4172:	0b c0       	rjmp	.+22     	; 0x418a <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4174:	87 3f       	cpi	r24, 0xF7	; 247
    4176:	21 f4       	brne	.+8      	; 0x4180 <mousekey_off+0xae>
    4178:	80 91 bb 01 	lds	r24, 0x01BB
    417c:	87 7f       	andi	r24, 0xF7	; 247
    417e:	05 c0       	rjmp	.+10     	; 0x418a <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4180:	88 3f       	cpi	r24, 0xF8	; 248
    4182:	31 f4       	brne	.+12     	; 0x4190 <mousekey_off+0xbe>
    4184:	80 91 bb 01 	lds	r24, 0x01BB
    4188:	8f 7e       	andi	r24, 0xEF	; 239
    418a:	80 93 bb 01 	sts	0x01BB, r24
    418e:	13 c0       	rjmp	.+38     	; 0x41b6 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4190:	8d 3f       	cpi	r24, 0xFD	; 253
    4192:	21 f4       	brne	.+8      	; 0x419c <mousekey_off+0xca>
    4194:	80 91 b9 01 	lds	r24, 0x01B9
    4198:	8e 7f       	andi	r24, 0xFE	; 254
    419a:	0b c0       	rjmp	.+22     	; 0x41b2 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    419c:	8e 3f       	cpi	r24, 0xFE	; 254
    419e:	21 f4       	brne	.+8      	; 0x41a8 <mousekey_off+0xd6>
    41a0:	80 91 b9 01 	lds	r24, 0x01B9
    41a4:	8d 7f       	andi	r24, 0xFD	; 253
    41a6:	05 c0       	rjmp	.+10     	; 0x41b2 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    41a8:	8f 3f       	cpi	r24, 0xFF	; 255
    41aa:	29 f4       	brne	.+10     	; 0x41b6 <mousekey_off+0xe4>
    41ac:	80 91 b9 01 	lds	r24, 0x01B9
    41b0:	8b 7f       	andi	r24, 0xFB	; 251
    41b2:	80 93 b9 01 	sts	0x01B9, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    41b6:	80 91 bc 01 	lds	r24, 0x01BC
    41ba:	81 11       	cpse	r24, r1
    41bc:	0e c0       	rjmp	.+28     	; 0x41da <mousekey_off+0x108>
    41be:	80 91 bd 01 	lds	r24, 0x01BD
    41c2:	81 11       	cpse	r24, r1
    41c4:	0a c0       	rjmp	.+20     	; 0x41da <mousekey_off+0x108>
    41c6:	80 91 be 01 	lds	r24, 0x01BE
    41ca:	81 11       	cpse	r24, r1
    41cc:	06 c0       	rjmp	.+12     	; 0x41da <mousekey_off+0x108>
    41ce:	80 91 bf 01 	lds	r24, 0x01BF
    41d2:	81 11       	cpse	r24, r1
    41d4:	02 c0       	rjmp	.+4      	; 0x41da <mousekey_off+0x108>
        mousekey_repeat = 0;
    41d6:	10 92 ba 01 	sts	0x01BA, r1
    41da:	08 95       	ret

000041dc <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    41dc:	80 91 b1 01 	lds	r24, 0x01B1
    41e0:	83 ff       	sbrs	r24, 3
    41e2:	7e c0       	rjmp	.+252    	; 0x42e0 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    41e4:	87 ee       	ldi	r24, 0xE7	; 231
    41e6:	93 e0       	ldi	r25, 0x03	; 3
    41e8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    phex(mouse_report.buttons); print("|");
    41ec:	80 91 bb 01 	lds	r24, 0x01BB
    41f0:	1f 92       	push	r1
    41f2:	8f 93       	push	r24
    41f4:	82 ee       	ldi	r24, 0xE2	; 226
    41f6:	93 e0       	ldi	r25, 0x03	; 3
    41f8:	9f 93       	push	r25
    41fa:	8f 93       	push	r24
    41fc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4200:	80 ee       	ldi	r24, 0xE0	; 224
    4202:	93 e0       	ldi	r25, 0x03	; 3
    4204:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print_decs(mouse_report.x); print(" ");
    4208:	80 91 bc 01 	lds	r24, 0x01BC
    420c:	28 2f       	mov	r18, r24
    420e:	33 27       	eor	r19, r19
    4210:	27 fd       	sbrc	r18, 7
    4212:	30 95       	com	r19
    4214:	3f 93       	push	r19
    4216:	8f 93       	push	r24
    4218:	8d ed       	ldi	r24, 0xDD	; 221
    421a:	93 e0       	ldi	r25, 0x03	; 3
    421c:	9f 93       	push	r25
    421e:	8f 93       	push	r24
    4220:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4224:	8b ed       	ldi	r24, 0xDB	; 219
    4226:	93 e0       	ldi	r25, 0x03	; 3
    4228:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print_decs(mouse_report.y); print(" ");
    422c:	80 91 bd 01 	lds	r24, 0x01BD
    4230:	28 2f       	mov	r18, r24
    4232:	33 27       	eor	r19, r19
    4234:	27 fd       	sbrc	r18, 7
    4236:	30 95       	com	r19
    4238:	3f 93       	push	r19
    423a:	8f 93       	push	r24
    423c:	88 ed       	ldi	r24, 0xD8	; 216
    423e:	93 e0       	ldi	r25, 0x03	; 3
    4240:	9f 93       	push	r25
    4242:	8f 93       	push	r24
    4244:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4248:	86 ed       	ldi	r24, 0xD6	; 214
    424a:	93 e0       	ldi	r25, 0x03	; 3
    424c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print_decs(mouse_report.v); print(" ");
    4250:	80 91 be 01 	lds	r24, 0x01BE
    4254:	28 2f       	mov	r18, r24
    4256:	33 27       	eor	r19, r19
    4258:	27 fd       	sbrc	r18, 7
    425a:	30 95       	com	r19
    425c:	3f 93       	push	r19
    425e:	8f 93       	push	r24
    4260:	83 ed       	ldi	r24, 0xD3	; 211
    4262:	93 e0       	ldi	r25, 0x03	; 3
    4264:	9f 93       	push	r25
    4266:	8f 93       	push	r24
    4268:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    426c:	81 ed       	ldi	r24, 0xD1	; 209
    426e:	93 e0       	ldi	r25, 0x03	; 3
    4270:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print_decs(mouse_report.h); print("](");
    4274:	80 91 bf 01 	lds	r24, 0x01BF
    4278:	28 2f       	mov	r18, r24
    427a:	33 27       	eor	r19, r19
    427c:	27 fd       	sbrc	r18, 7
    427e:	30 95       	com	r19
    4280:	3f 93       	push	r19
    4282:	8f 93       	push	r24
    4284:	8e ec       	ldi	r24, 0xCE	; 206
    4286:	93 e0       	ldi	r25, 0x03	; 3
    4288:	9f 93       	push	r25
    428a:	8f 93       	push	r24
    428c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4290:	8b ec       	ldi	r24, 0xCB	; 203
    4292:	93 e0       	ldi	r25, 0x03	; 3
    4294:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print_dec(mousekey_repeat); print("/");
    4298:	80 91 ba 01 	lds	r24, 0x01BA
    429c:	1f 92       	push	r1
    429e:	8f 93       	push	r24
    42a0:	88 ec       	ldi	r24, 0xC8	; 200
    42a2:	93 e0       	ldi	r25, 0x03	; 3
    42a4:	9f 93       	push	r25
    42a6:	8f 93       	push	r24
    42a8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    42ac:	86 ec       	ldi	r24, 0xC6	; 198
    42ae:	93 e0       	ldi	r25, 0x03	; 3
    42b0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print_dec(mousekey_accel); print(")\n");
    42b4:	80 91 b9 01 	lds	r24, 0x01B9
    42b8:	1f 92       	push	r1
    42ba:	8f 93       	push	r24
    42bc:	83 ec       	ldi	r24, 0xC3	; 195
    42be:	93 e0       	ldi	r25, 0x03	; 3
    42c0:	9f 93       	push	r25
    42c2:	8f 93       	push	r24
    42c4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    42c8:	80 ec       	ldi	r24, 0xC0	; 192
    42ca:	93 e0       	ldi	r25, 0x03	; 3
    42cc:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    42d0:	8d b7       	in	r24, 0x3d	; 61
    42d2:	9e b7       	in	r25, 0x3e	; 62
    42d4:	4c 96       	adiw	r24, 0x1c	; 28
    42d6:	0f b6       	in	r0, 0x3f	; 63
    42d8:	f8 94       	cli
    42da:	9e bf       	out	0x3e, r25	; 62
    42dc:	0f be       	out	0x3f, r0	; 63
    42de:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    42e0:	8b eb       	ldi	r24, 0xBB	; 187
    42e2:	91 e0       	ldi	r25, 0x01	; 1
    42e4:	0e 94 12 10 	call	0x2024	; 0x2024 <host_mouse_send>
    last_timer = timer_read();
    42e8:	0e 94 46 1c 	call	0x388c	; 0x388c <timer_read>
    42ec:	90 93 b8 01 	sts	0x01B8, r25
    42f0:	80 93 b7 01 	sts	0x01B7, r24
    42f4:	08 95       	ret

000042f6 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    42f6:	1f 93       	push	r17
    42f8:	cf 93       	push	r28
    42fa:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    42fc:	80 91 b7 01 	lds	r24, 0x01B7
    4300:	90 91 b8 01 	lds	r25, 0x01B8
    4304:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <timer_elapsed>
    4308:	ac 01       	movw	r20, r24
    430a:	90 91 ba 01 	lds	r25, 0x01BA
    430e:	99 23       	and	r25, r25
    4310:	21 f0       	breq	.+8      	; 0x431a <mousekey_task+0x24>
    4312:	20 91 12 01 	lds	r18, 0x0112
    4316:	30 e0       	ldi	r19, 0x00	; 0
    4318:	06 c0       	rjmp	.+12     	; 0x4326 <mousekey_task+0x30>
    431a:	20 91 13 01 	lds	r18, 0x0113
    431e:	8a e0       	ldi	r24, 0x0A	; 10
    4320:	28 9f       	mul	r18, r24
    4322:	90 01       	movw	r18, r0
    4324:	11 24       	eor	r1, r1
    4326:	42 17       	cp	r20, r18
    4328:	53 07       	cpc	r21, r19
    432a:	08 f4       	brcc	.+2      	; 0x432e <mousekey_task+0x38>
    432c:	86 c0       	rjmp	.+268    	; 0x443a <mousekey_task+0x144>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    432e:	80 91 bc 01 	lds	r24, 0x01BC
    4332:	c0 91 bd 01 	lds	r28, 0x01BD
    4336:	d0 91 be 01 	lds	r29, 0x01BE
    433a:	10 91 bf 01 	lds	r17, 0x01BF
    433e:	81 11       	cpse	r24, r1
    4340:	07 c0       	rjmp	.+14     	; 0x4350 <mousekey_task+0x5a>
    4342:	c1 11       	cpse	r28, r1
    4344:	76 c0       	rjmp	.+236    	; 0x4432 <mousekey_task+0x13c>
    4346:	d1 11       	cpse	r29, r1
    4348:	74 c0       	rjmp	.+232    	; 0x4432 <mousekey_task+0x13c>
    434a:	11 11       	cpse	r17, r1
    434c:	72 c0       	rjmp	.+228    	; 0x4432 <mousekey_task+0x13c>
    434e:	75 c0       	rjmp	.+234    	; 0x443a <mousekey_task+0x144>
        return;

    if (mousekey_repeat != UINT8_MAX)
    4350:	9f 3f       	cpi	r25, 0xFF	; 255
    4352:	19 f0       	breq	.+6      	; 0x435a <mousekey_task+0x64>
        mousekey_repeat++;
    4354:	9f 5f       	subi	r25, 0xFF	; 255
    4356:	90 93 ba 01 	sts	0x01BA, r25


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    435a:	18 16       	cp	r1, r24
    435c:	24 f4       	brge	.+8      	; 0x4366 <mousekey_task+0x70>
    435e:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <move_unit>
    4362:	80 93 bc 01 	sts	0x01BC, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4366:	80 91 bc 01 	lds	r24, 0x01BC
    436a:	87 ff       	sbrs	r24, 7
    436c:	05 c0       	rjmp	.+10     	; 0x4378 <mousekey_task+0x82>
    436e:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <move_unit>
    4372:	81 95       	neg	r24
    4374:	80 93 bc 01 	sts	0x01BC, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4378:	1c 16       	cp	r1, r28
    437a:	24 f4       	brge	.+8      	; 0x4384 <mousekey_task+0x8e>
    437c:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <move_unit>
    4380:	80 93 bd 01 	sts	0x01BD, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4384:	80 91 bd 01 	lds	r24, 0x01BD
    4388:	87 ff       	sbrs	r24, 7
    438a:	05 c0       	rjmp	.+10     	; 0x4396 <mousekey_task+0xa0>
    438c:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <move_unit>
    4390:	81 95       	neg	r24
    4392:	80 93 bd 01 	sts	0x01BD, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    4396:	60 91 bc 01 	lds	r22, 0x01BC
    439a:	66 23       	and	r22, r22
    439c:	39 f1       	breq	.+78     	; 0x43ec <mousekey_task+0xf6>
    439e:	c0 91 bd 01 	lds	r28, 0x01BD
    43a2:	cc 23       	and	r28, r28
    43a4:	19 f1       	breq	.+70     	; 0x43ec <mousekey_task+0xf6>
        mouse_report.x *= 0.7;
    43a6:	77 27       	eor	r23, r23
    43a8:	67 fd       	sbrc	r22, 7
    43aa:	70 95       	com	r23
    43ac:	87 2f       	mov	r24, r23
    43ae:	97 2f       	mov	r25, r23
    43b0:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <__floatsisf>
    43b4:	23 e3       	ldi	r18, 0x33	; 51
    43b6:	33 e3       	ldi	r19, 0x33	; 51
    43b8:	43 e3       	ldi	r20, 0x33	; 51
    43ba:	5f e3       	ldi	r21, 0x3F	; 63
    43bc:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <__mulsf3>
    43c0:	0e 94 30 27 	call	0x4e60	; 0x4e60 <__fixsfsi>
    43c4:	60 93 bc 01 	sts	0x01BC, r22
        mouse_report.y *= 0.7;
    43c8:	6c 2f       	mov	r22, r28
    43ca:	77 27       	eor	r23, r23
    43cc:	67 fd       	sbrc	r22, 7
    43ce:	70 95       	com	r23
    43d0:	87 2f       	mov	r24, r23
    43d2:	97 2f       	mov	r25, r23
    43d4:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <__floatsisf>
    43d8:	23 e3       	ldi	r18, 0x33	; 51
    43da:	33 e3       	ldi	r19, 0x33	; 51
    43dc:	43 e3       	ldi	r20, 0x33	; 51
    43de:	5f e3       	ldi	r21, 0x3F	; 63
    43e0:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <__mulsf3>
    43e4:	0e 94 30 27 	call	0x4e60	; 0x4e60 <__fixsfsi>
    43e8:	60 93 bd 01 	sts	0x01BD, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    43ec:	1d 16       	cp	r1, r29
    43ee:	24 f4       	brge	.+8      	; 0x43f8 <mousekey_task+0x102>
    43f0:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <wheel_unit>
    43f4:	80 93 be 01 	sts	0x01BE, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    43f8:	80 91 be 01 	lds	r24, 0x01BE
    43fc:	87 ff       	sbrs	r24, 7
    43fe:	05 c0       	rjmp	.+10     	; 0x440a <mousekey_task+0x114>
    4400:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <wheel_unit>
    4404:	81 95       	neg	r24
    4406:	80 93 be 01 	sts	0x01BE, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    440a:	11 16       	cp	r1, r17
    440c:	24 f4       	brge	.+8      	; 0x4416 <mousekey_task+0x120>
    440e:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <wheel_unit>
    4412:	80 93 bf 01 	sts	0x01BF, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4416:	80 91 bf 01 	lds	r24, 0x01BF
    441a:	87 ff       	sbrs	r24, 7
    441c:	05 c0       	rjmp	.+10     	; 0x4428 <mousekey_task+0x132>
    441e:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <wheel_unit>
    4422:	81 95       	neg	r24
    4424:	80 93 bf 01 	sts	0x01BF, r24

    mousekey_send();
}
    4428:	df 91       	pop	r29
    442a:	cf 91       	pop	r28
    442c:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    442e:	0c 94 ee 20 	jmp	0x41dc	; 0x41dc <mousekey_send>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
        return;

    if (mousekey_repeat != UINT8_MAX)
    4432:	9f 3f       	cpi	r25, 0xFF	; 255
    4434:	09 f0       	breq	.+2      	; 0x4438 <mousekey_task+0x142>
    4436:	8e cf       	rjmp	.-228    	; 0x4354 <mousekey_task+0x5e>
    4438:	96 cf       	rjmp	.-212    	; 0x4366 <mousekey_task+0x70>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
}
    443a:	df 91       	pop	r29
    443c:	cf 91       	pop	r28
    443e:	1f 91       	pop	r17
    4440:	08 95       	ret

00004442 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    4442:	eb eb       	ldi	r30, 0xBB	; 187
    4444:	f1 e0       	ldi	r31, 0x01	; 1
    4446:	85 e0       	ldi	r24, 0x05	; 5
    4448:	df 01       	movw	r26, r30
    444a:	1d 92       	st	X+, r1
    444c:	8a 95       	dec	r24
    444e:	e9 f7       	brne	.-6      	; 0x444a <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4450:	10 92 ba 01 	sts	0x01BA, r1
    mousekey_accel = 0;
    4454:	10 92 b9 01 	sts	0x01B9, r1
    4458:	08 95       	ret

0000445a <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    445a:	8a e0       	ldi	r24, 0x0A	; 10
    445c:	96 e0       	ldi	r25, 0x06	; 6
    445e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4462:	1f 92       	push	r1
    4464:	81 e0       	ldi	r24, 0x01	; 1
    4466:	8f 93       	push	r24
    4468:	1f 92       	push	r1
    446a:	85 e0       	ldi	r24, 0x05	; 5
    446c:	8f 93       	push	r24
    446e:	8c eb       	ldi	r24, 0xBC	; 188
    4470:	95 e0       	ldi	r25, 0x05	; 5
    4472:	9f 93       	push	r25
    4474:	8f 93       	push	r24
    4476:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    447a:	0f 90       	pop	r0
    447c:	0f 90       	pop	r0
    447e:	0f 90       	pop	r0
    4480:	0f 90       	pop	r0
    4482:	0f 90       	pop	r0
    4484:	0f 90       	pop	r0
    4486:	08 95       	ret

00004488 <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    4488:	83 30       	cpi	r24, 0x03	; 3
    448a:	e9 f1       	breq	.+122    	; 0x4506 <mousekey_param_inc+0x7e>
    448c:	28 f4       	brcc	.+10     	; 0x4498 <mousekey_param_inc+0x10>
    448e:	81 30       	cpi	r24, 0x01	; 1
    4490:	61 f0       	breq	.+24     	; 0x44aa <mousekey_param_inc+0x22>
    4492:	82 30       	cpi	r24, 0x02	; 2
    4494:	09 f1       	breq	.+66     	; 0x44d8 <mousekey_param_inc+0x50>
    4496:	08 95       	ret
    4498:	85 30       	cpi	r24, 0x05	; 5
    449a:	09 f4       	brne	.+2      	; 0x449e <mousekey_param_inc+0x16>
    449c:	62 c0       	rjmp	.+196    	; 0x4562 <mousekey_param_inc+0xda>
    449e:	08 f4       	brcc	.+2      	; 0x44a2 <mousekey_param_inc+0x1a>
    44a0:	49 c0       	rjmp	.+146    	; 0x4534 <mousekey_param_inc+0xac>
    44a2:	86 30       	cpi	r24, 0x06	; 6
    44a4:	09 f4       	brne	.+2      	; 0x44a8 <mousekey_param_inc+0x20>
    44a6:	74 c0       	rjmp	.+232    	; 0x4590 <mousekey_param_inc+0x108>
    44a8:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    44aa:	80 91 13 01 	lds	r24, 0x0113
    44ae:	26 2f       	mov	r18, r22
    44b0:	30 e0       	ldi	r19, 0x00	; 0
    44b2:	28 0f       	add	r18, r24
    44b4:	31 1d       	adc	r19, r1
    44b6:	2f 3f       	cpi	r18, 0xFF	; 255
    44b8:	31 05       	cpc	r19, r1
    44ba:	24 f4       	brge	.+8      	; 0x44c4 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    44bc:	68 0f       	add	r22, r24
    44be:	60 93 13 01 	sts	0x0113, r22
    44c2:	03 c0       	rjmp	.+6      	; 0x44ca <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    44c4:	8f ef       	ldi	r24, 0xFF	; 255
    44c6:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_delay);
    44ca:	80 91 13 01 	lds	r24, 0x0113
    44ce:	1f 92       	push	r1
    44d0:	8f 93       	push	r24
    44d2:	85 ef       	ldi	r24, 0xF5	; 245
    44d4:	94 e0       	ldi	r25, 0x04	; 4
    44d6:	72 c0       	rjmp	.+228    	; 0x45bc <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    44d8:	80 91 12 01 	lds	r24, 0x0112
    44dc:	26 2f       	mov	r18, r22
    44de:	30 e0       	ldi	r19, 0x00	; 0
    44e0:	28 0f       	add	r18, r24
    44e2:	31 1d       	adc	r19, r1
    44e4:	2f 3f       	cpi	r18, 0xFF	; 255
    44e6:	31 05       	cpc	r19, r1
    44e8:	24 f4       	brge	.+8      	; 0x44f2 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    44ea:	68 0f       	add	r22, r24
    44ec:	60 93 12 01 	sts	0x0112, r22
    44f0:	03 c0       	rjmp	.+6      	; 0x44f8 <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    44f2:	8f ef       	ldi	r24, 0xFF	; 255
    44f4:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_interval);
    44f8:	80 91 12 01 	lds	r24, 0x0112
    44fc:	1f 92       	push	r1
    44fe:	8f 93       	push	r24
    4500:	83 ee       	ldi	r24, 0xE3	; 227
    4502:	94 e0       	ldi	r25, 0x04	; 4
    4504:	5b c0       	rjmp	.+182    	; 0x45bc <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4506:	80 91 11 01 	lds	r24, 0x0111
    450a:	26 2f       	mov	r18, r22
    450c:	30 e0       	ldi	r19, 0x00	; 0
    450e:	28 0f       	add	r18, r24
    4510:	31 1d       	adc	r19, r1
    4512:	2f 3f       	cpi	r18, 0xFF	; 255
    4514:	31 05       	cpc	r19, r1
    4516:	24 f4       	brge	.+8      	; 0x4520 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    4518:	68 0f       	add	r22, r24
    451a:	60 93 11 01 	sts	0x0111, r22
    451e:	03 c0       	rjmp	.+6      	; 0x4526 <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    4520:	8f ef       	ldi	r24, 0xFF	; 255
    4522:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_max_speed);
    4526:	80 91 11 01 	lds	r24, 0x0111
    452a:	1f 92       	push	r1
    452c:	8f 93       	push	r24
    452e:	80 ed       	ldi	r24, 0xD0	; 208
    4530:	94 e0       	ldi	r25, 0x04	; 4
    4532:	44 c0       	rjmp	.+136    	; 0x45bc <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4534:	80 91 10 01 	lds	r24, 0x0110
    4538:	26 2f       	mov	r18, r22
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	28 0f       	add	r18, r24
    453e:	31 1d       	adc	r19, r1
    4540:	2f 3f       	cpi	r18, 0xFF	; 255
    4542:	31 05       	cpc	r19, r1
    4544:	24 f4       	brge	.+8      	; 0x454e <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    4546:	68 0f       	add	r22, r24
    4548:	60 93 10 01 	sts	0x0110, r22
    454c:	03 c0       	rjmp	.+6      	; 0x4554 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    454e:	8f ef       	ldi	r24, 0xFF	; 255
    4550:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_time_to_max);
    4554:	80 91 10 01 	lds	r24, 0x0110
    4558:	1f 92       	push	r1
    455a:	8f 93       	push	r24
    455c:	8b eb       	ldi	r24, 0xBB	; 187
    455e:	94 e0       	ldi	r25, 0x04	; 4
    4560:	2d c0       	rjmp	.+90     	; 0x45bc <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4562:	80 91 0f 01 	lds	r24, 0x010F
    4566:	26 2f       	mov	r18, r22
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	28 0f       	add	r18, r24
    456c:	31 1d       	adc	r19, r1
    456e:	2f 3f       	cpi	r18, 0xFF	; 255
    4570:	31 05       	cpc	r19, r1
    4572:	24 f4       	brge	.+8      	; 0x457c <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    4574:	68 0f       	add	r22, r24
    4576:	60 93 0f 01 	sts	0x010F, r22
    457a:	03 c0       	rjmp	.+6      	; 0x4582 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    457c:	8f ef       	ldi	r24, 0xFF	; 255
    457e:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4582:	80 91 0f 01 	lds	r24, 0x010F
    4586:	1f 92       	push	r1
    4588:	8f 93       	push	r24
    458a:	82 ea       	ldi	r24, 0xA2	; 162
    458c:	94 e0       	ldi	r25, 0x04	; 4
    458e:	16 c0       	rjmp	.+44     	; 0x45bc <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4590:	80 91 0e 01 	lds	r24, 0x010E
    4594:	26 2f       	mov	r18, r22
    4596:	30 e0       	ldi	r19, 0x00	; 0
    4598:	28 0f       	add	r18, r24
    459a:	31 1d       	adc	r19, r1
    459c:	2f 3f       	cpi	r18, 0xFF	; 255
    459e:	31 05       	cpc	r19, r1
    45a0:	24 f4       	brge	.+8      	; 0x45aa <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    45a2:	68 0f       	add	r22, r24
    45a4:	60 93 0e 01 	sts	0x010E, r22
    45a8:	03 c0       	rjmp	.+6      	; 0x45b0 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    45aa:	8f ef       	ldi	r24, 0xFF	; 255
    45ac:	80 93 0e 01 	sts	0x010E, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    45b0:	80 91 0e 01 	lds	r24, 0x010E
    45b4:	1f 92       	push	r1
    45b6:	8f 93       	push	r24
    45b8:	87 e8       	ldi	r24, 0x87	; 135
    45ba:	94 e0       	ldi	r25, 0x04	; 4
    45bc:	9f 93       	push	r25
    45be:	8f 93       	push	r24
    45c0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
            break;
    45c4:	0f 90       	pop	r0
    45c6:	0f 90       	pop	r0
    45c8:	0f 90       	pop	r0
    45ca:	0f 90       	pop	r0
    45cc:	08 95       	ret

000045ce <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    45ce:	83 30       	cpi	r24, 0x03	; 3
    45d0:	81 f1       	breq	.+96     	; 0x4632 <mousekey_param_dec+0x64>
    45d2:	28 f4       	brcc	.+10     	; 0x45de <mousekey_param_dec+0x10>
    45d4:	81 30       	cpi	r24, 0x01	; 1
    45d6:	59 f0       	breq	.+22     	; 0x45ee <mousekey_param_dec+0x20>
    45d8:	82 30       	cpi	r24, 0x02	; 2
    45da:	d1 f0       	breq	.+52     	; 0x4610 <mousekey_param_dec+0x42>
    45dc:	08 95       	ret
    45de:	85 30       	cpi	r24, 0x05	; 5
    45e0:	09 f4       	brne	.+2      	; 0x45e4 <mousekey_param_dec+0x16>
    45e2:	49 c0       	rjmp	.+146    	; 0x4676 <mousekey_param_dec+0xa8>
    45e4:	b8 f1       	brcs	.+110    	; 0x4654 <mousekey_param_dec+0x86>
    45e6:	86 30       	cpi	r24, 0x06	; 6
    45e8:	09 f4       	brne	.+2      	; 0x45ec <mousekey_param_dec+0x1e>
    45ea:	56 c0       	rjmp	.+172    	; 0x4698 <mousekey_param_dec+0xca>
    45ec:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    45ee:	80 91 13 01 	lds	r24, 0x0113
    45f2:	68 17       	cp	r22, r24
    45f4:	20 f4       	brcc	.+8      	; 0x45fe <mousekey_param_dec+0x30>
                mk_delay -= dec;
    45f6:	86 1b       	sub	r24, r22
    45f8:	80 93 13 01 	sts	0x0113, r24
    45fc:	02 c0       	rjmp	.+4      	; 0x4602 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    45fe:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_delay);
    4602:	80 91 13 01 	lds	r24, 0x0113
    4606:	1f 92       	push	r1
    4608:	8f 93       	push	r24
    460a:	88 e7       	ldi	r24, 0x78	; 120
    460c:	94 e0       	ldi	r25, 0x04	; 4
    460e:	54 c0       	rjmp	.+168    	; 0x46b8 <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    4610:	80 91 12 01 	lds	r24, 0x0112
    4614:	68 17       	cp	r22, r24
    4616:	20 f4       	brcc	.+8      	; 0x4620 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    4618:	86 1b       	sub	r24, r22
    461a:	80 93 12 01 	sts	0x0112, r24
    461e:	02 c0       	rjmp	.+4      	; 0x4624 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    4620:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_interval);
    4624:	80 91 12 01 	lds	r24, 0x0112
    4628:	1f 92       	push	r1
    462a:	8f 93       	push	r24
    462c:	86 e6       	ldi	r24, 0x66	; 102
    462e:	94 e0       	ldi	r25, 0x04	; 4
    4630:	43 c0       	rjmp	.+134    	; 0x46b8 <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    4632:	80 91 11 01 	lds	r24, 0x0111
    4636:	68 17       	cp	r22, r24
    4638:	20 f4       	brcc	.+8      	; 0x4642 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    463a:	86 1b       	sub	r24, r22
    463c:	80 93 11 01 	sts	0x0111, r24
    4640:	02 c0       	rjmp	.+4      	; 0x4646 <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    4642:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_max_speed);
    4646:	80 91 11 01 	lds	r24, 0x0111
    464a:	1f 92       	push	r1
    464c:	8f 93       	push	r24
    464e:	83 e5       	ldi	r24, 0x53	; 83
    4650:	94 e0       	ldi	r25, 0x04	; 4
    4652:	32 c0       	rjmp	.+100    	; 0x46b8 <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4654:	80 91 10 01 	lds	r24, 0x0110
    4658:	68 17       	cp	r22, r24
    465a:	20 f4       	brcc	.+8      	; 0x4664 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    465c:	86 1b       	sub	r24, r22
    465e:	80 93 10 01 	sts	0x0110, r24
    4662:	02 c0       	rjmp	.+4      	; 0x4668 <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    4664:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_time_to_max);
    4668:	80 91 10 01 	lds	r24, 0x0110
    466c:	1f 92       	push	r1
    466e:	8f 93       	push	r24
    4670:	8e e3       	ldi	r24, 0x3E	; 62
    4672:	94 e0       	ldi	r25, 0x04	; 4
    4674:	21 c0       	rjmp	.+66     	; 0x46b8 <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4676:	80 91 0f 01 	lds	r24, 0x010F
    467a:	68 17       	cp	r22, r24
    467c:	20 f4       	brcc	.+8      	; 0x4686 <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    467e:	86 1b       	sub	r24, r22
    4680:	80 93 0f 01 	sts	0x010F, r24
    4684:	02 c0       	rjmp	.+4      	; 0x468a <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    4686:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    468a:	80 91 0f 01 	lds	r24, 0x010F
    468e:	1f 92       	push	r1
    4690:	8f 93       	push	r24
    4692:	85 e2       	ldi	r24, 0x25	; 37
    4694:	94 e0       	ldi	r25, 0x04	; 4
    4696:	10 c0       	rjmp	.+32     	; 0x46b8 <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4698:	80 91 0e 01 	lds	r24, 0x010E
    469c:	68 17       	cp	r22, r24
    469e:	20 f4       	brcc	.+8      	; 0x46a8 <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    46a0:	86 1b       	sub	r24, r22
    46a2:	80 93 0e 01 	sts	0x010E, r24
    46a6:	02 c0       	rjmp	.+4      	; 0x46ac <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    46a8:	10 92 0e 01 	sts	0x010E, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    46ac:	80 91 0e 01 	lds	r24, 0x010E
    46b0:	1f 92       	push	r1
    46b2:	8f 93       	push	r24
    46b4:	8a e0       	ldi	r24, 0x0A	; 10
    46b6:	94 e0       	ldi	r25, 0x04	; 4
    46b8:	9f 93       	push	r25
    46ba:	8f 93       	push	r24
    46bc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
            break;
    46c0:	0f 90       	pop	r0
    46c2:	0f 90       	pop	r0
    46c4:	0f 90       	pop	r0
    46c6:	0f 90       	pop	r0
    46c8:	08 95       	ret

000046ca <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    46ca:	cf 93       	push	r28
    46cc:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    46ce:	1f 92       	push	r1
    46d0:	8f 93       	push	r24
    46d2:	8f e0       	ldi	r24, 0x0F	; 15
    46d4:	97 e0       	ldi	r25, 0x07	; 7
    46d6:	9f 93       	push	r25
    46d8:	8f 93       	push	r24
    46da:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    default_layer_set(1UL<<layer);
    46de:	81 e0       	ldi	r24, 0x01	; 1
    46e0:	90 e0       	ldi	r25, 0x00	; 0
    46e2:	a0 e0       	ldi	r26, 0x00	; 0
    46e4:	b0 e0       	ldi	r27, 0x00	; 0
    46e6:	bc 01       	movw	r22, r24
    46e8:	cd 01       	movw	r24, r26
    46ea:	04 c0       	rjmp	.+8      	; 0x46f4 <switch_default_layer+0x2a>
    46ec:	66 0f       	add	r22, r22
    46ee:	77 1f       	adc	r23, r23
    46f0:	88 1f       	adc	r24, r24
    46f2:	99 1f       	adc	r25, r25
    46f4:	ca 95       	dec	r28
    46f6:	d2 f7       	brpl	.-12     	; 0x46ec <switch_default_layer+0x22>
    46f8:	0e 94 87 19 	call	0x330e	; 0x330e <default_layer_set>
    clear_keyboard();
    46fc:	0f 90       	pop	r0
    46fe:	0f 90       	pop	r0
    4700:	0f 90       	pop	r0
    4702:	0f 90       	pop	r0
}
    4704:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4706:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <clear_keyboard>

0000470a <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    470a:	cf 93       	push	r28
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    470c:	87 32       	cpi	r24, 0x27	; 39
    470e:	b0 f5       	brcc	.+108    	; 0x477c <command_common+0x72>
    4710:	8e 31       	cpi	r24, 0x1E	; 30
    4712:	08 f0       	brcs	.+2      	; 0x4716 <command_common+0xc>
    4714:	40 c2       	rjmp	.+1152   	; 0x4b96 <command_common+0x48c>
    4716:	8e 30       	cpi	r24, 0x0E	; 14
    4718:	09 f4       	brne	.+2      	; 0x471c <command_common+0x12>
    471a:	be c1       	rjmp	.+892    	; 0x4a98 <command_common+0x38e>
    471c:	00 f5       	brcc	.+64     	; 0x475e <command_common+0x54>
    471e:	87 30       	cpi	r24, 0x07	; 7
    4720:	09 f4       	brne	.+2      	; 0x4724 <command_common+0x1a>
    4722:	8d c1       	rjmp	.+794    	; 0x4a3e <command_common+0x334>
    4724:	a8 f4       	brcc	.+42     	; 0x4750 <command_common+0x46>
    4726:	86 30       	cpi	r24, 0x06	; 6
    4728:	09 f0       	breq	.+2      	; 0x472c <command_common+0x22>
    472a:	39 c2       	rjmp	.+1138   	; 0x4b9e <command_common+0x494>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    472c:	80 91 b1 01 	lds	r24, 0x01B1
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    4730:	81 7f       	andi	r24, 0xF1	; 241
    4732:	8e 7f       	andi	r24, 0xFE	; 254
    4734:	80 93 b1 01 	sts	0x01B1, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4738:	84 e1       	ldi	r24, 0x14	; 20
    473a:	97 e0       	ldi	r25, 0x07	; 7
    473c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    4740:	8d e0       	ldi	r24, 0x0D	; 13
    4742:	9b e0       	ldi	r25, 0x0B	; 11
    4744:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            command_state = CONSOLE;
    4748:	81 e0       	ldi	r24, 0x01	; 1
    474a:	80 93 c1 01 	sts	0x01C1, r24
    474e:	75 c1       	rjmp	.+746    	; 0x4a3a <command_common+0x330>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4750:	88 30       	cpi	r24, 0x08	; 8
    4752:	09 f4       	brne	.+2      	; 0x4756 <command_common+0x4c>
    4754:	3f c0       	rjmp	.+126    	; 0x47d4 <command_common+0xca>
    4756:	8b 30       	cpi	r24, 0x0B	; 11
    4758:	09 f4       	brne	.+2      	; 0x475c <command_common+0x52>
    475a:	6b c1       	rjmp	.+726    	; 0x4a32 <command_common+0x328>
    475c:	20 c2       	rjmp	.+1088   	; 0x4b9e <command_common+0x494>
    475e:	86 31       	cpi	r24, 0x16	; 22
    4760:	09 f4       	brne	.+2      	; 0x4764 <command_common+0x5a>
    4762:	e0 c1       	rjmp	.+960    	; 0x4b24 <command_common+0x41a>
    4764:	20 f4       	brcc	.+8      	; 0x476e <command_common+0x64>
    4766:	80 31       	cpi	r24, 0x10	; 16
    4768:	09 f4       	brne	.+2      	; 0x476c <command_common+0x62>
    476a:	aa c1       	rjmp	.+852    	; 0x4ac0 <command_common+0x3b6>
    476c:	18 c2       	rjmp	.+1072   	; 0x4b9e <command_common+0x494>
    476e:	89 31       	cpi	r24, 0x19	; 25
    4770:	09 f4       	brne	.+2      	; 0x4774 <command_common+0x6a>
    4772:	c1 c1       	rjmp	.+898    	; 0x4af6 <command_common+0x3ec>
    4774:	8b 31       	cpi	r24, 0x1B	; 27
    4776:	09 f4       	brne	.+2      	; 0x477a <command_common+0x70>
    4778:	7b c1       	rjmp	.+758    	; 0x4a70 <command_common+0x366>
    477a:	11 c2       	rjmp	.+1058   	; 0x4b9e <command_common+0x494>
    477c:	88 33       	cpi	r24, 0x38	; 56
    477e:	09 f4       	brne	.+2      	; 0x4782 <command_common+0x78>
    4780:	58 c1       	rjmp	.+688    	; 0x4a32 <command_common+0x328>
    4782:	50 f4       	brcc	.+20     	; 0x4798 <command_common+0x8e>
    4784:	89 32       	cpi	r24, 0x29	; 41
    4786:	09 f4       	brne	.+2      	; 0x478a <command_common+0x80>
    4788:	04 c2       	rjmp	.+1032   	; 0x4b92 <command_common+0x488>
    478a:	85 33       	cpi	r24, 0x35	; 53
    478c:	09 f4       	brne	.+2      	; 0x4790 <command_common+0x86>
    478e:	01 c2       	rjmp	.+1026   	; 0x4b92 <command_common+0x488>
    4790:	87 32       	cpi	r24, 0x27	; 39
    4792:	09 f0       	breq	.+2      	; 0x4796 <command_common+0x8c>
    4794:	04 c2       	rjmp	.+1032   	; 0x4b9e <command_common+0x494>
    4796:	fd c1       	rjmp	.+1018   	; 0x4b92 <command_common+0x488>
    4798:	83 34       	cpi	r24, 0x43	; 67
    479a:	09 f4       	brne	.+2      	; 0x479e <command_common+0x94>
    479c:	fa c1       	rjmp	.+1012   	; 0x4b92 <command_common+0x488>
    479e:	28 f4       	brcc	.+10     	; 0x47aa <command_common+0xa0>
    47a0:	8a 33       	cpi	r24, 0x3A	; 58
    47a2:	08 f4       	brcc	.+2      	; 0x47a6 <command_common+0x9c>
    47a4:	fc c1       	rjmp	.+1016   	; 0x4b9e <command_common+0x494>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    47a6:	89 53       	subi	r24, 0x39	; 57
    47a8:	f7 c1       	rjmp	.+1006   	; 0x4b98 <command_common+0x48e>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    47aa:	88 34       	cpi	r24, 0x48	; 72
    47ac:	09 f0       	breq	.+2      	; 0x47b0 <command_common+0xa6>
    47ae:	f7 c1       	rjmp	.+1006   	; 0x4b9e <command_common+0x494>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    47b0:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <clear_keyboard>
            print("\n\nbootloader... ");
    47b4:	8c ef       	ldi	r24, 0xFC	; 252
    47b6:	9a e0       	ldi	r25, 0x0A	; 10
    47b8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    47bc:	9f ef       	ldi	r25, 0xFF	; 255
    47be:	23 ed       	ldi	r18, 0xD3	; 211
    47c0:	80 e3       	ldi	r24, 0x30	; 48
    47c2:	91 50       	subi	r25, 0x01	; 1
    47c4:	20 40       	sbci	r18, 0x00	; 0
    47c6:	80 40       	sbci	r24, 0x00	; 0
    47c8:	e1 f7       	brne	.-8      	; 0x47c2 <command_common+0xb8>
    47ca:	00 c0       	rjmp	.+0      	; 0x47cc <command_common+0xc2>
    47cc:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    47ce:	0e 94 ad 1c 	call	0x395a	; 0x395a <bootloader_jump>
    47d2:	33 c1       	rjmp	.+614    	; 0x4a3a <command_common+0x330>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    47d4:	81 e1       	ldi	r24, 0x11	; 17
    47d6:	9b e0       	ldi	r25, 0x0B	; 11
    47d8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    47dc:	8b e0       	ldi	r24, 0x0B	; 11
    47de:	99 e0       	ldi	r25, 0x09	; 9
    47e0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    47e4:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <eeconfig_read_default_layer>
    47e8:	1f 92       	push	r1
    47ea:	8f 93       	push	r24
    47ec:	88 e0       	ldi	r24, 0x08	; 8
    47ee:	99 e0       	ldi	r25, 0x09	; 9
    47f0:	9f 93       	push	r25
    47f2:	8f 93       	push	r24
    47f4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    47f8:	86 e0       	ldi	r24, 0x06	; 6
    47fa:	99 e0       	ldi	r25, 0x09	; 9
    47fc:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4800:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <eeconfig_read_debug>
    4804:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4806:	83 ef       	ldi	r24, 0xF3	; 243
    4808:	98 e0       	ldi	r25, 0x08	; 8
    480a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    480e:	1f 92       	push	r1
    4810:	cf 93       	push	r28
    4812:	8e ee       	ldi	r24, 0xEE	; 238
    4814:	98 e0       	ldi	r25, 0x08	; 8
    4816:	9f 93       	push	r25
    4818:	8f 93       	push	r24
    481a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    481e:	8c ee       	ldi	r24, 0xEC	; 236
    4820:	98 e0       	ldi	r25, 0x08	; 8
    4822:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4826:	82 ee       	ldi	r24, 0xE2	; 226
    4828:	98 e0       	ldi	r25, 0x08	; 8
    482a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    482e:	8c 2f       	mov	r24, r28
    4830:	81 70       	andi	r24, 0x01	; 1
    4832:	1f 92       	push	r1
    4834:	8f 93       	push	r24
    4836:	8f ed       	ldi	r24, 0xDF	; 223
    4838:	98 e0       	ldi	r25, 0x08	; 8
    483a:	9f 93       	push	r25
    483c:	8f 93       	push	r24
    483e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4842:	8d ed       	ldi	r24, 0xDD	; 221
    4844:	98 e0       	ldi	r25, 0x08	; 8
    4846:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    484a:	83 ed       	ldi	r24, 0xD3	; 211
    484c:	98 e0       	ldi	r25, 0x08	; 8
    484e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4852:	c1 fb       	bst	r28, 1
    4854:	88 27       	eor	r24, r24
    4856:	80 f9       	bld	r24, 0
    4858:	1f 92       	push	r1
    485a:	8f 93       	push	r24
    485c:	80 ed       	ldi	r24, 0xD0	; 208
    485e:	98 e0       	ldi	r25, 0x08	; 8
    4860:	9f 93       	push	r25
    4862:	8f 93       	push	r24
    4864:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4868:	8e ec       	ldi	r24, 0xCE	; 206
    486a:	98 e0       	ldi	r25, 0x08	; 8
    486c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4870:	82 ec       	ldi	r24, 0xC2	; 194
    4872:	98 e0       	ldi	r25, 0x08	; 8
    4874:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4878:	c2 fb       	bst	r28, 2
    487a:	88 27       	eor	r24, r24
    487c:	80 f9       	bld	r24, 0
    487e:	1f 92       	push	r1
    4880:	8f 93       	push	r24
    4882:	8f eb       	ldi	r24, 0xBF	; 191
    4884:	98 e0       	ldi	r25, 0x08	; 8
    4886:	9f 93       	push	r25
    4888:	8f 93       	push	r24
    488a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    488e:	8d eb       	ldi	r24, 0xBD	; 189
    4890:	98 e0       	ldi	r25, 0x08	; 8
    4892:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4896:	84 eb       	ldi	r24, 0xB4	; 180
    4898:	98 e0       	ldi	r25, 0x08	; 8
    489a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    489e:	c3 fb       	bst	r28, 3
    48a0:	cc 27       	eor	r28, r28
    48a2:	c0 f9       	bld	r28, 0
    48a4:	1f 92       	push	r1
    48a6:	cf 93       	push	r28
    48a8:	81 eb       	ldi	r24, 0xB1	; 177
    48aa:	98 e0       	ldi	r25, 0x08	; 8
    48ac:	9f 93       	push	r25
    48ae:	8f 93       	push	r24
    48b0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    48b4:	8f ea       	ldi	r24, 0xAF	; 175
    48b6:	98 e0       	ldi	r25, 0x08	; 8
    48b8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    48bc:	0e 94 76 1f 	call	0x3eec	; 0x3eec <eeconfig_read_keymap>
    48c0:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    48c2:	8b e9       	ldi	r24, 0x9B	; 155
    48c4:	98 e0       	ldi	r25, 0x08	; 8
    48c6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    48ca:	1f 92       	push	r1
    48cc:	cf 93       	push	r28
    48ce:	86 e9       	ldi	r24, 0x96	; 150
    48d0:	98 e0       	ldi	r25, 0x08	; 8
    48d2:	9f 93       	push	r25
    48d4:	8f 93       	push	r24
    48d6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    48da:	84 e9       	ldi	r24, 0x94	; 148
    48dc:	98 e0       	ldi	r25, 0x08	; 8
    48de:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    48e2:	8b e7       	ldi	r24, 0x7B	; 123
    48e4:	98 e0       	ldi	r25, 0x08	; 8
    48e6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    48ea:	8c 2f       	mov	r24, r28
    48ec:	81 70       	andi	r24, 0x01	; 1
    48ee:	1f 92       	push	r1
    48f0:	8f 93       	push	r24
    48f2:	88 e7       	ldi	r24, 0x78	; 120
    48f4:	98 e0       	ldi	r25, 0x08	; 8
    48f6:	9f 93       	push	r25
    48f8:	8f 93       	push	r24
    48fa:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    48fe:	8d b7       	in	r24, 0x3d	; 61
    4900:	9e b7       	in	r25, 0x3e	; 62
    4902:	80 96       	adiw	r24, 0x20	; 32
    4904:	0f b6       	in	r0, 0x3f	; 63
    4906:	f8 94       	cli
    4908:	9e bf       	out	0x3e, r25	; 62
    490a:	0f be       	out	0x3f, r0	; 63
    490c:	8d bf       	out	0x3d, r24	; 61
    490e:	86 e7       	ldi	r24, 0x76	; 118
    4910:	98 e0       	ldi	r25, 0x08	; 8
    4912:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4916:	8f e5       	ldi	r24, 0x5F	; 95
    4918:	98 e0       	ldi	r25, 0x08	; 8
    491a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    491e:	c1 fb       	bst	r28, 1
    4920:	88 27       	eor	r24, r24
    4922:	80 f9       	bld	r24, 0
    4924:	1f 92       	push	r1
    4926:	8f 93       	push	r24
    4928:	8c e5       	ldi	r24, 0x5C	; 92
    492a:	98 e0       	ldi	r25, 0x08	; 8
    492c:	9f 93       	push	r25
    492e:	8f 93       	push	r24
    4930:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4934:	8a e5       	ldi	r24, 0x5A	; 90
    4936:	98 e0       	ldi	r25, 0x08	; 8
    4938:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    493c:	88 e4       	ldi	r24, 0x48	; 72
    493e:	98 e0       	ldi	r25, 0x08	; 8
    4940:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4944:	c2 fb       	bst	r28, 2
    4946:	88 27       	eor	r24, r24
    4948:	80 f9       	bld	r24, 0
    494a:	1f 92       	push	r1
    494c:	8f 93       	push	r24
    494e:	85 e4       	ldi	r24, 0x45	; 69
    4950:	98 e0       	ldi	r25, 0x08	; 8
    4952:	9f 93       	push	r25
    4954:	8f 93       	push	r24
    4956:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    495a:	83 e4       	ldi	r24, 0x43	; 67
    495c:	98 e0       	ldi	r25, 0x08	; 8
    495e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4962:	81 e3       	ldi	r24, 0x31	; 49
    4964:	98 e0       	ldi	r25, 0x08	; 8
    4966:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    496a:	c3 fb       	bst	r28, 3
    496c:	88 27       	eor	r24, r24
    496e:	80 f9       	bld	r24, 0
    4970:	1f 92       	push	r1
    4972:	8f 93       	push	r24
    4974:	8e e2       	ldi	r24, 0x2E	; 46
    4976:	98 e0       	ldi	r25, 0x08	; 8
    4978:	9f 93       	push	r25
    497a:	8f 93       	push	r24
    497c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4980:	8c e2       	ldi	r24, 0x2C	; 44
    4982:	98 e0       	ldi	r25, 0x08	; 8
    4984:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4988:	82 e2       	ldi	r24, 0x22	; 34
    498a:	98 e0       	ldi	r25, 0x08	; 8
    498c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4990:	c4 fb       	bst	r28, 4
    4992:	88 27       	eor	r24, r24
    4994:	80 f9       	bld	r24, 0
    4996:	1f 92       	push	r1
    4998:	8f 93       	push	r24
    499a:	8f e1       	ldi	r24, 0x1F	; 31
    499c:	98 e0       	ldi	r25, 0x08	; 8
    499e:	9f 93       	push	r25
    49a0:	8f 93       	push	r24
    49a2:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    49a6:	8d e1       	ldi	r24, 0x1D	; 29
    49a8:	98 e0       	ldi	r25, 0x08	; 8
    49aa:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    49ae:	8b e0       	ldi	r24, 0x0B	; 11
    49b0:	98 e0       	ldi	r25, 0x08	; 8
    49b2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    49b6:	c5 fb       	bst	r28, 5
    49b8:	88 27       	eor	r24, r24
    49ba:	80 f9       	bld	r24, 0
    49bc:	1f 92       	push	r1
    49be:	8f 93       	push	r24
    49c0:	88 e0       	ldi	r24, 0x08	; 8
    49c2:	98 e0       	ldi	r25, 0x08	; 8
    49c4:	9f 93       	push	r25
    49c6:	8f 93       	push	r24
    49c8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    49cc:	86 e0       	ldi	r24, 0x06	; 6
    49ce:	98 e0       	ldi	r25, 0x08	; 8
    49d0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    49d4:	8a ee       	ldi	r24, 0xEA	; 234
    49d6:	97 e0       	ldi	r25, 0x07	; 7
    49d8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    49dc:	c6 fb       	bst	r28, 6
    49de:	88 27       	eor	r24, r24
    49e0:	80 f9       	bld	r24, 0
    49e2:	1f 92       	push	r1
    49e4:	8f 93       	push	r24
    49e6:	87 ee       	ldi	r24, 0xE7	; 231
    49e8:	97 e0       	ldi	r25, 0x07	; 7
    49ea:	9f 93       	push	r25
    49ec:	8f 93       	push	r24
    49ee:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    49f2:	85 ee       	ldi	r24, 0xE5	; 229
    49f4:	97 e0       	ldi	r25, 0x07	; 7
    49f6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    49fa:	8d ed       	ldi	r24, 0xDD	; 221
    49fc:	97 e0       	ldi	r25, 0x07	; 7
    49fe:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4a02:	c7 fb       	bst	r28, 7
    4a04:	cc 27       	eor	r28, r28
    4a06:	c0 f9       	bld	r28, 0
    4a08:	1f 92       	push	r1
    4a0a:	cf 93       	push	r28
    4a0c:	8a ed       	ldi	r24, 0xDA	; 218
    4a0e:	97 e0       	ldi	r25, 0x07	; 7
    4a10:	9f 93       	push	r25
    4a12:	8f 93       	push	r24
    4a14:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4a18:	88 ed       	ldi	r24, 0xD8	; 216
    4a1a:	97 e0       	ldi	r25, 0x07	; 7
    4a1c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4a20:	8d b7       	in	r24, 0x3d	; 61
    4a22:	9e b7       	in	r25, 0x3e	; 62
    4a24:	4c 96       	adiw	r24, 0x1c	; 28
    4a26:	0f b6       	in	r0, 0x3f	; 63
    4a28:	f8 94       	cli
    4a2a:	9e bf       	out	0x3e, r25	; 62
    4a2c:	0f be       	out	0x3f, r0	; 63
    4a2e:	8d bf       	out	0x3d, r24	; 61
    4a30:	04 c0       	rjmp	.+8      	; 0x4a3a <command_common+0x330>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4a32:	8b e3       	ldi	r24, 0x3B	; 59
    4a34:	97 e0       	ldi	r25, 0x07	; 7
    4a36:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4a3a:	c1 e0       	ldi	r28, 0x01	; 1
    4a3c:	b5 c0       	rjmp	.+362    	; 0x4ba8 <command_common+0x49e>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4a3e:	80 91 b1 01 	lds	r24, 0x01B1
    4a42:	c8 2f       	mov	r28, r24
    4a44:	c1 70       	andi	r28, 0x01	; 1
    4a46:	80 ff       	sbrs	r24, 0
    4a48:	09 c0       	rjmp	.+18     	; 0x4a5c <command_common+0x352>
                print("\ndebug: off\n");
    4a4a:	8f ee       	ldi	r24, 0xEF	; 239
    4a4c:	9a e0       	ldi	r25, 0x0A	; 10
    4a4e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
                debug_matrix   = false;
    4a52:	80 91 b1 01 	lds	r24, 0x01B1
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4a56:	81 7f       	andi	r24, 0xF1	; 241
    4a58:	8e 7f       	andi	r24, 0xFE	; 254
    4a5a:	47 c0       	rjmp	.+142    	; 0x4aea <command_common+0x3e0>
            } else {
                print("\ndebug: on\n");
    4a5c:	83 ee       	ldi	r24, 0xE3	; 227
    4a5e:	9a e0       	ldi	r25, 0x0A	; 10
    4a60:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
                debug_enable   = true;
    4a64:	80 91 b1 01 	lds	r24, 0x01B1
    4a68:	81 60       	ori	r24, 0x01	; 1
    4a6a:	80 93 b1 01 	sts	0x01B1, r24
    4a6e:	e5 cf       	rjmp	.-54     	; 0x4a3a <command_common+0x330>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4a70:	90 91 b1 01 	lds	r25, 0x01B1
    4a74:	91 fb       	bst	r25, 1
    4a76:	cc 27       	eor	r28, r28
    4a78:	c0 f9       	bld	r28, 0
    4a7a:	81 e0       	ldi	r24, 0x01	; 1
    4a7c:	c8 27       	eor	r28, r24
    4a7e:	89 2f       	mov	r24, r25
    4a80:	c0 fb       	bst	r28, 0
    4a82:	81 f9       	bld	r24, 1
    4a84:	80 93 b1 01 	sts	0x01B1, r24
            if (debug_matrix) {
    4a88:	cc 23       	and	r28, r28
    4a8a:	19 f0       	breq	.+6      	; 0x4a92 <command_common+0x388>
                print("\nmatrix: on\n");
    4a8c:	86 ed       	ldi	r24, 0xD6	; 214
    4a8e:	9a e0       	ldi	r25, 0x0A	; 10
    4a90:	27 c0       	rjmp	.+78     	; 0x4ae0 <command_common+0x3d6>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4a92:	88 ec       	ldi	r24, 0xC8	; 200
    4a94:	9a e0       	ldi	r25, 0x0A	; 10
    4a96:	cf cf       	rjmp	.-98     	; 0x4a36 <command_common+0x32c>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4a98:	90 91 b1 01 	lds	r25, 0x01B1
    4a9c:	92 fb       	bst	r25, 2
    4a9e:	cc 27       	eor	r28, r28
    4aa0:	c0 f9       	bld	r28, 0
    4aa2:	81 e0       	ldi	r24, 0x01	; 1
    4aa4:	c8 27       	eor	r28, r24
    4aa6:	89 2f       	mov	r24, r25
    4aa8:	c0 fb       	bst	r28, 0
    4aaa:	82 f9       	bld	r24, 2
    4aac:	80 93 b1 01 	sts	0x01B1, r24
            if (debug_keyboard) {
    4ab0:	cc 23       	and	r28, r28
    4ab2:	19 f0       	breq	.+6      	; 0x4aba <command_common+0x3b0>
                print("\nkeyboard: on\n");
    4ab4:	89 eb       	ldi	r24, 0xB9	; 185
    4ab6:	9a e0       	ldi	r25, 0x0A	; 10
    4ab8:	13 c0       	rjmp	.+38     	; 0x4ae0 <command_common+0x3d6>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4aba:	89 ea       	ldi	r24, 0xA9	; 169
    4abc:	9a e0       	ldi	r25, 0x0A	; 10
    4abe:	bb cf       	rjmp	.-138    	; 0x4a36 <command_common+0x32c>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4ac0:	90 91 b1 01 	lds	r25, 0x01B1
    4ac4:	93 fb       	bst	r25, 3
    4ac6:	cc 27       	eor	r28, r28
    4ac8:	c0 f9       	bld	r28, 0
    4aca:	81 e0       	ldi	r24, 0x01	; 1
    4acc:	c8 27       	eor	r28, r24
    4ace:	89 2f       	mov	r24, r25
    4ad0:	c0 fb       	bst	r28, 0
    4ad2:	83 f9       	bld	r24, 3
    4ad4:	80 93 b1 01 	sts	0x01B1, r24
            if (debug_mouse) {
    4ad8:	cc 23       	and	r28, r28
    4ada:	51 f0       	breq	.+20     	; 0x4af0 <command_common+0x3e6>
                print("\nmouse: on\n");
    4adc:	8d e9       	ldi	r24, 0x9D	; 157
    4ade:	9a e0       	ldi	r25, 0x0A	; 10
    4ae0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
                debug_enable = true;
    4ae4:	80 91 b1 01 	lds	r24, 0x01B1
    4ae8:	81 60       	ori	r24, 0x01	; 1
    4aea:	80 93 b1 01 	sts	0x01B1, r24
    4aee:	5c c0       	rjmp	.+184    	; 0x4ba8 <command_common+0x49e>
            } else {
                print("\nmouse: off\n");
    4af0:	80 e9       	ldi	r24, 0x90	; 144
    4af2:	9a e0       	ldi	r25, 0x0A	; 10
    4af4:	a0 cf       	rjmp	.-192    	; 0x4a36 <command_common+0x32c>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4af6:	81 e8       	ldi	r24, 0x81	; 129
    4af8:	9a e0       	ldi	r25, 0x0A	; 10
    4afa:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4afe:	8f e4       	ldi	r24, 0x4F	; 79
    4b00:	9a e0       	ldi	r25, 0x0A	; 10
    4b02:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4b06:	8e e1       	ldi	r24, 0x1E	; 30
    4b08:	9a e0       	ldi	r25, 0x0A	; 10
    4b0a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4b0e:	81 ef       	ldi	r24, 0xF1	; 241
    4b10:	99 e0       	ldi	r25, 0x09	; 9
    4b12:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            /* build options */
            print("OPTIONS:"
    4b16:	81 eb       	ldi	r24, 0xB1	; 177
    4b18:	99 e0       	ldi	r25, 0x09	; 9
    4b1a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4b1e:	86 e8       	ldi	r24, 0x86	; 134
    4b20:	99 e0       	ldi	r25, 0x09	; 9
    4b22:	89 cf       	rjmp	.-238    	; 0x4a36 <command_common+0x32c>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4b24:	88 e7       	ldi	r24, 0x78	; 120
    4b26:	99 e0       	ldi	r25, 0x09	; 9
    4b28:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            print_val_hex8(host_keyboard_leds());
    4b2c:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <host_keyboard_leds>
    4b30:	1f 92       	push	r1
    4b32:	8f 93       	push	r24
    4b34:	8e e5       	ldi	r24, 0x5E	; 94
    4b36:	99 e0       	ldi	r25, 0x09	; 9
    4b38:	9f 93       	push	r25
    4b3a:	8f 93       	push	r24
    4b3c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4b40:	80 91 0b 01 	lds	r24, 0x010B
    4b44:	1f 92       	push	r1
    4b46:	8f 93       	push	r24
    4b48:	87 e4       	ldi	r24, 0x47	; 71
    4b4a:	99 e0       	ldi	r25, 0x09	; 9
    4b4c:	9f 93       	push	r25
    4b4e:	8f 93       	push	r24
    4b50:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
            print_val_hex8(keyboard_idle);
    4b54:	80 91 54 01 	lds	r24, 0x0154
    4b58:	1f 92       	push	r1
    4b5a:	8f 93       	push	r24
    4b5c:	84 e3       	ldi	r24, 0x34	; 52
    4b5e:	99 e0       	ldi	r25, 0x09	; 9
    4b60:	9f 93       	push	r25
    4b62:	8f 93       	push	r24
    4b64:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
#endif
            print_val_hex32(timer_read32());
    4b68:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <timer_read32>
    4b6c:	9f 93       	push	r25
    4b6e:	8f 93       	push	r24
    4b70:	7f 93       	push	r23
    4b72:	6f 93       	push	r22
    4b74:	8d e1       	ldi	r24, 0x1D	; 29
    4b76:	99 e0       	ldi	r25, 0x09	; 9
    4b78:	9f 93       	push	r25
    4b7a:	8f 93       	push	r24
    4b7c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    4b80:	8d b7       	in	r24, 0x3d	; 61
    4b82:	9e b7       	in	r25, 0x3e	; 62
    4b84:	42 96       	adiw	r24, 0x12	; 18
    4b86:	0f b6       	in	r0, 0x3f	; 63
    4b88:	f8 94       	cli
    4b8a:	9e bf       	out	0x3e, r25	; 62
    4b8c:	0f be       	out	0x3f, r0	; 63
    4b8e:	8d bf       	out	0x3d, r24	; 61
    4b90:	54 cf       	rjmp	.-344    	; 0x4a3a <command_common+0x330>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    4b92:	80 e0       	ldi	r24, 0x00	; 0
    4b94:	01 c0       	rjmp	.+2      	; 0x4b98 <command_common+0x48e>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4b96:	8d 51       	subi	r24, 0x1D	; 29
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4b98:	0e 94 65 23 	call	0x46ca	; 0x46ca <switch_default_layer>
    4b9c:	4e cf       	rjmp	.-356    	; 0x4a3a <command_common+0x330>
            break;
        default:
            print("?");
    4b9e:	8b e1       	ldi	r24, 0x1B	; 27
    4ba0:	99 e0       	ldi	r25, 0x09	; 9
    4ba2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            return false;
    4ba6:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4ba8:	8c 2f       	mov	r24, r28
    4baa:	cf 91       	pop	r28
    4bac:	08 95       	ret

00004bae <command_extra>:
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4bae:	80 e0       	ldi	r24, 0x00	; 0
    4bb0:	08 95       	ret

00004bb2 <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4bb2:	80 e0       	ldi	r24, 0x00	; 0
    4bb4:	08 95       	ret

00004bb6 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    4bb6:	cf 93       	push	r28
    4bb8:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4bba:	80 91 c1 01 	lds	r24, 0x01C1
    4bbe:	81 30       	cpi	r24, 0x01	; 1
    4bc0:	71 f0       	breq	.+28     	; 0x4bde <command_proc+0x28>
    4bc2:	20 f0       	brcs	.+8      	; 0x4bcc <command_proc+0x16>
    4bc4:	82 30       	cpi	r24, 0x02	; 2
    4bc6:	09 f4       	brne	.+2      	; 0x4bca <command_proc+0x14>
    4bc8:	4b c0       	rjmp	.+150    	; 0x4c60 <command_proc+0xaa>
    4bca:	42 c1       	rjmp	.+644    	; 0x4e50 <command_proc+0x29a>
        case ONESHOT:
            if (!IS_COMMAND())
    4bcc:	e0 91 0c 01 	lds	r30, 0x010C
    4bd0:	f0 91 0d 01 	lds	r31, 0x010D
    4bd4:	80 81       	ld	r24, Z
    4bd6:	82 32       	cpi	r24, 0x22	; 34
    4bd8:	09 f0       	breq	.+2      	; 0x4bdc <command_proc+0x26>
    4bda:	3c c1       	rjmp	.+632    	; 0x4e54 <command_proc+0x29e>
    4bdc:	07 c0       	rjmp	.+14     	; 0x4bec <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    4bde:	e0 91 0c 01 	lds	r30, 0x010C
    4be2:	f0 91 0d 01 	lds	r31, 0x010D
    4be6:	80 81       	ld	r24, Z
    4be8:	82 32       	cpi	r24, 0x22	; 34
    4bea:	61 f4       	brne	.+24     	; 0x4c04 <command_proc+0x4e>
                return (command_extra(code) || command_common(code));
    4bec:	8c 2f       	mov	r24, r28
    4bee:	0e 94 d7 25 	call	0x4bae	; 0x4bae <command_extra>
    4bf2:	81 11       	cpse	r24, r1
    4bf4:	04 c0       	rjmp	.+8      	; 0x4bfe <command_proc+0x48>
    4bf6:	8c 2f       	mov	r24, r28
    4bf8:	0e 94 85 23 	call	0x470a	; 0x470a <command_common>
    4bfc:	2f c0       	rjmp	.+94     	; 0x4c5c <command_proc+0xa6>
    4bfe:	81 e0       	ldi	r24, 0x01	; 1
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	2c c0       	rjmp	.+88     	; 0x4c5c <command_proc+0xa6>
            else
                return (command_console_extra(code) || command_console(code));
    4c04:	8c 2f       	mov	r24, r28
    4c06:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <command_console_extra>
    4c0a:	81 11       	cpse	r24, r1
    4c0c:	26 c0       	rjmp	.+76     	; 0x4c5a <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4c0e:	c4 31       	cpi	r28, 0x14	; 20
    4c10:	e1 f0       	breq	.+56     	; 0x4c4a <command_proc+0x94>
    4c12:	70 f4       	brcc	.+28     	; 0x4c30 <command_proc+0x7a>
    4c14:	cb 30       	cpi	r28, 0x0B	; 11
    4c16:	81 f0       	breq	.+32     	; 0x4c38 <command_proc+0x82>
    4c18:	c0 31       	cpi	r28, 0x10	; 16
    4c1a:	d1 f4       	brne	.+52     	; 0x4c50 <command_proc+0x9a>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    4c1c:	0e 94 2d 22 	call	0x445a	; 0x445a <mousekey_console_help>
            print("M> ");
    4c20:	87 e0       	ldi	r24, 0x07	; 7
    4c22:	97 e0       	ldi	r25, 0x07	; 7
    4c24:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            command_state = MOUSEKEY;
    4c28:	82 e0       	ldi	r24, 0x02	; 2
    4c2a:	80 93 c1 01 	sts	0x01C1, r24
    4c2e:	15 c0       	rjmp	.+42     	; 0x4c5a <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4c30:	c9 32       	cpi	r28, 0x29	; 41
    4c32:	59 f0       	breq	.+22     	; 0x4c4a <command_proc+0x94>
    4c34:	c8 33       	cpi	r28, 0x38	; 56
    4c36:	61 f4       	brne	.+24     	; 0x4c50 <command_proc+0x9a>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4c38:	84 e1       	ldi	r24, 0x14	; 20
    4c3a:	97 e0       	ldi	r25, 0x07	; 7
    4c3c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    4c40:	8b e0       	ldi	r24, 0x0B	; 11
    4c42:	97 e0       	ldi	r25, 0x07	; 7
    4c44:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4c48:	08 c0       	rjmp	.+16     	; 0x4c5a <command_proc+0xa4>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    4c4a:	10 92 c1 01 	sts	0x01C1, r1
    4c4e:	04 c1       	rjmp	.+520    	; 0x4e58 <command_proc+0x2a2>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    4c50:	85 e0       	ldi	r24, 0x05	; 5
    4c52:	97 e0       	ldi	r25, 0x07	; 7
    4c54:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4c58:	ff c0       	rjmp	.+510    	; 0x4e58 <command_proc+0x2a2>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    4c5a:	81 e0       	ldi	r24, 0x01	; 1
    4c5c:	81 70       	andi	r24, 0x01	; 1
    4c5e:	fe c0       	rjmp	.+508    	; 0x4e5c <command_proc+0x2a6>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4c60:	c4 32       	cpi	r28, 0x24	; 36
    4c62:	28 f5       	brcc	.+74     	; 0x4cae <command_proc+0xf8>
    4c64:	ce 31       	cpi	r28, 0x1E	; 30
    4c66:	08 f0       	brcs	.+2      	; 0x4c6a <command_proc+0xb4>
    4c68:	c1 c0       	rjmp	.+386    	; 0x4dec <command_proc+0x236>
    4c6a:	cb 30       	cpi	r28, 0x0B	; 11
    4c6c:	a1 f1       	breq	.+104    	; 0x4cd6 <command_proc+0x120>
    4c6e:	d0 f4       	brcc	.+52     	; 0x4ca4 <command_proc+0xee>
    4c70:	c7 30       	cpi	r28, 0x07	; 7
    4c72:	09 f0       	breq	.+2      	; 0x4c76 <command_proc+0xc0>
    4c74:	d3 c0       	rjmp	.+422    	; 0x4e1c <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    4c76:	8e e1       	ldi	r24, 0x1E	; 30
    4c78:	80 93 13 01 	sts	0x0113, r24
            mk_interval = MOUSEKEY_INTERVAL;
    4c7c:	82 e3       	ldi	r24, 0x32	; 50
    4c7e:	80 93 12 01 	sts	0x0112, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    4c82:	8a e0       	ldi	r24, 0x0A	; 10
    4c84:	80 93 11 01 	sts	0x0111, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    4c88:	84 e1       	ldi	r24, 0x14	; 20
    4c8a:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    4c8e:	88 e0       	ldi	r24, 0x08	; 8
    4c90:	80 93 0f 01 	sts	0x010F, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    4c94:	88 e2       	ldi	r24, 0x28	; 40
    4c96:	80 93 0e 01 	sts	0x010E, r24
            print("set default\n");
    4c9a:	8b ea       	ldi	r24, 0xAB	; 171
    4c9c:	95 e0       	ldi	r25, 0x05	; 5
    4c9e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4ca2:	bf c0       	rjmp	.+382    	; 0x4e22 <command_proc+0x26c>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4ca4:	c3 31       	cpi	r28, 0x13	; 19
    4ca6:	49 f1       	breq	.+82     	; 0x4cfa <command_proc+0x144>
    4ca8:	c4 31       	cpi	r28, 0x14	; 20
    4caa:	c1 f0       	breq	.+48     	; 0x4cdc <command_proc+0x126>
    4cac:	b7 c0       	rjmp	.+366    	; 0x4e1c <command_proc+0x266>
    4cae:	cb 34       	cpi	r28, 0x4B	; 75
    4cb0:	09 f4       	brne	.+2      	; 0x4cb4 <command_proc+0xfe>
    4cb2:	a9 c0       	rjmp	.+338    	; 0x4e06 <command_proc+0x250>
    4cb4:	28 f4       	brcc	.+10     	; 0x4cc0 <command_proc+0x10a>
    4cb6:	c9 32       	cpi	r28, 0x29	; 41
    4cb8:	89 f0       	breq	.+34     	; 0x4cdc <command_proc+0x126>
    4cba:	c8 33       	cpi	r28, 0x38	; 56
    4cbc:	61 f0       	breq	.+24     	; 0x4cd6 <command_proc+0x120>
    4cbe:	ae c0       	rjmp	.+348    	; 0x4e1c <command_proc+0x266>
    4cc0:	c1 35       	cpi	r28, 0x51	; 81
    4cc2:	09 f4       	brne	.+2      	; 0x4cc6 <command_proc+0x110>
    4cc4:	9e c0       	rjmp	.+316    	; 0x4e02 <command_proc+0x24c>
    4cc6:	c2 35       	cpi	r28, 0x52	; 82
    4cc8:	09 f4       	brne	.+2      	; 0x4ccc <command_proc+0x116>
    4cca:	99 c0       	rjmp	.+306    	; 0x4dfe <command_proc+0x248>
    4ccc:	ce 34       	cpi	r28, 0x4E	; 78
    4cce:	09 f0       	breq	.+2      	; 0x4cd2 <command_proc+0x11c>
    4cd0:	a5 c0       	rjmp	.+330    	; 0x4e1c <command_proc+0x266>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    4cd2:	6a e0       	ldi	r22, 0x0A	; 10
    4cd4:	9e c0       	rjmp	.+316    	; 0x4e12 <command_proc+0x25c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    4cd6:	0e 94 2d 22 	call	0x445a	; 0x445a <mousekey_console_help>
    4cda:	a3 c0       	rjmp	.+326    	; 0x4e22 <command_proc+0x26c>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    4cdc:	80 91 c0 01 	lds	r24, 0x01C0
    4ce0:	88 23       	and	r24, r24
    4ce2:	19 f0       	breq	.+6      	; 0x4cea <command_proc+0x134>
                mousekey_param = 0;
    4ce4:	10 92 c0 01 	sts	0x01C0, r1
    4ce8:	9c c0       	rjmp	.+312    	; 0x4e22 <command_proc+0x26c>
            } else {
                print("C> ");
    4cea:	88 eb       	ldi	r24, 0xB8	; 184
    4cec:	95 e0       	ldi	r25, 0x05	; 5
    4cee:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
                command_state = CONSOLE;
    4cf2:	81 e0       	ldi	r24, 0x01	; 1
    4cf4:	80 93 c1 01 	sts	0x01C1, r24
    4cf8:	b1 c0       	rjmp	.+354    	; 0x4e5c <command_proc+0x2a6>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    4cfa:	82 e9       	ldi	r24, 0x92	; 146
    4cfc:	95 e0       	ldi	r25, 0x05	; 5
    4cfe:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    4d02:	80 e8       	ldi	r24, 0x80	; 128
    4d04:	95 e0       	ldi	r25, 0x05	; 5
    4d06:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4d0a:	80 91 13 01 	lds	r24, 0x0113
    4d0e:	1f 92       	push	r1
    4d10:	8f 93       	push	r24
    4d12:	8d e7       	ldi	r24, 0x7D	; 125
    4d14:	95 e0       	ldi	r25, 0x05	; 5
    4d16:	9f 93       	push	r25
    4d18:	8f 93       	push	r24
    4d1a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4d1e:	8b e7       	ldi	r24, 0x7B	; 123
    4d20:	95 e0       	ldi	r25, 0x05	; 5
    4d22:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    4d26:	89 e6       	ldi	r24, 0x69	; 105
    4d28:	95 e0       	ldi	r25, 0x05	; 5
    4d2a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4d2e:	80 91 12 01 	lds	r24, 0x0112
    4d32:	1f 92       	push	r1
    4d34:	8f 93       	push	r24
    4d36:	86 e6       	ldi	r24, 0x66	; 102
    4d38:	95 e0       	ldi	r25, 0x05	; 5
    4d3a:	9f 93       	push	r25
    4d3c:	8f 93       	push	r24
    4d3e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4d42:	84 e6       	ldi	r24, 0x64	; 100
    4d44:	95 e0       	ldi	r25, 0x05	; 5
    4d46:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    4d4a:	85 e5       	ldi	r24, 0x55	; 85
    4d4c:	95 e0       	ldi	r25, 0x05	; 5
    4d4e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4d52:	80 91 11 01 	lds	r24, 0x0111
    4d56:	1f 92       	push	r1
    4d58:	8f 93       	push	r24
    4d5a:	82 e5       	ldi	r24, 0x52	; 82
    4d5c:	95 e0       	ldi	r25, 0x05	; 5
    4d5e:	9f 93       	push	r25
    4d60:	8f 93       	push	r24
    4d62:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4d66:	80 e5       	ldi	r24, 0x50	; 80
    4d68:	95 e0       	ldi	r25, 0x05	; 5
    4d6a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    4d6e:	8f e3       	ldi	r24, 0x3F	; 63
    4d70:	95 e0       	ldi	r25, 0x05	; 5
    4d72:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4d76:	80 91 10 01 	lds	r24, 0x0110
    4d7a:	1f 92       	push	r1
    4d7c:	8f 93       	push	r24
    4d7e:	8c e3       	ldi	r24, 0x3C	; 60
    4d80:	95 e0       	ldi	r25, 0x05	; 5
    4d82:	9f 93       	push	r25
    4d84:	8f 93       	push	r24
    4d86:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4d8a:	8a e3       	ldi	r24, 0x3A	; 58
    4d8c:	95 e0       	ldi	r25, 0x05	; 5
    4d8e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    4d92:	85 e2       	ldi	r24, 0x25	; 37
    4d94:	95 e0       	ldi	r25, 0x05	; 5
    4d96:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4d9a:	80 91 0f 01 	lds	r24, 0x010F
    4d9e:	1f 92       	push	r1
    4da0:	8f 93       	push	r24
    4da2:	82 e2       	ldi	r24, 0x22	; 34
    4da4:	95 e0       	ldi	r25, 0x05	; 5
    4da6:	9f 93       	push	r25
    4da8:	8f 93       	push	r24
    4daa:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4dae:	80 e2       	ldi	r24, 0x20	; 32
    4db0:	95 e0       	ldi	r25, 0x05	; 5
    4db2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    4db6:	89 e0       	ldi	r24, 0x09	; 9
    4db8:	95 e0       	ldi	r25, 0x05	; 5
    4dba:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4dbe:	80 91 0e 01 	lds	r24, 0x010E
    4dc2:	1f 92       	push	r1
    4dc4:	8f 93       	push	r24
    4dc6:	86 e0       	ldi	r24, 0x06	; 6
    4dc8:	95 e0       	ldi	r25, 0x05	; 5
    4dca:	9f 93       	push	r25
    4dcc:	8f 93       	push	r24
    4dce:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4dd2:	84 e0       	ldi	r24, 0x04	; 4
    4dd4:	95 e0       	ldi	r25, 0x05	; 5
    4dd6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4dda:	8d b7       	in	r24, 0x3d	; 61
    4ddc:	9e b7       	in	r25, 0x3e	; 62
    4dde:	48 96       	adiw	r24, 0x18	; 24
    4de0:	0f b6       	in	r0, 0x3f	; 63
    4de2:	f8 94       	cli
    4de4:	9e bf       	out	0x3e, r25	; 62
    4de6:	0f be       	out	0x3f, r0	; 63
    4de8:	8d bf       	out	0x3d, r24	; 61
    4dea:	1b c0       	rjmp	.+54     	; 0x4e22 <command_proc+0x26c>
    4dec:	ce 51       	subi	r28, 0x1E	; 30
    4dee:	ec 2f       	mov	r30, r28
    4df0:	f0 e0       	ldi	r31, 0x00	; 0
    4df2:	e8 5d       	subi	r30, 0xD8	; 216
    4df4:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    4df6:	80 81       	ld	r24, Z
    4df8:	80 93 c0 01 	sts	0x01C0, r24
    4dfc:	12 c0       	rjmp	.+36     	; 0x4e22 <command_proc+0x26c>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    4dfe:	61 e0       	ldi	r22, 0x01	; 1
    4e00:	03 c0       	rjmp	.+6      	; 0x4e08 <command_proc+0x252>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    4e02:	61 e0       	ldi	r22, 0x01	; 1
    4e04:	06 c0       	rjmp	.+12     	; 0x4e12 <command_proc+0x25c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    4e06:	6a e0       	ldi	r22, 0x0A	; 10
    4e08:	80 91 c0 01 	lds	r24, 0x01C0
    4e0c:	0e 94 44 22 	call	0x4488	; 0x4488 <mousekey_param_inc>
    4e10:	08 c0       	rjmp	.+16     	; 0x4e22 <command_proc+0x26c>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    4e12:	80 91 c0 01 	lds	r24, 0x01C0
    4e16:	0e 94 e7 22 	call	0x45ce	; 0x45ce <mousekey_param_dec>
    4e1a:	03 c0       	rjmp	.+6      	; 0x4e22 <command_proc+0x26c>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    4e1c:	89 ea       	ldi	r24, 0xA9	; 169
    4e1e:	95 e0       	ldi	r25, 0x05	; 5
    4e20:	13 c0       	rjmp	.+38     	; 0x4e48 <command_proc+0x292>
            return false;
    }
    if (mousekey_param) {
    4e22:	80 91 c0 01 	lds	r24, 0x01C0
    4e26:	88 23       	and	r24, r24
    4e28:	69 f0       	breq	.+26     	; 0x4e44 <command_proc+0x28e>
        xprintf("M%d> ", mousekey_param);
    4e2a:	1f 92       	push	r1
    4e2c:	8f 93       	push	r24
    4e2e:	83 ea       	ldi	r24, 0xA3	; 163
    4e30:	95 e0       	ldi	r25, 0x05	; 5
    4e32:	9f 93       	push	r25
    4e34:	8f 93       	push	r24
    4e36:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4e3a:	0f 90       	pop	r0
    4e3c:	0f 90       	pop	r0
    4e3e:	0f 90       	pop	r0
    4e40:	0f 90       	pop	r0
    4e42:	04 c0       	rjmp	.+8      	; 0x4e4c <command_proc+0x296>
    } else {
        print("M>" );
    4e44:	80 ea       	ldi	r24, 0xA0	; 160
    4e46:	95 e0       	ldi	r25, 0x05	; 5
    4e48:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    4e4c:	81 e0       	ldi	r24, 0x01	; 1
    4e4e:	06 c0       	rjmp	.+12     	; 0x4e5c <command_proc+0x2a6>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    4e50:	10 92 c1 01 	sts	0x01C1, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    4e54:	80 e0       	ldi	r24, 0x00	; 0
    4e56:	02 c0       	rjmp	.+4      	; 0x4e5c <command_proc+0x2a6>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    4e58:	80 e0       	ldi	r24, 0x00	; 0
    4e5a:	00 cf       	rjmp	.-512    	; 0x4c5c <command_proc+0xa6>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    4e5c:	cf 91       	pop	r28
    4e5e:	08 95       	ret

00004e60 <__fixsfsi>:
    4e60:	04 d0       	rcall	.+8      	; 0x4e6a <__fixunssfsi>
    4e62:	68 94       	set
    4e64:	b1 11       	cpse	r27, r1
    4e66:	8d c0       	rjmp	.+282    	; 0x4f82 <__fp_szero>
    4e68:	08 95       	ret

00004e6a <__fixunssfsi>:
    4e6a:	70 d0       	rcall	.+224    	; 0x4f4c <__fp_splitA>
    4e6c:	88 f0       	brcs	.+34     	; 0x4e90 <__fixunssfsi+0x26>
    4e6e:	9f 57       	subi	r25, 0x7F	; 127
    4e70:	90 f0       	brcs	.+36     	; 0x4e96 <__fixunssfsi+0x2c>
    4e72:	b9 2f       	mov	r27, r25
    4e74:	99 27       	eor	r25, r25
    4e76:	b7 51       	subi	r27, 0x17	; 23
    4e78:	a0 f0       	brcs	.+40     	; 0x4ea2 <__fixunssfsi+0x38>
    4e7a:	d1 f0       	breq	.+52     	; 0x4eb0 <__fixunssfsi+0x46>
    4e7c:	66 0f       	add	r22, r22
    4e7e:	77 1f       	adc	r23, r23
    4e80:	88 1f       	adc	r24, r24
    4e82:	99 1f       	adc	r25, r25
    4e84:	1a f0       	brmi	.+6      	; 0x4e8c <__fixunssfsi+0x22>
    4e86:	ba 95       	dec	r27
    4e88:	c9 f7       	brne	.-14     	; 0x4e7c <__fixunssfsi+0x12>
    4e8a:	12 c0       	rjmp	.+36     	; 0x4eb0 <__fixunssfsi+0x46>
    4e8c:	b1 30       	cpi	r27, 0x01	; 1
    4e8e:	81 f0       	breq	.+32     	; 0x4eb0 <__fixunssfsi+0x46>
    4e90:	77 d0       	rcall	.+238    	; 0x4f80 <__fp_zero>
    4e92:	b1 e0       	ldi	r27, 0x01	; 1
    4e94:	08 95       	ret
    4e96:	74 c0       	rjmp	.+232    	; 0x4f80 <__fp_zero>
    4e98:	67 2f       	mov	r22, r23
    4e9a:	78 2f       	mov	r23, r24
    4e9c:	88 27       	eor	r24, r24
    4e9e:	b8 5f       	subi	r27, 0xF8	; 248
    4ea0:	39 f0       	breq	.+14     	; 0x4eb0 <__fixunssfsi+0x46>
    4ea2:	b9 3f       	cpi	r27, 0xF9	; 249
    4ea4:	cc f3       	brlt	.-14     	; 0x4e98 <__fixunssfsi+0x2e>
    4ea6:	86 95       	lsr	r24
    4ea8:	77 95       	ror	r23
    4eaa:	67 95       	ror	r22
    4eac:	b3 95       	inc	r27
    4eae:	d9 f7       	brne	.-10     	; 0x4ea6 <__fixunssfsi+0x3c>
    4eb0:	3e f4       	brtc	.+14     	; 0x4ec0 <__fixunssfsi+0x56>
    4eb2:	90 95       	com	r25
    4eb4:	80 95       	com	r24
    4eb6:	70 95       	com	r23
    4eb8:	61 95       	neg	r22
    4eba:	7f 4f       	sbci	r23, 0xFF	; 255
    4ebc:	8f 4f       	sbci	r24, 0xFF	; 255
    4ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    4ec0:	08 95       	ret

00004ec2 <__floatunsisf>:
    4ec2:	e8 94       	clt
    4ec4:	09 c0       	rjmp	.+18     	; 0x4ed8 <__floatsisf+0x12>

00004ec6 <__floatsisf>:
    4ec6:	97 fb       	bst	r25, 7
    4ec8:	3e f4       	brtc	.+14     	; 0x4ed8 <__floatsisf+0x12>
    4eca:	90 95       	com	r25
    4ecc:	80 95       	com	r24
    4ece:	70 95       	com	r23
    4ed0:	61 95       	neg	r22
    4ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ed4:	8f 4f       	sbci	r24, 0xFF	; 255
    4ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ed8:	99 23       	and	r25, r25
    4eda:	a9 f0       	breq	.+42     	; 0x4f06 <__floatsisf+0x40>
    4edc:	f9 2f       	mov	r31, r25
    4ede:	96 e9       	ldi	r25, 0x96	; 150
    4ee0:	bb 27       	eor	r27, r27
    4ee2:	93 95       	inc	r25
    4ee4:	f6 95       	lsr	r31
    4ee6:	87 95       	ror	r24
    4ee8:	77 95       	ror	r23
    4eea:	67 95       	ror	r22
    4eec:	b7 95       	ror	r27
    4eee:	f1 11       	cpse	r31, r1
    4ef0:	f8 cf       	rjmp	.-16     	; 0x4ee2 <__floatsisf+0x1c>
    4ef2:	fa f4       	brpl	.+62     	; 0x4f32 <__floatsisf+0x6c>
    4ef4:	bb 0f       	add	r27, r27
    4ef6:	11 f4       	brne	.+4      	; 0x4efc <__floatsisf+0x36>
    4ef8:	60 ff       	sbrs	r22, 0
    4efa:	1b c0       	rjmp	.+54     	; 0x4f32 <__floatsisf+0x6c>
    4efc:	6f 5f       	subi	r22, 0xFF	; 255
    4efe:	7f 4f       	sbci	r23, 0xFF	; 255
    4f00:	8f 4f       	sbci	r24, 0xFF	; 255
    4f02:	9f 4f       	sbci	r25, 0xFF	; 255
    4f04:	16 c0       	rjmp	.+44     	; 0x4f32 <__floatsisf+0x6c>
    4f06:	88 23       	and	r24, r24
    4f08:	11 f0       	breq	.+4      	; 0x4f0e <__floatsisf+0x48>
    4f0a:	96 e9       	ldi	r25, 0x96	; 150
    4f0c:	11 c0       	rjmp	.+34     	; 0x4f30 <__floatsisf+0x6a>
    4f0e:	77 23       	and	r23, r23
    4f10:	21 f0       	breq	.+8      	; 0x4f1a <__floatsisf+0x54>
    4f12:	9e e8       	ldi	r25, 0x8E	; 142
    4f14:	87 2f       	mov	r24, r23
    4f16:	76 2f       	mov	r23, r22
    4f18:	05 c0       	rjmp	.+10     	; 0x4f24 <__floatsisf+0x5e>
    4f1a:	66 23       	and	r22, r22
    4f1c:	71 f0       	breq	.+28     	; 0x4f3a <__floatsisf+0x74>
    4f1e:	96 e8       	ldi	r25, 0x86	; 134
    4f20:	86 2f       	mov	r24, r22
    4f22:	70 e0       	ldi	r23, 0x00	; 0
    4f24:	60 e0       	ldi	r22, 0x00	; 0
    4f26:	2a f0       	brmi	.+10     	; 0x4f32 <__floatsisf+0x6c>
    4f28:	9a 95       	dec	r25
    4f2a:	66 0f       	add	r22, r22
    4f2c:	77 1f       	adc	r23, r23
    4f2e:	88 1f       	adc	r24, r24
    4f30:	da f7       	brpl	.-10     	; 0x4f28 <__floatsisf+0x62>
    4f32:	88 0f       	add	r24, r24
    4f34:	96 95       	lsr	r25
    4f36:	87 95       	ror	r24
    4f38:	97 f9       	bld	r25, 7
    4f3a:	08 95       	ret

00004f3c <__fp_split3>:
    4f3c:	57 fd       	sbrc	r21, 7
    4f3e:	90 58       	subi	r25, 0x80	; 128
    4f40:	44 0f       	add	r20, r20
    4f42:	55 1f       	adc	r21, r21
    4f44:	59 f0       	breq	.+22     	; 0x4f5c <__fp_splitA+0x10>
    4f46:	5f 3f       	cpi	r21, 0xFF	; 255
    4f48:	71 f0       	breq	.+28     	; 0x4f66 <__fp_splitA+0x1a>
    4f4a:	47 95       	ror	r20

00004f4c <__fp_splitA>:
    4f4c:	88 0f       	add	r24, r24
    4f4e:	97 fb       	bst	r25, 7
    4f50:	99 1f       	adc	r25, r25
    4f52:	61 f0       	breq	.+24     	; 0x4f6c <__fp_splitA+0x20>
    4f54:	9f 3f       	cpi	r25, 0xFF	; 255
    4f56:	79 f0       	breq	.+30     	; 0x4f76 <__fp_splitA+0x2a>
    4f58:	87 95       	ror	r24
    4f5a:	08 95       	ret
    4f5c:	12 16       	cp	r1, r18
    4f5e:	13 06       	cpc	r1, r19
    4f60:	14 06       	cpc	r1, r20
    4f62:	55 1f       	adc	r21, r21
    4f64:	f2 cf       	rjmp	.-28     	; 0x4f4a <__fp_split3+0xe>
    4f66:	46 95       	lsr	r20
    4f68:	f1 df       	rcall	.-30     	; 0x4f4c <__fp_splitA>
    4f6a:	08 c0       	rjmp	.+16     	; 0x4f7c <__fp_splitA+0x30>
    4f6c:	16 16       	cp	r1, r22
    4f6e:	17 06       	cpc	r1, r23
    4f70:	18 06       	cpc	r1, r24
    4f72:	99 1f       	adc	r25, r25
    4f74:	f1 cf       	rjmp	.-30     	; 0x4f58 <__fp_splitA+0xc>
    4f76:	86 95       	lsr	r24
    4f78:	71 05       	cpc	r23, r1
    4f7a:	61 05       	cpc	r22, r1
    4f7c:	08 94       	sec
    4f7e:	08 95       	ret

00004f80 <__fp_zero>:
    4f80:	e8 94       	clt

00004f82 <__fp_szero>:
    4f82:	bb 27       	eor	r27, r27
    4f84:	66 27       	eor	r22, r22
    4f86:	77 27       	eor	r23, r23
    4f88:	cb 01       	movw	r24, r22
    4f8a:	97 f9       	bld	r25, 7
    4f8c:	08 95       	ret

00004f8e <__mulsf3>:
    4f8e:	0b d0       	rcall	.+22     	; 0x4fa6 <__mulsf3x>
    4f90:	78 c0       	rjmp	.+240    	; 0x5082 <__fp_round>
    4f92:	69 d0       	rcall	.+210    	; 0x5066 <__fp_pscA>
    4f94:	28 f0       	brcs	.+10     	; 0x4fa0 <__mulsf3+0x12>
    4f96:	6e d0       	rcall	.+220    	; 0x5074 <__fp_pscB>
    4f98:	18 f0       	brcs	.+6      	; 0x4fa0 <__mulsf3+0x12>
    4f9a:	95 23       	and	r25, r21
    4f9c:	09 f0       	breq	.+2      	; 0x4fa0 <__mulsf3+0x12>
    4f9e:	5a c0       	rjmp	.+180    	; 0x5054 <__fp_inf>
    4fa0:	5f c0       	rjmp	.+190    	; 0x5060 <__fp_nan>
    4fa2:	11 24       	eor	r1, r1
    4fa4:	ee cf       	rjmp	.-36     	; 0x4f82 <__fp_szero>

00004fa6 <__mulsf3x>:
    4fa6:	ca df       	rcall	.-108    	; 0x4f3c <__fp_split3>
    4fa8:	a0 f3       	brcs	.-24     	; 0x4f92 <__mulsf3+0x4>

00004faa <__mulsf3_pse>:
    4faa:	95 9f       	mul	r25, r21
    4fac:	d1 f3       	breq	.-12     	; 0x4fa2 <__mulsf3+0x14>
    4fae:	95 0f       	add	r25, r21
    4fb0:	50 e0       	ldi	r21, 0x00	; 0
    4fb2:	55 1f       	adc	r21, r21
    4fb4:	62 9f       	mul	r22, r18
    4fb6:	f0 01       	movw	r30, r0
    4fb8:	72 9f       	mul	r23, r18
    4fba:	bb 27       	eor	r27, r27
    4fbc:	f0 0d       	add	r31, r0
    4fbe:	b1 1d       	adc	r27, r1
    4fc0:	63 9f       	mul	r22, r19
    4fc2:	aa 27       	eor	r26, r26
    4fc4:	f0 0d       	add	r31, r0
    4fc6:	b1 1d       	adc	r27, r1
    4fc8:	aa 1f       	adc	r26, r26
    4fca:	64 9f       	mul	r22, r20
    4fcc:	66 27       	eor	r22, r22
    4fce:	b0 0d       	add	r27, r0
    4fd0:	a1 1d       	adc	r26, r1
    4fd2:	66 1f       	adc	r22, r22
    4fd4:	82 9f       	mul	r24, r18
    4fd6:	22 27       	eor	r18, r18
    4fd8:	b0 0d       	add	r27, r0
    4fda:	a1 1d       	adc	r26, r1
    4fdc:	62 1f       	adc	r22, r18
    4fde:	73 9f       	mul	r23, r19
    4fe0:	b0 0d       	add	r27, r0
    4fe2:	a1 1d       	adc	r26, r1
    4fe4:	62 1f       	adc	r22, r18
    4fe6:	83 9f       	mul	r24, r19
    4fe8:	a0 0d       	add	r26, r0
    4fea:	61 1d       	adc	r22, r1
    4fec:	22 1f       	adc	r18, r18
    4fee:	74 9f       	mul	r23, r20
    4ff0:	33 27       	eor	r19, r19
    4ff2:	a0 0d       	add	r26, r0
    4ff4:	61 1d       	adc	r22, r1
    4ff6:	23 1f       	adc	r18, r19
    4ff8:	84 9f       	mul	r24, r20
    4ffa:	60 0d       	add	r22, r0
    4ffc:	21 1d       	adc	r18, r1
    4ffe:	82 2f       	mov	r24, r18
    5000:	76 2f       	mov	r23, r22
    5002:	6a 2f       	mov	r22, r26
    5004:	11 24       	eor	r1, r1
    5006:	9f 57       	subi	r25, 0x7F	; 127
    5008:	50 40       	sbci	r21, 0x00	; 0
    500a:	8a f0       	brmi	.+34     	; 0x502e <__mulsf3_pse+0x84>
    500c:	e1 f0       	breq	.+56     	; 0x5046 <__mulsf3_pse+0x9c>
    500e:	88 23       	and	r24, r24
    5010:	4a f0       	brmi	.+18     	; 0x5024 <__mulsf3_pse+0x7a>
    5012:	ee 0f       	add	r30, r30
    5014:	ff 1f       	adc	r31, r31
    5016:	bb 1f       	adc	r27, r27
    5018:	66 1f       	adc	r22, r22
    501a:	77 1f       	adc	r23, r23
    501c:	88 1f       	adc	r24, r24
    501e:	91 50       	subi	r25, 0x01	; 1
    5020:	50 40       	sbci	r21, 0x00	; 0
    5022:	a9 f7       	brne	.-22     	; 0x500e <__mulsf3_pse+0x64>
    5024:	9e 3f       	cpi	r25, 0xFE	; 254
    5026:	51 05       	cpc	r21, r1
    5028:	70 f0       	brcs	.+28     	; 0x5046 <__mulsf3_pse+0x9c>
    502a:	14 c0       	rjmp	.+40     	; 0x5054 <__fp_inf>
    502c:	aa cf       	rjmp	.-172    	; 0x4f82 <__fp_szero>
    502e:	5f 3f       	cpi	r21, 0xFF	; 255
    5030:	ec f3       	brlt	.-6      	; 0x502c <__mulsf3_pse+0x82>
    5032:	98 3e       	cpi	r25, 0xE8	; 232
    5034:	dc f3       	brlt	.-10     	; 0x502c <__mulsf3_pse+0x82>
    5036:	86 95       	lsr	r24
    5038:	77 95       	ror	r23
    503a:	67 95       	ror	r22
    503c:	b7 95       	ror	r27
    503e:	f7 95       	ror	r31
    5040:	e7 95       	ror	r30
    5042:	9f 5f       	subi	r25, 0xFF	; 255
    5044:	c1 f7       	brne	.-16     	; 0x5036 <__mulsf3_pse+0x8c>
    5046:	fe 2b       	or	r31, r30
    5048:	88 0f       	add	r24, r24
    504a:	91 1d       	adc	r25, r1
    504c:	96 95       	lsr	r25
    504e:	87 95       	ror	r24
    5050:	97 f9       	bld	r25, 7
    5052:	08 95       	ret

00005054 <__fp_inf>:
    5054:	97 f9       	bld	r25, 7
    5056:	9f 67       	ori	r25, 0x7F	; 127
    5058:	80 e8       	ldi	r24, 0x80	; 128
    505a:	70 e0       	ldi	r23, 0x00	; 0
    505c:	60 e0       	ldi	r22, 0x00	; 0
    505e:	08 95       	ret

00005060 <__fp_nan>:
    5060:	9f ef       	ldi	r25, 0xFF	; 255
    5062:	80 ec       	ldi	r24, 0xC0	; 192
    5064:	08 95       	ret

00005066 <__fp_pscA>:
    5066:	00 24       	eor	r0, r0
    5068:	0a 94       	dec	r0
    506a:	16 16       	cp	r1, r22
    506c:	17 06       	cpc	r1, r23
    506e:	18 06       	cpc	r1, r24
    5070:	09 06       	cpc	r0, r25
    5072:	08 95       	ret

00005074 <__fp_pscB>:
    5074:	00 24       	eor	r0, r0
    5076:	0a 94       	dec	r0
    5078:	12 16       	cp	r1, r18
    507a:	13 06       	cpc	r1, r19
    507c:	14 06       	cpc	r1, r20
    507e:	05 06       	cpc	r0, r21
    5080:	08 95       	ret

00005082 <__fp_round>:
    5082:	09 2e       	mov	r0, r25
    5084:	03 94       	inc	r0
    5086:	00 0c       	add	r0, r0
    5088:	11 f4       	brne	.+4      	; 0x508e <__fp_round+0xc>
    508a:	88 23       	and	r24, r24
    508c:	52 f0       	brmi	.+20     	; 0x50a2 <__fp_round+0x20>
    508e:	bb 0f       	add	r27, r27
    5090:	40 f4       	brcc	.+16     	; 0x50a2 <__fp_round+0x20>
    5092:	bf 2b       	or	r27, r31
    5094:	11 f4       	brne	.+4      	; 0x509a <__fp_round+0x18>
    5096:	60 ff       	sbrs	r22, 0
    5098:	04 c0       	rjmp	.+8      	; 0x50a2 <__fp_round+0x20>
    509a:	6f 5f       	subi	r22, 0xFF	; 255
    509c:	7f 4f       	sbci	r23, 0xFF	; 255
    509e:	8f 4f       	sbci	r24, 0xFF	; 255
    50a0:	9f 4f       	sbci	r25, 0xFF	; 255
    50a2:	08 95       	ret

000050a4 <__udivmodqi4>:
    50a4:	99 1b       	sub	r25, r25
    50a6:	79 e0       	ldi	r23, 0x09	; 9
    50a8:	04 c0       	rjmp	.+8      	; 0x50b2 <__udivmodqi4_ep>

000050aa <__udivmodqi4_loop>:
    50aa:	99 1f       	adc	r25, r25
    50ac:	96 17       	cp	r25, r22
    50ae:	08 f0       	brcs	.+2      	; 0x50b2 <__udivmodqi4_ep>
    50b0:	96 1b       	sub	r25, r22

000050b2 <__udivmodqi4_ep>:
    50b2:	88 1f       	adc	r24, r24
    50b4:	7a 95       	dec	r23
    50b6:	c9 f7       	brne	.-14     	; 0x50aa <__udivmodqi4_loop>
    50b8:	80 95       	com	r24
    50ba:	08 95       	ret

000050bc <__divmodhi4>:
    50bc:	97 fb       	bst	r25, 7
    50be:	07 2e       	mov	r0, r23
    50c0:	16 f4       	brtc	.+4      	; 0x50c6 <__divmodhi4+0xa>
    50c2:	00 94       	com	r0
    50c4:	07 d0       	rcall	.+14     	; 0x50d4 <__divmodhi4_neg1>
    50c6:	77 fd       	sbrc	r23, 7
    50c8:	09 d0       	rcall	.+18     	; 0x50dc <__divmodhi4_neg2>
    50ca:	0e 94 78 28 	call	0x50f0	; 0x50f0 <__udivmodhi4>
    50ce:	07 fc       	sbrc	r0, 7
    50d0:	05 d0       	rcall	.+10     	; 0x50dc <__divmodhi4_neg2>
    50d2:	3e f4       	brtc	.+14     	; 0x50e2 <__divmodhi4_exit>

000050d4 <__divmodhi4_neg1>:
    50d4:	90 95       	com	r25
    50d6:	81 95       	neg	r24
    50d8:	9f 4f       	sbci	r25, 0xFF	; 255
    50da:	08 95       	ret

000050dc <__divmodhi4_neg2>:
    50dc:	70 95       	com	r23
    50de:	61 95       	neg	r22
    50e0:	7f 4f       	sbci	r23, 0xFF	; 255

000050e2 <__divmodhi4_exit>:
    50e2:	08 95       	ret

000050e4 <__tablejump2__>:
    50e4:	ee 0f       	add	r30, r30
    50e6:	ff 1f       	adc	r31, r31
    50e8:	05 90       	lpm	r0, Z+
    50ea:	f4 91       	lpm	r31, Z
    50ec:	e0 2d       	mov	r30, r0
    50ee:	09 94       	ijmp

000050f0 <__udivmodhi4>:
    50f0:	aa 1b       	sub	r26, r26
    50f2:	bb 1b       	sub	r27, r27
    50f4:	51 e1       	ldi	r21, 0x11	; 17
    50f6:	07 c0       	rjmp	.+14     	; 0x5106 <__udivmodhi4_ep>

000050f8 <__udivmodhi4_loop>:
    50f8:	aa 1f       	adc	r26, r26
    50fa:	bb 1f       	adc	r27, r27
    50fc:	a6 17       	cp	r26, r22
    50fe:	b7 07       	cpc	r27, r23
    5100:	10 f0       	brcs	.+4      	; 0x5106 <__udivmodhi4_ep>
    5102:	a6 1b       	sub	r26, r22
    5104:	b7 0b       	sbc	r27, r23

00005106 <__udivmodhi4_ep>:
    5106:	88 1f       	adc	r24, r24
    5108:	99 1f       	adc	r25, r25
    510a:	5a 95       	dec	r21
    510c:	a9 f7       	brne	.-22     	; 0x50f8 <__udivmodhi4_loop>
    510e:	80 95       	com	r24
    5110:	90 95       	com	r25
    5112:	bc 01       	movw	r22, r24
    5114:	cd 01       	movw	r24, r26
    5116:	08 95       	ret

00005118 <__eerd_byte_m32u4>:
    5118:	f9 99       	sbic	0x1f, 1	; 31
    511a:	fe cf       	rjmp	.-4      	; 0x5118 <__eerd_byte_m32u4>
    511c:	92 bd       	out	0x22, r25	; 34
    511e:	81 bd       	out	0x21, r24	; 33
    5120:	f8 9a       	sbi	0x1f, 0	; 31
    5122:	99 27       	eor	r25, r25
    5124:	80 b5       	in	r24, 0x20	; 32
    5126:	08 95       	ret

00005128 <__eerd_word_m32u4>:
    5128:	a8 e1       	ldi	r26, 0x18	; 24
    512a:	b0 e0       	ldi	r27, 0x00	; 0
    512c:	42 e0       	ldi	r20, 0x02	; 2
    512e:	50 e0       	ldi	r21, 0x00	; 0
    5130:	0c 94 af 28 	jmp	0x515e	; 0x515e <__eerd_blraw_m32u4>

00005134 <__eewr_byte_m32u4>:
    5134:	26 2f       	mov	r18, r22

00005136 <__eewr_r18_m32u4>:
    5136:	f9 99       	sbic	0x1f, 1	; 31
    5138:	fe cf       	rjmp	.-4      	; 0x5136 <__eewr_r18_m32u4>
    513a:	1f ba       	out	0x1f, r1	; 31
    513c:	92 bd       	out	0x22, r25	; 34
    513e:	81 bd       	out	0x21, r24	; 33
    5140:	20 bd       	out	0x20, r18	; 32
    5142:	0f b6       	in	r0, 0x3f	; 63
    5144:	f8 94       	cli
    5146:	fa 9a       	sbi	0x1f, 2	; 31
    5148:	f9 9a       	sbi	0x1f, 1	; 31
    514a:	0f be       	out	0x3f, r0	; 63
    514c:	01 96       	adiw	r24, 0x01	; 1
    514e:	08 95       	ret

00005150 <__eewr_word_m32u4>:
    5150:	0e 94 9a 28 	call	0x5134	; 0x5134 <__eewr_byte_m32u4>
    5154:	27 2f       	mov	r18, r23
    5156:	0c 94 9b 28 	jmp	0x5136	; 0x5136 <__eewr_r18_m32u4>

0000515a <__eerd_block_m32u4>:
    515a:	dc 01       	movw	r26, r24
    515c:	cb 01       	movw	r24, r22

0000515e <__eerd_blraw_m32u4>:
    515e:	fc 01       	movw	r30, r24
    5160:	f9 99       	sbic	0x1f, 1	; 31
    5162:	fe cf       	rjmp	.-4      	; 0x5160 <__eerd_blraw_m32u4+0x2>
    5164:	06 c0       	rjmp	.+12     	; 0x5172 <__eerd_blraw_m32u4+0x14>
    5166:	f2 bd       	out	0x22, r31	; 34
    5168:	e1 bd       	out	0x21, r30	; 33
    516a:	f8 9a       	sbi	0x1f, 0	; 31
    516c:	31 96       	adiw	r30, 0x01	; 1
    516e:	00 b4       	in	r0, 0x20	; 32
    5170:	0d 92       	st	X+, r0
    5172:	41 50       	subi	r20, 0x01	; 1
    5174:	50 40       	sbci	r21, 0x00	; 0
    5176:	b8 f7       	brcc	.-18     	; 0x5166 <__eerd_blraw_m32u4+0x8>
    5178:	08 95       	ret

0000517a <_exit>:
    517a:	f8 94       	cli

0000517c <__stop_program>:
    517c:	ff cf       	rjmp	.-2      	; 0x517c <__stop_program>
